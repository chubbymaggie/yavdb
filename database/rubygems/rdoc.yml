---
- id: rubyadvisory:rubygems:rdoc:CVE-2013-0256
  title: RDoc 2.3.0 through 3.12 XSS Exploit
  description: |
    Doc documentation generated by rdoc 2.3.0 through rdoc 3.12 and prereleases
    up to rdoc 4.0.0.preview2.1 are vulnerable to an XSS exploit. This exploit
    may lead to cookie disclosure to third parties.

    The exploit exists in darkfish.js which is copied from the RDoc install
    location to the generated documentation.

    RDoc is a static documentation generation tool. Patching the library itself
    is insufficient to correct this exploit.

    This exploit was discovered by Evgeny Ermakov <corwmh@gmail.com>.
  affected_package: rdoc
  patched_versions:
  - ">= 4.0"
  - "~> 3.12.1"
  - "~> 3.9.5"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-0256
  osvdb: 90004
  cvss_v2_score: 4.3
  disclosed_date: 2013-02-06
  created_date: 2013-02-06
  last_modified_date: 2013-02-06
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://www.osvdb.org/show/osvdb/90004
- id: snykio:rubygems:rdoc:CVE-2013-0256
  title: Cross-site Scripting (XSS)
  description: |+
    [`rdoc`][1] is a gem that produces HTML and command-line documentation
    for Ruby projects.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attack, which may lead to cookie disclosure to third parties. The
    exploit exists in `darkfish.js` which is copied from the `rdoc` install
    location to the generated documentation. Due to the way that `rdoc`
    generates static documentation, any documentation generated using an
    affected version of `rdoc` should be regenerated using the patched
    version.



    [1]: https://rubygems.org/gems/rdoc
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: rdoc
  vulnerable_versions:
  - "< 3.12.1  >= 3.10"
  - "< 3.9.5"
  - "< 4.0  >= 3.13"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-0256
  cwe:
  - CWE-79
  disclosed_date: 2013-02-05
  created_date: 2013-02-05
  last_modified_date: 2013-02-05
  credit:
  - Evgeny Ermakov
  references:
  - https://github.com/rdoc/rdoc/commit/ffa87887ee0517793df7541629a470e331f9fe60
  - https://nvd.nist.gov/vuln/detail/CVE-2013-0256
  - https://www.ruby-lang.org/en/news/2013/02/06/rdoc-xss-cve-2013-0256/
  source_url: https://snyk.io/vuln/SNYK-RUBY-RDOC-20057
