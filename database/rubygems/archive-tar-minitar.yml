---
- id: rubyadvisory:rubygems:archive-tar-minitar:CVE-2016-10173
  title: Archive-Tar-Minitar Directory Traversal Vulnerability
  description: |
    Minitar allows attackers to overwrite arbitrary files during archive
    extraction via a .. (dot dot) in an extracted filename. Analogous
    vulnerabilities for unzip and tar:
    https://www.cvedetails.com/cve/CVE-2001-1268/ and
    http://www.cvedetails.com/cve/CVE-2001-1267/

    Credit: ecneladis
  affected_package: archive-tar-minitar
  patched_versions:
  - ">= 0.6.0"
  package_manager: rubygems
  cve:
  - CVE-2016-10173
  disclosed_date: 2016-08-22
  created_date: 2016-08-22
  last_modified_date: 2016-08-22
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://github.com/atoulme/minitar/issues/5
- id: snykio:rubygems:archive-tar-minitar:CVE-2016-10173
  title: Arbitrary File Write via Archive Extraction (Zip Slip)
  description: |
    [`archive-tar-minitar`][1] is a pure-Ruby library that provides the
    ability to deal with POSIX tar(1) archive files.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +++2018-04-15 22:04:29 .....           19           19  good.txt
        +++2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys

    Related to [`rubyzip`][2] and [`minitar`][3].



    [1]: https://rubygems.org/gems/archive-tar-minitar
    [2]: https://snyk.io/vuln/SNYK-RUBY-RUBYZIP-20336
    [3]: https://snyk.io/vuln/SNYK-RUBY-MINITAR-20335
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: archive-tar-minitar
  vulnerable_versions:
  - "<0.5.2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2016-10173
  cwe:
  - CWE-29
  disclosed_date: 2016-08-21
  created_date: 2017-03-06
  last_modified_date: 2017-03-06
  credit:
  - ecneladis
  references:
  - https://github.com/halostatue/minitar/issues/16
  - https://github.com/halostatue/minitar/commit/30e62689b614938dc96b4f2cb8e033e72f650670
  - https://snyk.io/research/zip-slip-vulnerability
  - https://github.com/snyk/zip-slip-vulnerability
  source_url: https://snyk.io/vuln/SNYK-RUBY-ARCHIVETARMINITAR-20337
