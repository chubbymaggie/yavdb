---
- id: rubyadvisory:rubygems:actionview:CVE-2016-0752
  title: Possible Information Leak Vulnerability in Action View
  description: |
    There is a possible directory traversal and information leak vulnerability in
    Action View. This vulnerability has been assigned the CVE identifier
    CVE-2016-0752.

    Versions Affected:  All.
    Not affected:       None.
    Fixed Versions:     5.0.0.beta1.1, 4.2.5.1, 4.1.14.1, 3.2.22.1

    Impact
    ------
    Applications that pass unverified user input to the `render` method in a
    controller may be vulnerable to an information leak vulnerability.

    Impacted code will look something like this:

    ```ruby
    def index
      render params[:id]
    end
    ```

    Carefully crafted requests can cause the above code to render files from
    unexpected places like outside the application's view directory, and can
    possibly escalate this to a remote code execution attack.

    All users running an affected release should either upgrade or use one of the
    workarounds immediately.

    Releases
    --------
    The FIXED releases are available at the normal locations.

    Workarounds
    -----------
    A workaround to this issue is to not pass arbitrary user input to the `render`
    method.  Instead, verify that data before passing it to the `render` method.

    For example, change this:

    ```ruby
    def index
      render params[:id]
    end
    ```

    To this:

    ```ruby
    def index
      render verify_template(params[:id])
    end

    private
    def verify_template(name)
      # add verification logic particular to your application here
    end
    ```

    Patches
    -------
    To aid users who aren't able to upgrade immediately we have provided patches for
    the two supported release series. They are in git-am format and consist of a
    single changeset.

    * 3-2-render_data_leak.patch - Patch for 3.2 series
    * 4-1-render_data_leak.patch - Patch for 4.1 series
    * 4-2-render_data_leak.patch - Patch for 4.2 series
    * 5-0-render_data_leak.patch - Patch for 5.0 series

    Please note that only the 4.1.x and 4.2.x series are supported at present. Users
    of earlier unsupported releases are advised to upgrade as soon as possible as we
    cannot guarantee the continued availability of security fixes for unsupported
    releases.

    Credits
    -------
    Thanks John Poulin for reporting this!
  affected_package: actionview
  patched_versions:
  - ">= 5.0.0.beta1.1"
  - "~> 4.2.5  >= 4.2.5.1"
  - "~> 4.1.14  >= 4.1.14.1"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2016-0752
  cvss_v2_score: 5.0
  cvss_v3_score: 7.5
  disclosed_date: 2016-01-25
  created_date: 2016-01-25
  last_modified_date: 2016-01-25
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/335P1DcLG00
- id: rubyadvisory:rubygems:actionview:CVE-2016-2097
  title: Possible Information Leak Vulnerability in Action View
  description: "\nThere is a possible directory traversal and information leak vulnerability
    \nin Action View. This was meant to be fixed on CVE-2016-0752. However the 3.2
    \npatch was not covering all the scenarios. This vulnerability has been \nassigned
    the CVE identifier CVE-2016-2097.\n\nVersions Affected:  3.2.x, 4.0.x, 4.1.x\nNot
    affected:       4.2+\nFixed Versions:     3.2.22.2, 4.1.14.2\n\nImpact \n------
    \nApplications that pass unverified user input to the `render` method in a\ncontroller
    may be vulnerable to an information leak vulnerability.\n\nImpacted code will
    look something like this:\n\n```ruby\ndef index\n  render params[:id]\nend\n```\n\nCarefully
    crafted requests can cause the above code to render files from\nunexpected places
    like outside the application's view directory, and can\npossibly escalate this
    to a remote code execution attack.\n\nAll users running an affected release should
    either upgrade or use one of the\nworkarounds immediately.\n\nReleases \n--------
    \nThe FIXED releases are available at the normal locations. \n\nWorkarounds \n-----------
    \nA workaround to this issue is to not pass arbitrary user input to the `render`\nmethod.
    Instead, verify that data before passing it to the `render` method.\n\nFor example,
    change this:\n\n```ruby\ndef index\n  render params[:id]\nend\n```\n\nTo this:\n\n```ruby\ndef
    index\n  render verify_template(params[:id])\nend\n\nprivate\ndef verify_template(name)\n
    \ # add verification logic particular to your application here\nend\n```\n\nPatches
    \n------- \nTo aid users who aren't able to upgrade immediately we have provided
    patches \nfor it. It is in git-am format and consist of a single changeset.\n\n*
    3-2-render_data_leak_2.patch - Patch for 3.2 series\n* 4-1-render_data_leak_2.patch
    - Patch for 4.1 series\n\nCredits \n------- \nThanks to both Jyoti Singh and Tobias
    Kraze from makandra for reporting this \nand working with us in the patch!\n"
  affected_package: actionview
  unaffected_versions:
  - ">= 4.2.0"
  patched_versions:
  - "~> 4.1.14  >= 4.1.14.2"
  package_manager: rubygems
  cve:
  - CVE-2016-2097
  disclosed_date: 2016-02-29
  created_date: 2016-02-29
  last_modified_date: 2016-02-29
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/ddY6HgqB2z4
- id: rubyadvisory:rubygems:actionview:CVE-2016-6316
  title: Possible XSS Vulnerability in Action View
  description: |
    There is a possible XSS vulnerability in Action View.  Text declared as "HTML
    safe" will not have quotes escaped when used as attribute values in tag
    helpers.

    Impact
    ------

    Text declared as "HTML safe" when passed as an attribute value to a tag helper
    will not have quotes escaped which can lead to an XSS attack.  Impacted code
    looks something like this:

    ```ruby
    content_tag(:div, "hi", title: user_input.html_safe)
    ```

    Some helpers like the `sanitize` helper will automatically mark strings as
    "HTML safe", so impacted code could also look something like this:

    ```ruby
    content_tag(:div, "hi", title: sanitize(user_input))
    ```

    All users running an affected release should either upgrade or use one of the
    workarounds immediately.

    Workarounds
    -----------
    You can work around this issue by either *not* marking arbitrary user input as
    safe, or by manually escaping quotes like this:

    ```ruby
    def escape_quotes(value)
      value.gsub(/"/, '&quot;'.freeze)
    end

    content_tag(:div, "hi", title: escape_quotes(sanitize(user_input)))
    ```
  affected_package: actionview
  unaffected_versions:
  - "< 3.0.0"
  patched_versions:
  - "~> 4.2.7.1"
  - "~> 4.2.8"
  - ">= 5.0.0.1"
  package_manager: rubygems
  cve:
  - CVE-2016-6316
  disclosed_date: 2016-08-11
  created_date: 2016-08-11
  last_modified_date: 2016-08-11
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/I-VWr034ouk
- id: snykio:rubygems:actionview:CVE-2016-0752
  title: Information Exposure
  description: "[`actionview`][1] is a conventions and helpers gem for building web\npages.
    Affected versions of this Gem are vulnerable to directory\ntraversal and information
    leaks.\n\n# Details   {#details}\n\nApplications that pass unverified user input
    to the `render` method in a\ncontroller may be vulnerable to an information leak
    vulnerability.\n\nImpacted code will look something like this:\n\n    def index\n
    \     render params[:id]\n    end\n\nCarefully crafted requests can cause the
    above code to render files from\nunexpected places like outside the application\\'s
    view directory, and\ncan possibly escalate this to a remote code execution attack.\n\nAll
    users running an affected release should either upgrade or use one\nof the workarounds
    immediately.\n\nA workaround to this issue is to not pass arbitrary user input
    to the\n`render` method. Instead, verify that data before passing it to the\n`render`
    method.\n\nFor example, change this:\n\n    def index\n      render params[:id]\n
    \   end\n\nTo this:\n\n    def index\n      render verify_template(params[:id])\n
    \   end\n    \n    private\n    def verify_template(name)\n      # add verification
    logic particular to your application here\n    end\n\n\n\n[1]: https://rubygems.org/gems/actionview\n"
  affected_package: actionview
  vulnerable_versions:
  - "< 5.0.0.beta1.1  >= 4.3"
  - "< 4.2.5.1  >= 4.2"
  - "< 4.1.14.1  >= 3.2.23"
  - "< 3.2.22.1"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2016-0752
  cwe:
  - CWE-200
  disclosed_date: 2016-01-24
  created_date: 2016-01-24
  last_modified_date: 2016-01-24
  credit:
  - John Poulin
  references:
  - http://rubysec.com/advisories/CVE-2016-0752
  - https://groups.google.com/forum/#!topic/rubyonrails-security/335P1DcLG00
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONVIEW-20262
- id: snykio:rubygems:actionview:CVE-2016-2097
  title: Information Exposure
  description: "[`actionview`][1] is a conventions and helpers gem for building web\npages.
    Affected versions of this Gem are vulnerable to directory\ntraversal and information
    leaks. This was meant to be fixed on\n[CVE-2016-0752][2] but the 3.2 patch was
    not covering all the scenarios.\n\n\n\n[1]: https://rubygems.org/gems/actionview\n[2]:
    https://snyk.io/vuln/SNYK-RUBY-ACTIONVIEW-20262\n\\nApplications that pass unverified
    user input to the `render` method in a\ncontroller may be vulnerable to an information
    leak vulnerability.\n\nImpacted code will look something like this:\n\n    def
    index\n      render params[:id]\n    end\n\nCarefully crafted requests can cause
    the above code to render files from\nunexpected places like outside the application\\'s
    view directory, and\ncan possibly escalate this to a remote code execution attack.\n\nAll
    users running an affected release should either upgrade or use one\nof the workarounds
    immediately.\n\nA workaround to this issue is to not pass arbitrary user input
    to the\n`render` method. Instead, verify that data before passing it to the\n`render`
    method.\n\nFor example, change this:\n\n    def index\n      render params[:id]\n
    \   end\n\nTo this:\n\n    def index\n      render verify_template(params[:id])\n
    \   end\n    \n    private\n    def verify_template(name)\n      # add verification
    logic particular to your application here\n    end\n\n"
  affected_package: actionview
  vulnerable_versions:
  - "< 4.1.14.2  >= 3.2.23"
  - "< 3.2.22.2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2016-2097
  cwe:
  - CWE-200
  disclosed_date: 2016-02-28
  created_date: 2016-02-28
  last_modified_date: 2016-02-28
  credit:
  - Jyoti Singh and Tobias Kraze
  references:
  - http://rubysec.com/advisories/CVE-2016-2097
  - https://groups.google.com/forum/#!topic/rubyonrails-security/ddY6HgqB2z4
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONVIEW-20263
- id: snykio:rubygems:actionview:CVE-2016-6316
  title: Cross-site Scripting (XSS)
  description: "[`actionview`][1] is a conventions and helpers gem for building web\npages.\n\nAffected
    versions of this Gem are vulnerable to Cross-site Scripting\n(XSS) attacks via
    unescaped quotes when used as attribute values in tag\nhelpers.\n\nText declared
    as \\\"HTML safe\\\" when passed as an attribute value to a\ntag helper will not
    have quotes escaped which can lead to a Cross-site\nScripting (XSS) attack. Impacted
    code looks something like this:\n\n    content_tag(:div, \"hi\", title: user_input.html_safe)\n\nSome
    helpers like the `sanitize` helper will automatically mark strings\nas \\\"HTML
    safe\\\", so impacted code could also look something like this:\n\n    content_tag(:div,
    \"hi\", title: sanitize(user_input))\n\nAll users running an affected release
    should either upgrade or use one\nof the workarounds immediately.\n\nYou can work
    around this issue by either *not* marking arbitrary user\ninput as safe, or by
    manually escaping quotes like this:\n\n    def escape_quotes(value)\n      value.gsub(/\"/,
    '&quot;'.freeze)\n    end\n    \n    content_tag(:div, \"hi\", title: escape_quotes(sanitize(user_input)))\n\n\n\n[1]:
    https://rubygems.org/gems/actionview\n\\nCross-Site Scripting (XSS) attacks occur
    when an attacker tricks a\nuser’s browser to execute malicious JavaScript code
    in the context of a\nvictim’s domain. Such scripts can steal the user’s session
    cookies for\nthe domain, scrape or modify its content, and perform or modify actions\non
    the user’s behalf, actions typically blocked by the browser’s Same\nOrigin Policy.\n\nThese
    attacks are possible by escaping the context of the web\napplication and injecting
    malicious scripts in an otherwise trusted\nwebsite. These scripts can introduce
    additional attributes (say, a\n\\\"new\\\" option in a dropdown list or a new
    link to a malicious site) and\ncan potentially execute code on the clients side,
    unbeknown to the\nvictim. This occurs when characters like `<` `>` `\"` `'` are
    not escaped\nproperly.\n\nThere are a few types of XSS:\n\n* **Persistent XSS**
    is an attack in which the malicious code persists\n  into the web app’s database.\n*
    **Reflected XSS** is an which the website echoes back a portion of the\n  request.
    The attacker needs to trick the user into clicking a\n  malicious link (for instance
    through a phishing email or malicious JS\n  on another page), which triggers the
    XSS attack.\n* **DOM-based XSS** is an that occurs purely in the browser when\n
    \ client-side JavaScript echoes back a portion of the URL onto the page.\n  DOM-Based
    XSS is notoriously hard to detect, as the server never gets\n  a chance to see
    the attack taking place.\n\n"
  affected_package: actionview
  vulnerable_versions:
  - "< 5.0.0.1  >= 5.0.0.0"
  - "< 4.2.7.1  >= 3.2.23"
  - "< 3.2.22.3  >= 3.0.0"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2016-6316
  cwe:
  - CWE-79
  disclosed_date: 2016-08-10
  created_date: 2016-08-10
  last_modified_date: 2016-08-10
  credit:
  - Andrew Carpenter
  references:
  - https://groups.google.com/forum/#!topic/rubyonrails-security/I-VWr034ouk
  - https://nvd.nist.gov/vuln/detail/CVE-2016-6316
  - https://www.debian.org/security/2016/dsa-3651
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIONVIEW-20271
