---
- id: rubyadvisory:rubygems:rails-html-sanitizer:CVE-2015-7578
  title: Possible XSS vulnerability in rails-html-sanitizer
  description: "There is a possible XSS vulnerability in rails-html-sanitizer. This
    \nvulnerability has been assigned the CVE identifier CVE-2015-7578. \n\nVersions
    Affected:  All. \nNot affected:       None. \nFixed Versions:     1.0.3 \n\nImpact
    \n------ \nThere is a possible XSS vulnerability in rails-html-sanitizer.  Certain
    \nattributes are not removed from tags when they are sanitized, and these \nattributes
    can lead to an XSS attack on target applications. \n\nAll users running an affected
    release should either upgrade or use one of the \nworkarounds immediately. \n\nReleases
    \n-------- \nThe FIXED releases are available at the normal locations. \n\nWorkarounds
    \n----------- \nThere are no feasible workarounds for this issue. \n\nPatches
    \n------- \nTo aid users who aren't able to upgrade immediately we have provided
    patches for \nthe two supported release series. They are in git-am format and
    consist of a \nsingle changeset. \n\n* 1-0-sanitize_data_attributes.patch - Patch
    for 1.0 series \n\nCredits \n------- \nThanks to Ben Murphy and Marien for reporting
    this.\n  \n"
  affected_package: rails-html-sanitizer
  patched_versions:
  - ">= 1.0.3"
  package_manager: rubygems
  cve:
  - CVE-2015-7578
  disclosed_date: 2016-01-25
  created_date: 2016-01-25
  last_modified_date: 2016-01-25
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/uh--W4TDwmI
- id: rubyadvisory:rubygems:rails-html-sanitizer:CVE-2015-7579
  title: XSS vulnerability in rails-html-sanitizer
  description: "There is a XSS vulnerability in `Rails::Html::FullSanitizer` used
    by Action View's `strip_tags`. \nThis vulnerability has been assigned the CVE
    identifier CVE-2015-7579. \n\nVersions Affected:  1.0.2 \nNot affected:       1.0.0,
    1.0.1 \nFixed Versions:     1.0.3 \n\nImpact \n------ \nDue to the way that `Rails::Html::FullSanitizer`
    is implemented, if an attacker \npasses an already escaped HTML entity to the
    input of Action View's `strip_tags` \nthese entities will be unescaped what may
    cause a XSS attack if used in combination \nwith `raw` or `html_safe`. \n\nFor
    example: \n\n    strip_tags(\"&lt;script&gt;alert('XSS')&lt;/script&gt;\") \n\nWould
    generate: \n\n    <script>alert('XSS')</script> \n\nAfter the fix it will generate:
    \n\n    &lt;script&gt;alert('XSS')&lt;/script&gt; \n\nAll users running an affected
    release should either upgrade or use one of the \nworkarounds immediately. \n\nReleases
    \n-------- \nThe FIXED releases are available at the normal locations. \n\nWorkarounds
    \n----------- \nIf you can't upgrade, please use the following monkey patch in
    an initializer \nthat is loaded before your application: \n\n``` \n$ cat config/initializers/strip_tags_fix.rb
    \nclass ActionView::Base \n  def strip_tags(html) \n    self.class.full_sanitizer.sanitize(html)
    \n  end \nend \n``` \n\nPatches \n------- \nTo aid users who aren't able to upgrade
    immediately we have provided patches \nfor the two supported release series. They
    are in git-am format and consist \nof a single changeset. \n\n* Do-not-unescape-already-escaped-HTML-entities.patch
    \n\nCredits \n------- \nThank you to Arthur Neves from GitHub and Spyros Livathinos
    from Zendesk for \nreporting the problem and working with us to fix it. \n"
  affected_package: rails-html-sanitizer
  unaffected_versions:
  - "~> 1.0.0"
  - "~> 1.0.1"
  patched_versions:
  - ">= 1.0.3"
  package_manager: rubygems
  cve:
  - CVE-2015-7579
  disclosed_date: 2016-01-25
  created_date: 2016-01-25
  last_modified_date: 2016-01-25
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/OU9ugTZcbjc
- id: rubyadvisory:rubygems:rails-html-sanitizer:CVE-2015-7580
  title: Possible XSS vulnerability in rails-html-sanitizer
  description: "There is a possible XSS vulnerability in the white list sanitizer
    in the \nrails-html-sanitizer gem. This vulnerability has been assigned the CVE
    \nidentifier CVE-2015-7580. \n\nVersions Affected:  All. \nNot affected:       None.
    \nFixed Versions:     v1.0.3 \n\nImpact \n------ \nCarefully crafted strings can
    cause user input to bypass the sanitization in \nthe white list sanitizer which
    will can lead to an XSS attack. \n\nVulnerable code will look something like this:
    \n\n  <%= sanitize user_input, tags: %w(em) %> \n\nAll users running an affected
    release should either upgrade or use one of the \nworkarounds immediately. \n\nReleases
    \n-------- \nThe FIXED releases are available at the normal locations. \n\nWorkarounds
    \n----------- \nPutting the following monkey patch in an initializer can help
    to mitigate the \nissue: \n\n``` \nclass Rails::Html::PermitScrubber \n  alias
    :old_scrub :scrub \n  alias :old_skip_node? :skip_node? \n\n  def scrub(node)
    \n    if node.cdata? \n      text = node.document.create_text_node node.text \n
    \     node.replace text \n      return CONTINUE \n    end \n    old_scrub node
    \n  end \n\n  def skip_node?(node); node.text?; end \nend \n``` \n\nPatches \n-------
    \nTo aid users who aren't able to upgrade immediately we have provided patches
    for \nthe two supported release series. They are in git-am format and consist
    of a \nsingle changeset. \n\n* 1-0-whitelist_sanitizer_xss.patch - Patch for 1.0
    series \n\nCredits \n------- \nThanks to Arnaud Germis, Nate Clark, and John Colvin
    for reporting this issue.\n"
  affected_package: rails-html-sanitizer
  patched_versions:
  - ">= 1.0.3"
  package_manager: rubygems
  cve:
  - CVE-2015-7580
  disclosed_date: 2016-01-25
  created_date: 2016-01-25
  last_modified_date: 2016-01-25
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/uh--W4TDwmI
- id: rubyadvisory:rubygems:rails-html-sanitizer:CVE-2018-3741
  title: XSS vulnerability in rails-html-sanitizer
  description: |
    There is a possible XSS vulnerability in rails-html-sanitizer.  The gem allows
    non-whitelisted attributes to be present in sanitized output when input with
    specially-crafted HTML fragments, and these attributes can lead to an XSS attack
    on target applications.

    This issue is similar to CVE-2018-8048 in Loofah.
  affected_package: rails-html-sanitizer
  patched_versions:
  - ">= 1.0.4"
  package_manager: rubygems
  cve:
  - CVE-2018-3741
  disclosed_date: 2018-03-22
  created_date: 2018-03-22
  last_modified_date: 2018-03-22
  credit:
  - Rubysec
  references:
  - https://github.com/rails/rails-html-sanitizer/commit/f3ba1a839a35f2ba7f941c15e239a1cb379d56ae
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/d/msg/rubyonrails-security/tP7W3kLc5u4/uDy2Br7xBgAJ
- id: snykio:rubygems:rails-html-sanitizer:20254
  title: Cross-site Scripting (XSS)
  description: |+
    [rails-html-sanitizer][1] is an HTML sanitization gem for Rails
    applications.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in `Rails::Html::FullSanitizer` used by Action View\'s
    `strip_tags`. Due to the way it is implemented, if an attacker passes an
    already escaped HTML entity to the input of Action View\'s `strip_tags`
    these entities will be unescaped, what may cause a Cross-site Scripting
    attack if it used in combination with `raw` or `html_safe`.



    [1]: https://rubygems.org/gems/rails-html-sanitizer
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: rails-html-sanitizer
  vulnerable_versions:
  - "< 1.0.3  >= 1.0.2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2015-7579
  cwe:
  - CWE-79
  disclosed_date: 2016-01-24
  created_date: 2016-01-24
  last_modified_date: 2016-01-24
  credit:
  - Arthur Neves
  - Spyros Livathinos
  references:
  - https://groups.google.com/forum/#!topic/rubyonrails-security/OU9ugTZcbjc
  - https://nvd.nist.gov/vuln/detail/CVE-2015-7579
  - https://rubysec.com/advisories/rails-html-sanitizer-CVE-2015-7579
  source_url: https://snyk.io/vuln/SNYK-RUBY-RAILSHTMLSANITIZER-20254
- id: snykio:rubygems:rails-html-sanitizer:20257
  title: Cross-site Scripting (XSS)
  description: |+
    [rails-html-sanitizer][1] is an HTML sanitization gem for Rails
    applications.

    Affected versions of the packages are vulnerable to Cross Site Scripting
    (XSS) attack when certain attributes are not removed from tags when they
    are sanitized.



    [1]: https://rubygems.org/gems/rails-html-sanitizer
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: rails-html-sanitizer
  vulnerable_versions:
  - "< 1.0.3"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2015-7578
  cwe:
  - CWE-79
  disclosed_date: 2016-01-24
  created_date: 2016-01-24
  last_modified_date: 2016-01-24
  credit:
  - Ben Murphy
  - Marien
  references:
  - https://groups.google.com/forum/#!topic/rubyonrails-security/uh--W4TDwmI
  - https://nvd.nist.gov/vuln/detail/CVE-2015-7578
  - https://rubysec.com/advisories/rails-html-sanitizer-CVE-2015-7578
  source_url: https://snyk.io/vuln/SNYK-RUBY-RAILSHTMLSANITIZER-20257
- id: snykio:rubygems:rails-html-sanitizer:20261
  title: Cross-site Scripting (XSS)
  description: |+
    [rails-html-sanitizer][1] is an HTML sanitization gem for Rails
    applications.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in the white list sanitizer in the `rails-html-sanitizer` gem.
    Carefully crafted strings can cause user input to bypass the
    sanitization in the white list sanitizer which will can lead to an XSS
    attack.



    [1]: https://rubygems.org/gems/rails-html-sanitizer
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: rails-html-sanitizer
  vulnerable_versions:
  - "< 1.0.3"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2015-7580
  cwe:
  - CWE-79
  disclosed_date: 2016-01-24
  created_date: 2016-01-24
  last_modified_date: 2016-01-24
  credit:
  - Arnaud Germis
  - John Colvin
  - Nate Clark
  references:
  - https://groups.google.com/forum/#!topic/rubyonrails-security/uh--W4TDwmI
  - https://rubysec.com/advisories/rails-html-sanitizer-CVE-2015-7580
  source_url: https://snyk.io/vuln/SNYK-RUBY-RAILSHTMLSANITIZER-20261
- id: snykio:rubygems:rails-html-sanitizer:22025
  title: Cross-site Scripting (XSS)
  description: |+
    [rails-html-sanitizer][1]

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The gem allows non-whitelisted attributes to be present in
    sanitized output when input with specially-crafted HTML fragments, and
    these attributes can lead to an XSS attack on target applications.

    This issue is similar to [CVE-2018-8048][2] in Loofah.



    [1]: https://github.com/rails/rails-html-sanitizer
    [2]: https://snyk.io/vuln/SNYK-RUBY-LOOFAH-22023
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: rails-html-sanitizer
  vulnerable_versions:
  - "<1.0.4"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2018-3741
  cwe:
  - CWE-79
  disclosed_date: 2018-03-22
  created_date: 2018-03-27
  last_modified_date: 2018-03-27
  credit:
  - Kaarlo Haikonen
  references:
  - https://groups.google.com/d/msg/rubyonrails-security/tP7W3kLc5u4/uDy2Br7xBgAJ
  - https://nvd.nist.gov/vuln/detail/CVE-2018-3741
  source_url: https://snyk.io/vuln/SNYK-RUBY-RAILSHTMLSANITIZER-22025
