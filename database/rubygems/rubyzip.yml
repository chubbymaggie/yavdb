---
- id: rubyadvisory:rubygems:rubyzip:2017-02-27
  title: Directory traversal vulnerability in rubyzip
  description: |
    The Zip::File component in the rubyzip gem before 1.2.1 for Ruby has a
    directory traversal vulnerability. If a site allows uploading of .zip files,
    an attacker can upload a malicious file that uses "../" pathname substrings to
    write arbitrary files to the filesystem.
  affected_package: rubyzip
  patched_versions:
  - ">= 1.2.1"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2017-5946
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://github.com/rubyzip/rubyzip/issues/315
- id: rubyadvisory:rubygems:rubyzip:2018-06-14
  title: Directory Traversal in rubyzip
  description: |
    rubyzip version 1.2.1 and earlier contains a Directory Traversal vulnerability
    in Zip::File component that can result in write arbitrary files to the filesystem.
    If a site allows uploading of .zip files, an attacker can upload a malicious file
    which contains symlinks or files with absolute pathnames "../" to write arbitrary
    files to the filesystem.
  affected_package: rubyzip
  patched_versions:
  - ">= 1.2.2"
  package_manager: rubygems
  cve:
  - CVE-2018-1000544
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  - https://security-tracker.debian.org/tracker/CVE-2018-1000544
  source_url: https://github.com/rubyzip/rubyzip/issues/369
- id: snykio:rubygems:rubyzip:2017-02-03
  title: Arbitrary File Write via Archive Extraction (Zip Slip)
  description: |
    [`rubyzip`][1] is rubyzip is a ruby module for reading and writing zip
    files.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +++2018-04-15 22:04:29 .....           19           19  good.txt
        +++2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys

    Related to [`minitar`][2] and [`archive-tar-minitar`][3].



    [1]: https://rubygems.org/gems/rubyzip
    [2]: https://snyk.io/vuln/SNYK-RUBY-MINITAR-20335
    [3]: https://snyk.io/vuln/SNYK-RUBY-ARCHIVETARMINITAR-20337
    \n[`rubyzip`][1] is rubyzip is a ruby module for reading and writing zip
    files.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +++2018-04-15 22:04:29 .....           19           19  good.txt
        +++2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys

    Related to [`minitar`][2] and [`archive-tar-minitar`][3].



    [1]: https://rubygems.org/gems/rubyzip
    [2]: https://snyk.io/vuln/SNYK-RUBY-MINITAR-20335
    [3]: https://snyk.io/vuln/SNYK-RUBY-ARCHIVETARMINITAR-20337
    \n[`rubyzip`][1] is rubyzip is a ruby module for reading and writing zip
    files.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +++2018-04-15 22:04:29 .....           19           19  good.txt
        +++2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys

    Related to [`minitar`][2] and [`archive-tar-minitar`][3].



    [1]: https://rubygems.org/gems/rubyzip
    [2]: https://snyk.io/vuln/SNYK-RUBY-MINITAR-20335
    [3]: https://snyk.io/vuln/SNYK-RUBY-ARCHIVETARMINITAR-20337
    \n[`rubyzip`][1] is rubyzip is a ruby module for reading and writing zip
    files.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +++2018-04-15 22:04:29 .....           19           19  good.txt
        +++2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys

    Related to [`minitar`][2] and [`archive-tar-minitar`][3].



    [1]: https://rubygems.org/gems/rubyzip
    [2]: https://snyk.io/vuln/SNYK-RUBY-MINITAR-20335
    [3]: https://snyk.io/vuln/SNYK-RUBY-ARCHIVETARMINITAR-20337
    \n[`rubyzip`][1] is rubyzip is a ruby module for reading and writing zip
    files.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +++2018-04-15 22:04:29 .....           19           19  good.txt
        +++2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys

    Related to [`minitar`][2] and [`archive-tar-minitar`][3].



    [1]: https://rubygems.org/gems/rubyzip
    [2]: https://snyk.io/vuln/SNYK-RUBY-MINITAR-20335
    [3]: https://snyk.io/vuln/SNYK-RUBY-ARCHIVETARMINITAR-20337
    \n[`rubyzip`][1] is rubyzip is a ruby module for reading and writing zip
    files.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +++2018-04-15 22:04:29 .....           19           19  good.txt
        +++2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys

    Related to [`minitar`][2] and [`archive-tar-minitar`][3].



    [1]: https://rubygems.org/gems/rubyzip
    [2]: https://snyk.io/vuln/SNYK-RUBY-MINITAR-20335
    [3]: https://snyk.io/vuln/SNYK-RUBY-ARCHIVETARMINITAR-20337
    \n[`rubyzip`][1] is rubyzip is a ruby module for reading and writing zip
    files.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +++2018-04-15 22:04:29 .....           19           19  good.txt
        +++2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys

    Related to [`minitar`][2] and [`archive-tar-minitar`][3].



    [1]: https://rubygems.org/gems/rubyzip
    [2]: https://snyk.io/vuln/SNYK-RUBY-MINITAR-20335
    [3]: https://snyk.io/vuln/SNYK-RUBY-ARCHIVETARMINITAR-20337
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: rubyzip
  vulnerable_versions:
  - "<1.2.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2017-5946
  cwe:
  - CWE-29
  credit:
  - ecneladis
  references:
  - https://github.com/rubyzip/rubyzip/issues/315
  - https://github.com/rubyzip/rubyzip/commit/ce4208fdecc2ad079b05d3c49d70fe6ed1d07016
  - https://snyk.io/research/zip-slip-vulnerability
  - https://github.com/snyk/zip-slip-vulnerability
  source_url: https://snyk.io/vuln/SNYK-RUBY-RUBYZIP-20336
- id: snykio:rubygems:rubyzip:2018-06-13
  title: Arbitrary File Write via Archive Extraction (Zip Slip)
  description: |
    [rubyzip][1] is a ruby module for reading and writing zip files.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        ++2018-04-15 22:04:29 .....           19           19  good.txt
        ++2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys

    **NOTE** This vulnerability is due to a partial fix in
    [CVE-2017-5946][2]



    [1]: https://rubygems.org/gems/rubyzip
    [2]: https://app.snyk.io/vuln/SNYK-RUBY-RUBYZIP-20336
    \n[rubyzip][1] is a ruby module for reading and writing zip files.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        ++2018-04-15 22:04:29 .....           19           19  good.txt
        ++2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys

    **NOTE** This vulnerability is due to a partial fix in
    [CVE-2017-5946][2]



    [1]: https://rubygems.org/gems/rubyzip
    [2]: https://app.snyk.io/vuln/SNYK-RUBY-RUBYZIP-20336
    \n[rubyzip][1] is a ruby module for reading and writing zip files.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        ++2018-04-15 22:04:29 .....           19           19  good.txt
        ++2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys

    **NOTE** This vulnerability is due to a partial fix in
    [CVE-2017-5946][2]



    [1]: https://rubygems.org/gems/rubyzip
    [2]: https://app.snyk.io/vuln/SNYK-RUBY-RUBYZIP-20336
    \n[rubyzip][1] is a ruby module for reading and writing zip files.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        ++2018-04-15 22:04:29 .....           19           19  good.txt
        ++2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys

    **NOTE** This vulnerability is due to a partial fix in
    [CVE-2017-5946][2]



    [1]: https://rubygems.org/gems/rubyzip
    [2]: https://app.snyk.io/vuln/SNYK-RUBY-RUBYZIP-20336
    \n[rubyzip][1] is a ruby module for reading and writing zip files.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        ++2018-04-15 22:04:29 .....           19           19  good.txt
        ++2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys

    **NOTE** This vulnerability is due to a partial fix in
    [CVE-2017-5946][2]



    [1]: https://rubygems.org/gems/rubyzip
    [2]: https://app.snyk.io/vuln/SNYK-RUBY-RUBYZIP-20336
    \n[rubyzip][1] is a ruby module for reading and writing zip files.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        ++2018-04-15 22:04:29 .....           19           19  good.txt
        ++2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys

    **NOTE** This vulnerability is due to a partial fix in
    [CVE-2017-5946][2]



    [1]: https://rubygems.org/gems/rubyzip
    [2]: https://app.snyk.io/vuln/SNYK-RUBY-RUBYZIP-20336
    \n[rubyzip][1] is a ruby module for reading and writing zip files.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        ++2018-04-15 22:04:29 .....           19           19  good.txt
        ++2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys

    **NOTE** This vulnerability is due to a partial fix in
    [CVE-2017-5946][2]



    [1]: https://rubygems.org/gems/rubyzip
    [2]: https://app.snyk.io/vuln/SNYK-RUBY-RUBYZIP-20336
  affected_package: rubyzip
  vulnerable_versions:
  - "<1.2.2"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2018-1000544
  cwe:
  - CWE-22
  credit:
  - Unknown
  references:
  - https://github.com/rubyzip/rubyzip/commit/d07b13a6cf0a413e010c48879aebd9576bfb5f68
  - https://github.com/rubyzip/rubyzip/issues/369
  source_url: https://snyk.io/vuln/SNYK-RUBY-RUBYZIP-22039
