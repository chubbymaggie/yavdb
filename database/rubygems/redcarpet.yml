---
- id: rubyadvisory:rubygems:redcarpet:2015-06-22
  title: redcarpet Gem for Ruby html.c header_anchor() Function Stack Overflow
  description: |
    redcarpet Gem for Ruby contains a flaw that allows a stack overflow.
    This flaw exists because the header_anchor() function in html.c uses
    variable length arrays (VLA) without any range checking. This may
    allow a remote attacker to execute arbitrary code.
  affected_package: redcarpet
  unaffected_versions:
  - "< 3.3.0"
  patched_versions:
  - ">= 3.3.2"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2015-5147
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://seclists.org/oss-sec/2015/q2/818
- id: rubyadvisory:rubygems:redcarpet:2015-04-07
  title: redcarpet Gem for Ruby markdown.c parse_inline() Function XSS
  description: |
    redcarpet Gem for Ruby contains a flaw that allows a cross-site scripting
    (XSS) attack. This flaw exists because the parse_inline() function in
    markdown.c does not validate input before returning it to users. This may
    allow a remote attacker to create a specially crafted request that would
    execute arbitrary script code in a user's browser session within the trust
    relationship between their browser and the server.
  affected_package: redcarpet
  patched_versions:
  - ">= 3.2.3"
  package_manager: rubygems
  cve:
  - CVE-
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://danlec.com/blog/bug-in-sundown-and-redcarpet
- id: snykio:rubygems:redcarpet:2015-06-21
  title: Arbitrary Code Execution
  description: |+
    [`redcarpet`][1] is a fast, safe and extensible Markdown to (X)HTML
    parser.

    Vulnerable versions of `redcarpet` Ruby contain a flaw that allows
    Arbitrary code execution via stack overflow.



    [1]: https://rubygems.org/gems/redcarpet
    \n[`redcarpet`][1] is a fast, safe and extensible Markdown to (X)HTML
    parser.

    Vulnerable versions of `redcarpet` Ruby contain a flaw that allows
    Arbitrary code execution via stack overflow.



    [1]: https://rubygems.org/gems/redcarpet
    \n[`redcarpet`][1] is a fast, safe and extensible Markdown to (X)HTML
    parser.

    Vulnerable versions of `redcarpet` Ruby contain a flaw that allows
    Arbitrary code execution via stack overflow.



    [1]: https://rubygems.org/gems/redcarpet
    \nThis flaw exists because the `header_anchor()` function in html.c uses
    variable length arrays (VLA) without any range checking. This may allow
    a remote attacker to execute arbitrary code.

    \nThis flaw exists because the `header_anchor()` function in html.c uses
    variable length arrays (VLA) without any range checking. This may allow
    a remote attacker to execute arbitrary code.

  affected_package: redcarpet
  vulnerable_versions:
  - "< 3.3.2 &&  >= 3.3.0"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2015-5147
  cwe:
  - CWE-94
  credit:
  - Giancarlo Canales Barreto
  references:
  - http://rubysec.com/advisories/CVE-2015-5147
  - http://seclists.org/oss-sec/2015/q2/818
  - http://www.openwall.com/lists/oss-security/2015/06/29/3
  source_url: https://snyk.io/vuln/SNYK-RUBY-REDCARPET-20231
- id: snykio:rubygems:redcarpet:2015-04-06
  title: Cross-site Scripting (XSS)
  description: |+
    [`redcarpet`][1] is a Markdown to (X)HTML parser.

    Affected versions of this package are vulnerable to Cross-site Scripting
    via the `parse_inline()` function in markdown.c does not validate input
    before returning it to users. This may allow a remote attacker to create
    a specially crafted request that would execute arbitrary script code in
    a user\'s browser session within the trust relationship between their
    browser and the server.



    [1]: https://rubygems.org/gems/redcarpet
    \n[`redcarpet`][1] is a Markdown to (X)HTML parser.

    Affected versions of this package are vulnerable to Cross-site Scripting
    via the `parse_inline()` function in markdown.c does not validate input
    before returning it to users. This may allow a remote attacker to create
    a specially crafted request that would execute arbitrary script code in
    a user\'s browser session within the trust relationship between their
    browser and the server.



    [1]: https://rubygems.org/gems/redcarpet
    \n[`redcarpet`][1] is a Markdown to (X)HTML parser.

    Affected versions of this package are vulnerable to Cross-site Scripting
    via the `parse_inline()` function in markdown.c does not validate input
    before returning it to users. This may allow a remote attacker to create
    a specially crafted request that would execute arbitrary script code in
    a user\'s browser session within the trust relationship between their
    browser and the server.



    [1]: https://rubygems.org/gems/redcarpet
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: redcarpet
  vulnerable_versions:
  - "< 3.2.3"
  severity: high
  package_manager: rubygems
  cwe:
  - CWE-79
  credit:
  - Daniel LeCheminant
  references:
  - https://rubysec.com/advisories/redcarpet-OSVDB-120415
  - http://danlec.com/blog/bug-in-sundown-and-redcarpet
  source_url: https://snyk.io/vuln/SNYK-RUBY-REDCARPET-20212
