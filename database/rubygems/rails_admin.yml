---
- id: rubyadvisory:rubygems:rails_admin:CVE-2016-10522
  title: CSRF vulnerability in rails_admin
  description: |
    The rails_admin gem is vulnerable to cross-site request forgery (CSRF) attacks.
    Due to a bug, non-GET methods were not validating CSRF tokens and, as a result,
    an attacker could hypothetically gain access to the application administrative
    endpoints exposed by the gem.
  affected_package: rails_admin
  unaffected_versions:
  - "< 1.0.0"
  patched_versions:
  - ">= 1.1.1"
  severity: medium
  package_manager: rubygems
  cve: CVE-2016-10522
  cvss_v2_score: 5.5
  disclosed_date: 2016-12-21
  created_date: 2016-12-21
  last_modified_date: 2016-12-21
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  - https://github.com/sferik/rails_admin/commit/b13e879eb93b661204e9fb5e55f7afa4f397537a
  - https://www.sourceclear.com/registry/security/cross-site-request-forgery-csrf-/ruby/sid-3173
  source_url: https://www.sourceclear.com/blog/Rails_admin-Vulnerability-Disclosure/
- id: snykio:rubygems:rails_admin:CVE-2016-10522
  title: Cross-site Request Forgery (CSRF)
  description: |
    [rails\_admin][1] is a Rails engine that provides an easy-to-use
    interface for managing your data.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF). An attacker could gain access to the application
    administrative endpoints exposed by the gem.



    [1]: https://rubygems.org/gems/rails_admin
  affected_package: rails_admin
  vulnerable_versions:
  - "< 1.1.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2016-10522
  cwe:
  - CWE-352
  disclosed_date: 2016-12-25
  created_date: 2018-07-19
  last_modified_date: 2018-07-19
  credit:
  - Unknown
  references:
  - https://github.com/sferik/rails_admin/blob/ae2962ca9e2e229589e5f6a80a03bca72cf18312/CHANGELOG.md#security
  - https://github.com/sferik/rails_admin/commit/b13e879eb93b661204e9fb5e55f7afa4f397537a
  source_url: https://snyk.io/vuln/SNYK-RUBY-RAILSADMIN-22043
- id: snykio:rubygems:rails_admin:CVE-2017-12098
  title: Cross-site Scripting (XSS)
  description: |+
    [`rails_admin`][1] is a Rails engine that provides an easy-to-use
    interface for managing your data.

    Affected versions of this project are vulnerable to Cross-site Scripting
    (XSS) attacks via the add filter functionality. This functionality
    allows a user to create custom filters to find values within the admin
    interface. When a new filter is created using the UI, it redirects to a
    new url containing that filtering information:

        localhost:3000/admin/model?model_name=model&utf8=%E2%9C%93&f%5B password%5D%5B91178%5D%5Bv%5D=+%22%3E%3Cimg+src%3D%22%22+onerror%3D%22 alert(1)%22%3E&query=

    An attacker can then phish an authenticated user to trigger this
    vulnerability.



    [1]: https://rubygems.org/gems/rails_admin
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: rails_admin
  vulnerable_versions:
  - "<1.3.0"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2017-12098
  cwe:
  - CWE-79
  disclosed_date: 2018-01-10
  created_date: 2018-01-23
  last_modified_date: 2018-01-23
  credit:
  - Zachary Sanchez
  references:
  - http://www.securityfocus.com/bid/102486
  - https://github.com/sferik/rails_admin/commit/44f09ed72b5e0e917a5d61bd89c48d97c494b41c
  - https://www.talosintelligence.com/vulnerability_reports/TALOS-2017-0450
  source_url: https://snyk.io/vuln/SNYK-RUBY-RAILSADMIN-22006
