---
- id: rubyadvisory:rubygems:yard:CVE-2017-17042
  title: Potential arbitrary file read vulnerability in yard server
  description: |
    lib/yard/core_ext/file.rb in the server in YARD before 0.9.11 does not block
    relative paths with an initial ../ sequence, which allows attackers to conduct
    directory traversal attacks and read arbitrary files.
  affected_package: yard
  patched_versions:
  - ">= 0.9.11"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2017-17042
  cvss_v2_score: 5.0
  cvss_v3_score: 7.5
  disclosed_date: 2017-11-28
  created_date: 2017-11-28
  last_modified_date: 2017-11-28
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://nvd.nist.gov/vuln/detail/CVE-2017-17042
- id: snykio:rubygems:yard:20430
  title: Cross-site Scripting (XSS)
  description: |
    [`yard`][1] is a documentation generation tool for the Ruby programming
    language.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS). Strings parsed from the anchor in the address bar were not
    sanitized, allowing for arbitrary HTML to be embedded into the page.



    [1]: https://rubygems.org/gems/yard
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/xss-attacks-the-next-wave/
  affected_package: yard
  vulnerable_versions:
  - "<0.8.7.1  >=0.8.0"
  severity: low
  package_manager: rubygems
  cwe:
  - CWE-79
  disclosed_date: 2013-09-11
  created_date: 2017-09-14
  last_modified_date: 2017-09-14
  credit:
  - Loren Segal
  references:
  - https://github.com/lsegal/yard/commit/715d6cb462392e610ab751fcfee7b622850fa802
  source_url: https://snyk.io/vuln/SNYK-RUBY-YARD-20430
- id: snykio:rubygems:yard:22004
  title: Directory Traversal
  description: |
    [`yard`][1] is a documentation generation tool for the Ruby programming
    language.

    Affected versions of this package are vulnerable to Directory Traversal
    via the `lib/yard/core_ext/file.rb` method in the server. It does not
    block relative paths with an initial `../` sequence, which allows
    attackers to conduct directory traversal attacks and read arbitrary
    files.



    [1]: https://rubygems.org/gems/yard
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: yard
  vulnerable_versions:
  - "< 0.9.11"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2017-17042
  cwe:
  - CWE-22
  disclosed_date: 2017-11-23
  created_date: 2017-12-25
  last_modified_date: 2017-12-25
  credit:
  - Unknown
  references:
  - https://github.com/lsegal/yard/commit/b0217b3e30dc53d057b1682506333335975e62b4
  - https://nvd.nist.gov/vuln/detail/CVE-2017-17042
  source_url: https://snyk.io/vuln/SNYK-RUBY-YARD-22004
