---
- id: rubyadvisory:rubygems:nokogiri:2018-01-29
  title: Nokogiri gem, via libxml, is affected by DoS vulnerabilities
  description: |
    The version of libxml2 packaged with Nokogiri contains a
    vulnerability. Nokogiri has mitigated these issue by upgrading to
    libxml 2.9.6.

    It was discovered that libxml2 incorrecty handled certain files. An attacker
    could use this issue with specially constructed XML data to cause libxml2 to
    consume resources, leading to a denial of service.
  affected_package: nokogiri
  patched_versions:
  - ">= 1.8.2"
  package_manager: rubygems
  cve:
  - CVE-2017-15412
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  - https://usn.ubuntu.com/usn/usn-3513-1/
  - https://people.canonical.com/~ubuntu-security/cve/2017/CVE-2017-15412.html
  source_url: https://github.com/sparklemotion/nokogiri/issues/1714
- id: rubyadvisory:rubygems:nokogiri:2015-12-15
  title: Nokogiri gem contains several vulnerabilities in libxml2
  description: |
    Nokogiri version 1.6.7.1 has been released, pulling in several upstream
    patches to the vendored libxml2 to address the following CVEs:

    CVE-2015-5312
    CVSS v2 Base Score: 7.1 (HIGH)
    The xmlStringLenDecodeEntities function in parser.c in libxml2
    before 2.9.3 does not properly prevent entity expansion, which
    allows context-dependent attackers to cause a denial of
    service (CPU consumption) via crafted XML data, a different
    vulnerability than CVE-2014-3660.

    CVE-2015-7497
    CVSS v2 Base Score: 5.0 (MEDIUM)
    Heap-based buffer overflow in the xmlDictComputeFastQKey
    function in dict.c in libxml2 before 2.9.3 allows
    context-dependent attackers to cause a denial of service via
    unspecified vectors.

    CVE-2015-7498
    CVSS v2 Base Score: 5.0 (MEDIUM)
    Heap-based buffer overflow in the xmlParseXmlDecl function in
    parser.c in libxml2 before 2.9.3 allows context-dependent
    attackers to cause a denial of service via unspecified vectors
    related to extracting errors after an encoding conversion
    failure.

    CVE-2015-7499
    CVSS v2 Base Score: 5.0 (MEDIUM)
    Heap-based buffer overflow in the xmlGROW function in parser.c
    in libxml2 before 2.9.3 allows context-dependent attackers to
    obtain sensitive process memory information via unspecified
    vectors.

    CVE-2015-7500
    CVSS v2 Base Score: 5.0 (MEDIUM)
    The xmlParseMisc function in parser.c in libxml2 before 2.9.3
    allows context-dependent attackers to cause a denial of
    service (out-of-bounds heap read) via unspecified vectors
    related to incorrect entities boundaries and start tags.

    CVE-2015-8241
    CVSS v2 Base Score: 6.4 (MEDIUM)
    The xmlNextChar function in libxml2 2.9.2 does not properly
    check the state, which allows context-dependent attackers to
    cause a denial of service (heap-based buffer over-read and
    application crash) or obtain sensitive information via crafted
    XML data.

    CVE-2015-8242
    CVSS v2 Base Score: 5.8 (MEDIUM)
    The xmlSAX2TextNode function in SAX2.c in the push interface in
    the HTML parser in libxml2 before 2.9.3 allows
    context-dependent attackers to cause a denial of
    service (stack-based buffer over-read and application crash) or
    obtain sensitive information via crafted XML data.

    CVE-2015-8317
    CVSS v2 Base Score: 5.0 (MEDIUM)
    The xmlParseXMLDecl function in parser.c in libxml2 before
    2.9.3 allows context-dependent attackers to obtain sensitive
    information via an (1) unterminated encoding value or (2)
    incomplete XML declaration in XML data, which triggers an
    out-of-bounds heap read.
  affected_package: nokogiri
  unaffected_versions:
  - "< 1.6.0"
  patched_versions:
  - ">= 1.6.7.1"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2015-5312
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  - https://github.com/sparklemotion/nokogiri/pull/1378
  - https://github.com/sparklemotion/nokogiri/commit/4205af1a2a546f79d1b48df2ad8b27299c0099c5
  source_url: https://groups.google.com/forum/#!topic/ruby-security-ann/aSbgDiwb24s
- id: rubyadvisory:rubygems:nokogiri:2016-01-19
  title: 'Nokogiri gem contains a heap-based buffer overflow vulnerability in libxml2

'
  description: |
    Nokogiri version 1.6.7.2 has been released, pulling in several upstream
    patches to the vendored libxml2 to address the following CVE:

    CVE-2015-7499
    CVSS v2 Base Score: 5.0 (MEDIUM)

    Heap-based buffer overflow in the xmlGROW function in parser.c
    in libxml2 before 2.9.3 allows context-dependent attackers to
    obtain sensitive process memory information via unspecified
    vectors.

    libxml2 could be made to crash if it opened a specially crafted
    file. It was discovered that libxml2 incorrectly handled certain
    malformed documents. If a user or automated system were tricked
    into opening a specially crafted document, an attacker could
    possibly cause libxml2 to crash, resulting in a denial of service.
  affected_package: nokogiri
  unaffected_versions:
  - "< 1.6.0"
  patched_versions:
  - ">= 1.6.7.2"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2015-7499
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  - https://github.com/sparklemotion/nokogiri/commit/9eb540e7c905924a42757bf0a34c2c00707d536c
  source_url: https://groups.google.com/forum/#!topic/ruby-security-ann/Dy7YiKb_pMM
- id: rubyadvisory:rubygems:nokogiri:2013-12-14
  title: 'Nokogiri Gem for JRuby Crafted XML Document Handling Infinite Loop Remote
    DoS

'
  description: |
    Nokogiri Gem for JRuby contains a flaw that may allow a remote denial of
    service. The issue is triggered when handling a specially crafted XML
    document, which can result in an infinite loop. This may allow a
    context-dependent attacker to crash the server.
  affected_package: nokogiri
  patched_versions:
  - "~> 1.5.11"
  - ">= 1.6.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-6460
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://osvdb.org/show/osvdb/101179
- id: rubyadvisory:rubygems:nokogiri:2013-12-14
  title: Nokogiri Gem for Ruby External Entity (XXE) Expansion Remote DoS
  description: Nokogiri gem for Ruby contains an flaw that is triggered during the
    parsing of XML data. The issue is due to an incorrectly configured XML parser
    accepting XML external entities from an untrusted source. By sending specially
    crafted XML data, a remote attacker can cause an infinite loop and crash the program.
  affected_package: nokogiri
  patched_versions:
  - "~> 1.5.11"
  - ">= 1.6.1"
  package_manager: rubygems
  cve:
  - CVE-2013-6461
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://www.osvdb.org/show/osvdb/101458
- id: rubyadvisory:rubygems:nokogiri:2014-04-30
  title: |
    Nokogiri Gem for JRuby XML Document Root Element Handling Memory Consumption
    Remote DoS
  description: |
    Nokogiri Gem for JRuby contains a flaw that is triggered when handling a root
    element in an XML document. This may allow a remote attacker to cause a
    consumption of memory resources.
  affected_package: nokogiri
  patched_versions:
  - ">= 1.6.3"
  package_manager: rubygems
  cve:
  - CVE-
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://github.com/sparklemotion/nokogiri/pull/1087
- id: rubyadvisory:rubygems:nokogiri:2012-06-08
  title: Nokogiri Gem for Ruby External Entity (XXE) Expansion Internal Network Response
    Remote Disclosure
  description: libxml2 contains a flaw that may lead to unauthorized disclosure of
    potentially sensitive information. The issue is triggered when handling the expansion
    of XML external entities (XXE), which can be used to trigger URL's on an internal
    network and allow a remote attacker to gain access to their responses.
  affected_package: nokogiri
  patched_versions:
  - ">= 1.5.4"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-6685
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://www.osvdb.org/show/osvdb/90946
- id: rubyadvisory:rubygems:nokogiri:2018-10-04
  title: Nokogiri gem, via libxml2, is affected by multiple vulnerabilities
  description: |
    Nokogiri 1.8.5 has been released.

    This is a security and bugfix release. It addresses two CVEs in upstream
    libxml2 rated as "medium" by Red Hat, for which details are below.

    If you're using your distro's system libraries, rather than Nokogiri's
    vendored libraries, there's no security need to upgrade at this time,
    though you may want to check with your distro whether they've patched this
    (Canonical has patched Ubuntu packages). Note that these patches are not
    yet (as of 2018-10-04) in an upstream release of libxml2.

    Full details about the security update are available in Github Issue #1785.
    [#1785]: https://github.com/sparklemotion/nokogiri/issues/1785

    -----

    [MRI] Pulled in upstream patches from libxml2 that address CVE-2018-14404
    and CVE-2018-14567. Full details are available in #1785. Note that these
    patches are not yet (as of 2018-10-04) in an upstream release of libxml2.

    -----

    CVE-2018-14404

    Permalink:

    https://people.canonical.com/~ubuntu-security/cve/2018/CVE-2018-14404.html

    Description:

    A NULL pointer dereference vulnerability exists in the
    xpath.c:xmlXPathCompOpEval() function of libxml2 through 2.9.8 when
    parsing an invalid XPath expression in the XPATH_OP_AND or XPATH_OP_OR
    case. Applications processing untrusted XSL format inputs with the use of
    the libxml2 library may be vulnerable to a denial of service attack due
    to a crash of the application

    Canonical rates this vulnerability as "Priority: Medium"

    -----

    CVE-2018-14567

    Permalink:

    https://people.canonical.com/~ubuntu-security/cve/2018/CVE-2018-14567.html

    Description:

    infinite loop in LZMA decompression

    Canonical rates this vulnerability as "Priority: Medium"
  affected_package: nokogiri
  patched_versions:
  - ">= 1.8.5"
  package_manager: rubygems
  cve:
  - CVE-2018-14404
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  - https://groups.google.com/forum/#!msg/ruby-security-ann/uVrmO2HjqQw/Fw3ocLI0BQAJ
  - https://gitlab.gnome.org/GNOME/libxml2/commit/a436374994c47b12d5de1b8b1d191a098fa23594
  - https://gitlab.gnome.org/GNOME/libxml2/commit/2240fbf5912054af025fb6e01e26375100275e74
  source_url: https://github.com/sparklemotion/nokogiri/issues/1785
- id: rubyadvisory:rubygems:nokogiri:2017-09-19
  title: Nokogiri gem, via libxml, is affected by DoS and RCE vulnerabilities
  description: |
    The version of libxml2 packaged with Nokogiri contains several
    vulnerabilities. Nokogiri has mitigated these issues by upgrading to
    libxml 2.9.5.

    It was discovered that a type confusion error existed in libxml2. An
    attacker could use this to specially construct XML data that
    could cause a denial of service or possibly execute arbitrary
    code. (CVE-2017-0663)

    It was discovered that libxml2 did not properly validate parsed entity
    references. An attacker could use this to specially construct XML
    data that could expose sensitive information. (CVE-2017-7375)

    It was discovered that a buffer overflow existed in libxml2 when
    handling HTTP redirects. An attacker could use this to specially
    construct XML data that could cause a denial of service or possibly
    execute arbitrary code. (CVE-2017-7376)

    Marcel Böhme and Van-Thuan Pham discovered a buffer overflow in
    libxml2 when handling elements. An attacker could use this to specially
    construct XML data that could cause a denial of service or possibly
    execute arbitrary code. (CVE-2017-9047)

    Marcel Böhme and Van-Thuan Pham discovered a buffer overread
    in libxml2 when handling elements. An attacker could use this
    to specially construct XML data that could cause a denial of
    service. (CVE-2017-9048)

    Marcel Böhme and Van-Thuan Pham discovered multiple buffer overreads
    in libxml2 when handling parameter-entity references. An attacker
    could use these to specially construct XML data that could cause a
    denial of service. (CVE-2017-9049, CVE-2017-9050)
  affected_package: nokogiri
  patched_versions:
  - ">= 1.8.1"
  package_manager: rubygems
  cve:
  - CVE-2017-9050
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  - https://usn.ubuntu.com/usn/usn-3424-1/
  - https://people.canonical.com/~ubuntu-security/cve/2017/CVE-2017-0663.html
  - https://people.canonical.com/~ubuntu-security/cve/2017/CVE-2017-7375.html
  - https://people.canonical.com/~ubuntu-security/cve/2017/CVE-2017-7376.html
  - https://people.canonical.com/~ubuntu-security/cve/2017/CVE-2017-9047.html
  - https://people.canonical.com/~ubuntu-security/cve/2017/CVE-2017-9048.html
  - https://people.canonical.com/~ubuntu-security/cve/2017/CVE-2017-9049.html
  - https://people.canonical.com/~ubuntu-security/cve/2017/CVE-2017-9050.html
  source_url: https://github.com/sparklemotion/nokogiri/issues/1673
- id: rubyadvisory:rubygems:nokogiri:2018-03-29
  title: Revert libxml2 behavior in Nokogiri gem that could cause XSS
  description: |
    [MRI] Behavior in libxml2 has been reverted which caused
    CVE-2018-8048 (loofah gem), CVE-2018-3740 (sanitize gem), and
    CVE-2018-3741 (rails-html-sanitizer gem). The commit in question is
    here:

    https://github.com/GNOME/libxml2/commit/960f0e2

    and more information is available about this commit and its impact
    here:

    https://github.com/flavorjones/loofah/issues/144

    This release simply reverts the libxml2 commit in question to protect
    users of Nokogiri's vendored libraries from similar vulnerabilities.

    If you're offended by what happened here, I'd kindly ask that you
    comment on the upstream bug report here:

    https://bugzilla.gnome.org/show_bug.cgi?id=769760
  affected_package: nokogiri
  patched_versions:
  - ">= 1.8.3"
  package_manager: rubygems
  cve:
  - CVE-2018-8048
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  - https://github.com/GNOME/libxml2/commit/960f0e2
  - https://bugzilla.gnome.org/show_bug.cgi?id=769760
  source_url: https://github.com/sparklemotion/nokogiri/pull/1746
- id: rubyadvisory:rubygems:nokogiri:2017-03-11
  title: Nokogiri gem contains several vulnerabilities in libxml2 and libxslt
  description: |
    Nokogiri version 1.7.1 has been released, pulling in several upstream
    patches to the vendored libxml2 to address the following CVEs:

    CVE-2016-4658
    CVSS v3 Base Score: 9.8 (Critical)
    libxml2 in Apple iOS before 10, OS X before 10.12, tvOS before 10, and
    watchOS before 3 allows remote attackers to execute arbitrary code or cause
    a denial of service (memory corruption) via a crafted XML document.

    CVE-2016-5131
    CVSS v3 Base Score: 8.8 (HIGH)
    Use-after-free vulnerability in libxml2 through 2.9.4, as used in Google
    Chrome before 52.0.2743.82, allows remote attackers to cause a denial of
    service or possibly have unspecified other impact via vectors related to
    the XPointer range-to function.
  affected_package: nokogiri
  patched_versions:
  - ">= 1.7.1"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2016-4658
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  - https://github.com/sparklemotion/nokogiri/issues/1615
  source_url: https://github.com/sparklemotion/nokogiri/issues/1615
- id: rubyadvisory:rubygems:nokogiri:2017-05-09
  title: Nokogiri gem contains two upstream vulnerabilities in libxslt 1.1.29
  description: "nokogiri version 1.7.2 has been released.\n\nThis is a security update
    based on 1.7.1, addressing two upstream\nlibxslt 1.1.29 vulnerabilities classified
    as \"Medium\" by Canonical \nand given a CVSS3 score of \"6.5 Medium\" and \"8.8
    High\" by RedHat.\n\nThese patches only apply when using Nokogiri's vendored libxslt\npackage.
    If you're using your distro's system libraries, there's no\nneed to upgrade from
    1.7.0.1 or 1.7.1 at this time.\n\nFull details are available at the github issue
    linked to in the\nchangelog below.\n\n-----\n\n# 1.7.2 / 2017-05-09\n\n## Security
    Notes\n\n[MRI] Upstream libxslt patches are applied to the vendored libxslt\n1.1.29
    which address CVE-2017-5029 and CVE-2016-4738.\n\nFor more information:\n\n* https://github.com/sparklemotion/nokogiri/issues/1634\n*
    http://people.canonical.com/~ubuntu-security/cve/2017/CVE-2017-5029.html\n* http://people.canonical.com/~ubuntu-security/cve/2016/CVE-2016-4738.html\n"
  affected_package: nokogiri
  patched_versions:
  - ">= 1.7.2"
  package_manager: rubygems
  cve:
  - CVE-2017-5029
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  - http://people.canonical.com/~ubuntu-security/cve/2017/CVE-2017-5029.html
  - http://people.canonical.com/~ubuntu-security/cve/2016/CVE-2016-4738.html
  source_url: https://github.com/sparklemotion/nokogiri/issues/1634
- id: rubyadvisory:rubygems:nokogiri:2016-06-07
  title: Denial of service or RCE from libxml2 and libxslt
  description: "Nokogiri is affected by series of vulnerabilities in libxml2 and libxslt,\nwhich
    are libraries Nokogiri depends on. It was discovered that libxml2 and\nlibxslt
    incorrectly handled certain malformed documents, which can allow\nmalicious users
    to cause issues ranging from denial of service to remote code\nexecution attacks.\n\nFor
    more information, the Ubuntu Security Notice is a good start: \nhttp://www.ubuntu.com/usn/usn-2994-1/\n"
  affected_package: nokogiri
  unaffected_versions:
  - "< 1.6.0"
  patched_versions:
  - ">= 1.6.8"
  package_manager: rubygems
  cve:
  - CVE-2015-8806
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  - https://github.com/sparklemotion/nokogiri/issues/1473
  - https://github.com/sparklemotion/nokogiri/commit/03d402212707bd5dfa0a21b7de5e91a7f9d90028
  - https://mail.gnome.org/archives/xml/2016-May/msg00023.html
  - http://www.ubuntu.com/usn/usn-2994-1/
  source_url: https://github.com/sparklemotion/nokogiri/issues/1473
- id: rubyadvisory:rubygems:nokogiri:2018-01-29
  title: Nokogiri gem, via libxml, is affected by DoS vulnerabilities
  description: |
    The version of libxml2 packaged with Nokogiri contains a
    vulnerability. Nokogiri has mitigated these issue by upgrading to
    libxml 2.9.5.

    Wei Lei discovered that libxml2 incorrecty handled certain parameter
    entities. An attacker could use this issue with specially constructed XML
    data to cause libxml2 to consume resources, leading to a denial of service.
  affected_package: nokogiri
  patched_versions:
  - ">= 1.8.1"
  package_manager: rubygems
  cve:
  - CVE-2017-16932
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  - https://usn.ubuntu.com/usn/usn-3504-1/
  - https://people.canonical.com/~ubuntu-security/cve/2017/CVE-2017-16932.html
  source_url: https://github.com/sparklemotion/nokogiri/issues/1714
- id: rubyadvisory:rubygems:nokogiri:2015-04-14
  title: Nokogiri gem contains several vulnerabilities in libxml2 and libxslt
  description: |
    Several vulnerabilities were discovered in the libxml2 and libxslt libraries
    that the Nokogiri gem depends on.

    CVE-2015-1819
    A denial of service flaw was found in the way libxml2 parsed XML
    documents. This flaw could cause an application that uses libxml2 to use an
    excessive amount of memory.

    CVE-2015-7941
    libxml2 does not properly stop parsing invalid input, which allows
    context-dependent attackers to cause a denial of service (out-of-bounds read
    and libxml2 crash) via crafted specially XML data.

    CVE-2015-7942
    The xmlParseConditionalSections function in parser.c in libxml2
    does not properly skip intermediary entities when it stops parsing invalid
    input, which allows context-dependent attackers to cause a denial of service
    (out-of-bounds read and crash) via crafted XML data.

    CVE-2015-7995
    The xsltStylePreCompute function in preproc.c in libxslt 1.1.28 does not
    check whether the parent node is an element, which allows attackers to cause
    a denial of service using a specially crafted XML document.

    CVE-2015-8035
    The xz_decomp function in xzlib.c in libxml2 2.9.1 does not
    properly detect compression errors, which allows context-dependent attackers
    to cause a denial of service (process hang) via crafted XML data.

    Another vulnerability was discoverd in libxml2 that could cause parsing
    of unclosed comments to result in "conditional jump or move depends on
    uninitialized value(s)" and unsafe memory access. This issue does not have a
    CVE assigned yet. See related URLs for details. Patched in v1.6.7.rc4.
  affected_package: nokogiri
  patched_versions:
  - "~> 1.6.6.4"
  - ">= 1.6.7.rc4"
  package_manager: rubygems
  cve:
  - CVE-2015-1819
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  - https://github.com/sparklemotion/nokogiri/pull/1376
  - https://github.com/sparklemotion/nokogiri/commit/8f3de6d88d0da11fb62a45daa61b85ce71b4af59
  source_url: https://github.com/sparklemotion/nokogiri/issues/1374
- id: snykio:rubygems:nokogiri:2018-10-05
  title: Denial of Service (DoS)
  description: |
    [nokogiri][1] is an HTML, XML, SAX, and Reader parser. Among Nokogiri\'s
    features is the ability to search documents via XPath or CSS3 selectors.

    Affected versions of this package are vulnerable to several Denial of
    Service (DoS) vulnerabilities. Nokogiri bundles the `libxml2` library,
    which is vulnerable in versions through 2.9.6.

    ### CVE-2018-14404   {#cve-2018-14404}

    A NULL pointer dereference vulnerability exists in the
    `xpath.c:xmlXPathCompOpEval()` function of libxml2 through 2.9.8 when
    parsing an invalid XPath expression in the `XPATH_OP_AND` or
    `XPATH_OP_OR` case. Applications processing untrusted XSL format inputs
    with the use of the libxml2 library may be vulnerable to a denial of
    service attack due to a crash of the application

    ### CVE-2018-14567   {#cve-2018-14567}

    If `--with-lzma` is used, allows remote attackers to cause a denial of
    service (infinite loop) via a crafted XML file that triggers
    `LZMA_MEMLIMIT_ERROR`, as demonstrated by xmllint infinite loop in LZMA
    decompression.



    [1]: https://github.com/sparklemotion/nokogiri
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser. Among Nokogiri\'s
    features is the ability to search documents via XPath or CSS3 selectors.

    Affected versions of this package are vulnerable to several Denial of
    Service (DoS) vulnerabilities. Nokogiri bundles the `libxml2` library,
    which is vulnerable in versions through 2.9.6.

    ### CVE-2018-14404   {#cve-2018-14404}

    A NULL pointer dereference vulnerability exists in the
    `xpath.c:xmlXPathCompOpEval()` function of libxml2 through 2.9.8 when
    parsing an invalid XPath expression in the `XPATH_OP_AND` or
    `XPATH_OP_OR` case. Applications processing untrusted XSL format inputs
    with the use of the libxml2 library may be vulnerable to a denial of
    service attack due to a crash of the application

    ### CVE-2018-14567   {#cve-2018-14567}

    If `--with-lzma` is used, allows remote attackers to cause a denial of
    service (infinite loop) via a crafted XML file that triggers
    `LZMA_MEMLIMIT_ERROR`, as demonstrated by xmllint infinite loop in LZMA
    decompression.



    [1]: https://github.com/sparklemotion/nokogiri
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser. Among Nokogiri\'s
    features is the ability to search documents via XPath or CSS3 selectors.

    Affected versions of this package are vulnerable to several Denial of
    Service (DoS) vulnerabilities. Nokogiri bundles the `libxml2` library,
    which is vulnerable in versions through 2.9.6.

    ### CVE-2018-14404   {#cve-2018-14404}

    A NULL pointer dereference vulnerability exists in the
    `xpath.c:xmlXPathCompOpEval()` function of libxml2 through 2.9.8 when
    parsing an invalid XPath expression in the `XPATH_OP_AND` or
    `XPATH_OP_OR` case. Applications processing untrusted XSL format inputs
    with the use of the libxml2 library may be vulnerable to a denial of
    service attack due to a crash of the application

    ### CVE-2018-14567   {#cve-2018-14567}

    If `--with-lzma` is used, allows remote attackers to cause a denial of
    service (infinite loop) via a crafted XML file that triggers
    `LZMA_MEMLIMIT_ERROR`, as demonstrated by xmllint infinite loop in LZMA
    decompression.



    [1]: https://github.com/sparklemotion/nokogiri
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser. Among Nokogiri\'s
    features is the ability to search documents via XPath or CSS3 selectors.

    Affected versions of this package are vulnerable to several Denial of
    Service (DoS) vulnerabilities. Nokogiri bundles the `libxml2` library,
    which is vulnerable in versions through 2.9.6.

    ### CVE-2018-14404   {#cve-2018-14404}

    A NULL pointer dereference vulnerability exists in the
    `xpath.c:xmlXPathCompOpEval()` function of libxml2 through 2.9.8 when
    parsing an invalid XPath expression in the `XPATH_OP_AND` or
    `XPATH_OP_OR` case. Applications processing untrusted XSL format inputs
    with the use of the libxml2 library may be vulnerable to a denial of
    service attack due to a crash of the application

    ### CVE-2018-14567   {#cve-2018-14567}

    If `--with-lzma` is used, allows remote attackers to cause a denial of
    service (infinite loop) via a crafted XML file that triggers
    `LZMA_MEMLIMIT_ERROR`, as demonstrated by xmllint infinite loop in LZMA
    decompression.



    [1]: https://github.com/sparklemotion/nokogiri
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser. Among Nokogiri\'s
    features is the ability to search documents via XPath or CSS3 selectors.

    Affected versions of this package are vulnerable to several Denial of
    Service (DoS) vulnerabilities. Nokogiri bundles the `libxml2` library,
    which is vulnerable in versions through 2.9.6.

    ### CVE-2018-14404   {#cve-2018-14404}

    A NULL pointer dereference vulnerability exists in the
    `xpath.c:xmlXPathCompOpEval()` function of libxml2 through 2.9.8 when
    parsing an invalid XPath expression in the `XPATH_OP_AND` or
    `XPATH_OP_OR` case. Applications processing untrusted XSL format inputs
    with the use of the libxml2 library may be vulnerable to a denial of
    service attack due to a crash of the application

    ### CVE-2018-14567   {#cve-2018-14567}

    If `--with-lzma` is used, allows remote attackers to cause a denial of
    service (infinite loop) via a crafted XML file that triggers
    `LZMA_MEMLIMIT_ERROR`, as demonstrated by xmllint infinite loop in LZMA
    decompression.



    [1]: https://github.com/sparklemotion/nokogiri
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser. Among Nokogiri\'s
    features is the ability to search documents via XPath or CSS3 selectors.

    Affected versions of this package are vulnerable to several Denial of
    Service (DoS) vulnerabilities. Nokogiri bundles the `libxml2` library,
    which is vulnerable in versions through 2.9.6.

    ### CVE-2018-14404   {#cve-2018-14404}

    A NULL pointer dereference vulnerability exists in the
    `xpath.c:xmlXPathCompOpEval()` function of libxml2 through 2.9.8 when
    parsing an invalid XPath expression in the `XPATH_OP_AND` or
    `XPATH_OP_OR` case. Applications processing untrusted XSL format inputs
    with the use of the libxml2 library may be vulnerable to a denial of
    service attack due to a crash of the application

    ### CVE-2018-14567   {#cve-2018-14567}

    If `--with-lzma` is used, allows remote attackers to cause a denial of
    service (infinite loop) via a crafted XML file that triggers
    `LZMA_MEMLIMIT_ERROR`, as demonstrated by xmllint infinite loop in LZMA
    decompression.



    [1]: https://github.com/sparklemotion/nokogiri
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser. Among Nokogiri\'s
    features is the ability to search documents via XPath or CSS3 selectors.

    Affected versions of this package are vulnerable to several Denial of
    Service (DoS) vulnerabilities. Nokogiri bundles the `libxml2` library,
    which is vulnerable in versions through 2.9.6.

    ### CVE-2018-14404   {#cve-2018-14404}

    A NULL pointer dereference vulnerability exists in the
    `xpath.c:xmlXPathCompOpEval()` function of libxml2 through 2.9.8 when
    parsing an invalid XPath expression in the `XPATH_OP_AND` or
    `XPATH_OP_OR` case. Applications processing untrusted XSL format inputs
    with the use of the libxml2 library may be vulnerable to a denial of
    service attack due to a crash of the application

    ### CVE-2018-14567   {#cve-2018-14567}

    If `--with-lzma` is used, allows remote attackers to cause a denial of
    service (infinite loop) via a crafted XML file that triggers
    `LZMA_MEMLIMIT_ERROR`, as demonstrated by xmllint infinite loop in LZMA
    decompression.



    [1]: https://github.com/sparklemotion/nokogiri
  affected_package: nokogiri
  vulnerable_versions:
  - "<1.8.5"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2018-14404
  cwe:
  - CWE-476
  credit:
  - Unknown
  references:
  - https://github.com/sparklemotion/nokogiri/commit/7b8cd0f5b15a926e92c869b450dd6f71cdd17b61
  - https://github.com/sparklemotion/nokogiri/pull/1786
  - https://github.com/sparklemotion/nokogiri/issues/1785
  source_url: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-72433
- id: snykio:rubygems:nokogiri:2017-12-07
  title: Denial of Service (DoS)
  description: |+
    [nokogiri][1] is an HTML, XML, SAX, and Reader parser. Among Nokogiri\'s
    features is the ability to search documents via XPath or CSS3 selectors.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) due to using vulnerable version of libxml2 which incorrectly
    handled certain fields. An attacker could use this issue with specially
    constructed XML data to cause libxml2 to consume resources, leading to a
    denial of service.



    [1]: https://github.com/sparklemotion/nokogiri
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser. Among Nokogiri\'s
    features is the ability to search documents via XPath or CSS3 selectors.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) due to using vulnerable version of libxml2 which incorrectly
    handled certain fields. An attacker could use this issue with specially
    constructed XML data to cause libxml2 to consume resources, leading to a
    denial of service.



    [1]: https://github.com/sparklemotion/nokogiri
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser. Among Nokogiri\'s
    features is the ability to search documents via XPath or CSS3 selectors.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) due to using vulnerable version of libxml2 which incorrectly
    handled certain fields. An attacker could use this issue with specially
    constructed XML data to cause libxml2 to consume resources, leading to a
    denial of service.



    [1]: https://github.com/sparklemotion/nokogiri
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: nokogiri
  vulnerable_versions:
  - "< 1.8.2"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2017-15412
  cwe:
  - CWE-400
  credit:
  - Unknown
  references:
  - https://github.com/sparklemotion/nokogiri/issues/1714
  - https://bugzilla.redhat.com/show_bug.cgi?id=1523128
  source_url: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-22014
- id: snykio:rubygems:nokogiri:2017-11-24
  title: Denial of Service (DoS)
  description: |+
    [nokogiri][1] is an HTML, XML, SAX, and Reader parser. Among Nokogiri\'s
    features is the ability to search documents via XPath or CSS3 selectors.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS), due to using vulnerable version of libxml2. When expanding a
    parameter entity in a DTD, an infinite recursion could occur and halt
    expected execution or lead to memory exhaustion.



    [1]: https://github.com/sparklemotion/nokogiri
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser. Among Nokogiri\'s
    features is the ability to search documents via XPath or CSS3 selectors.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS), due to using vulnerable version of libxml2. When expanding a
    parameter entity in a DTD, an infinite recursion could occur and halt
    expected execution or lead to memory exhaustion.



    [1]: https://github.com/sparklemotion/nokogiri
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser. Among Nokogiri\'s
    features is the ability to search documents via XPath or CSS3 selectors.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS), due to using vulnerable version of libxml2. When expanding a
    parameter entity in a DTD, an infinite recursion could occur and halt
    expected execution or lead to memory exhaustion.



    [1]: https://github.com/sparklemotion/nokogiri
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: nokogiri
  vulnerable_versions:
  - "< 1.8.1"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2017-16932
  cwe:
  - CWE-400
  credit:
  - Wei Lei
  references:
  - https://github.com/sparklemotion/nokogiri/issues/1714
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2017-16932
  source_url: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-22013
- id: snykio:rubygems:nokogiri:2017-09-18
  title: Use of vulnerable libxml2
  description: |
    [`nokogiri`][1] (鋸) is an HTML, XML, SAX, and Reader parser, with the
    ability to search documents via XPath or CSS3 selectors.

    Affected versions of the package are vulnerable to many vulnerabilities,
    including Arbitrary Code Execution and Denial of Service (DoS), and
    Sensitive Information Exposure. Nokogiri bundles the `libxml2` library,
    which is vulnerable in versions below 2.9.5.

    The CVEs assigned to the vulnerabilities are:

    ### CVE-2017-0663   {#cve-2017-0663}

    > It was discovered that a type confusion error existed in libxml2. An
    > attacker could use this to specially construct XML data that could
    > cause a denial of service or possibly execute arbitrary code.

    ### CVE-2017-7375   {#cve-2017-7375}

    > It was discovered that libxml2 did not properly validate parsed entity
    > references. An attacker could use this to specially construct XML data
    > that could expose sensitive information.

    ### CVE-2017-7376   {#cve-2017-7376}

    > It was discovered that a buffer overflow existed in libxml2 when
    > handling HTTP redirects. An attacker could use this to specially
    > construct XML data that could cause a denial of service or possibly
    > execute arbitrary code.

    ### CVE-2017-9047   {#cve-2017-9047}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overflow in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service or
    > possibly execute arbitrary code.

    ### CVE-2017-9048   {#cve-2017-9048}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overread in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service.

    ### CVE-2017-9049, CVE-2017-9050   {#cve-2017-9049-cve-2017-9050}

    > Marcel Böhme and Van-Thuan Pham discovered multiple buffer overreads
    > in libxml2 when handling parameter-entity references. An attacker
    > could use these to specially construct XML data that could cause a
    > denial of service.



    [1]: https://rubygems.org/gems/nokogiri
    \n[`nokogiri`][1] (鋸) is an HTML, XML, SAX, and Reader parser, with the
    ability to search documents via XPath or CSS3 selectors.

    Affected versions of the package are vulnerable to many vulnerabilities,
    including Arbitrary Code Execution and Denial of Service (DoS), and
    Sensitive Information Exposure. Nokogiri bundles the `libxml2` library,
    which is vulnerable in versions below 2.9.5.

    The CVEs assigned to the vulnerabilities are:

    ### CVE-2017-0663   {#cve-2017-0663}

    > It was discovered that a type confusion error existed in libxml2. An
    > attacker could use this to specially construct XML data that could
    > cause a denial of service or possibly execute arbitrary code.

    ### CVE-2017-7375   {#cve-2017-7375}

    > It was discovered that libxml2 did not properly validate parsed entity
    > references. An attacker could use this to specially construct XML data
    > that could expose sensitive information.

    ### CVE-2017-7376   {#cve-2017-7376}

    > It was discovered that a buffer overflow existed in libxml2 when
    > handling HTTP redirects. An attacker could use this to specially
    > construct XML data that could cause a denial of service or possibly
    > execute arbitrary code.

    ### CVE-2017-9047   {#cve-2017-9047}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overflow in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service or
    > possibly execute arbitrary code.

    ### CVE-2017-9048   {#cve-2017-9048}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overread in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service.

    ### CVE-2017-9049, CVE-2017-9050   {#cve-2017-9049-cve-2017-9050}

    > Marcel Böhme and Van-Thuan Pham discovered multiple buffer overreads
    > in libxml2 when handling parameter-entity references. An attacker
    > could use these to specially construct XML data that could cause a
    > denial of service.



    [1]: https://rubygems.org/gems/nokogiri
    \n[`nokogiri`][1] (鋸) is an HTML, XML, SAX, and Reader parser, with the
    ability to search documents via XPath or CSS3 selectors.

    Affected versions of the package are vulnerable to many vulnerabilities,
    including Arbitrary Code Execution and Denial of Service (DoS), and
    Sensitive Information Exposure. Nokogiri bundles the `libxml2` library,
    which is vulnerable in versions below 2.9.5.

    The CVEs assigned to the vulnerabilities are:

    ### CVE-2017-0663   {#cve-2017-0663}

    > It was discovered that a type confusion error existed in libxml2. An
    > attacker could use this to specially construct XML data that could
    > cause a denial of service or possibly execute arbitrary code.

    ### CVE-2017-7375   {#cve-2017-7375}

    > It was discovered that libxml2 did not properly validate parsed entity
    > references. An attacker could use this to specially construct XML data
    > that could expose sensitive information.

    ### CVE-2017-7376   {#cve-2017-7376}

    > It was discovered that a buffer overflow existed in libxml2 when
    > handling HTTP redirects. An attacker could use this to specially
    > construct XML data that could cause a denial of service or possibly
    > execute arbitrary code.

    ### CVE-2017-9047   {#cve-2017-9047}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overflow in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service or
    > possibly execute arbitrary code.

    ### CVE-2017-9048   {#cve-2017-9048}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overread in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service.

    ### CVE-2017-9049, CVE-2017-9050   {#cve-2017-9049-cve-2017-9050}

    > Marcel Böhme and Van-Thuan Pham discovered multiple buffer overreads
    > in libxml2 when handling parameter-entity references. An attacker
    > could use these to specially construct XML data that could cause a
    > denial of service.



    [1]: https://rubygems.org/gems/nokogiri
    \n[`nokogiri`][1] (鋸) is an HTML, XML, SAX, and Reader parser, with the
    ability to search documents via XPath or CSS3 selectors.

    Affected versions of the package are vulnerable to many vulnerabilities,
    including Arbitrary Code Execution and Denial of Service (DoS), and
    Sensitive Information Exposure. Nokogiri bundles the `libxml2` library,
    which is vulnerable in versions below 2.9.5.

    The CVEs assigned to the vulnerabilities are:

    ### CVE-2017-0663   {#cve-2017-0663}

    > It was discovered that a type confusion error existed in libxml2. An
    > attacker could use this to specially construct XML data that could
    > cause a denial of service or possibly execute arbitrary code.

    ### CVE-2017-7375   {#cve-2017-7375}

    > It was discovered that libxml2 did not properly validate parsed entity
    > references. An attacker could use this to specially construct XML data
    > that could expose sensitive information.

    ### CVE-2017-7376   {#cve-2017-7376}

    > It was discovered that a buffer overflow existed in libxml2 when
    > handling HTTP redirects. An attacker could use this to specially
    > construct XML data that could cause a denial of service or possibly
    > execute arbitrary code.

    ### CVE-2017-9047   {#cve-2017-9047}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overflow in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service or
    > possibly execute arbitrary code.

    ### CVE-2017-9048   {#cve-2017-9048}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overread in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service.

    ### CVE-2017-9049, CVE-2017-9050   {#cve-2017-9049-cve-2017-9050}

    > Marcel Böhme and Van-Thuan Pham discovered multiple buffer overreads
    > in libxml2 when handling parameter-entity references. An attacker
    > could use these to specially construct XML data that could cause a
    > denial of service.



    [1]: https://rubygems.org/gems/nokogiri
    \n[`nokogiri`][1] (鋸) is an HTML, XML, SAX, and Reader parser, with the
    ability to search documents via XPath or CSS3 selectors.

    Affected versions of the package are vulnerable to many vulnerabilities,
    including Arbitrary Code Execution and Denial of Service (DoS), and
    Sensitive Information Exposure. Nokogiri bundles the `libxml2` library,
    which is vulnerable in versions below 2.9.5.

    The CVEs assigned to the vulnerabilities are:

    ### CVE-2017-0663   {#cve-2017-0663}

    > It was discovered that a type confusion error existed in libxml2. An
    > attacker could use this to specially construct XML data that could
    > cause a denial of service or possibly execute arbitrary code.

    ### CVE-2017-7375   {#cve-2017-7375}

    > It was discovered that libxml2 did not properly validate parsed entity
    > references. An attacker could use this to specially construct XML data
    > that could expose sensitive information.

    ### CVE-2017-7376   {#cve-2017-7376}

    > It was discovered that a buffer overflow existed in libxml2 when
    > handling HTTP redirects. An attacker could use this to specially
    > construct XML data that could cause a denial of service or possibly
    > execute arbitrary code.

    ### CVE-2017-9047   {#cve-2017-9047}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overflow in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service or
    > possibly execute arbitrary code.

    ### CVE-2017-9048   {#cve-2017-9048}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overread in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service.

    ### CVE-2017-9049, CVE-2017-9050   {#cve-2017-9049-cve-2017-9050}

    > Marcel Böhme and Van-Thuan Pham discovered multiple buffer overreads
    > in libxml2 when handling parameter-entity references. An attacker
    > could use these to specially construct XML data that could cause a
    > denial of service.



    [1]: https://rubygems.org/gems/nokogiri
    \n[`nokogiri`][1] (鋸) is an HTML, XML, SAX, and Reader parser, with the
    ability to search documents via XPath or CSS3 selectors.

    Affected versions of the package are vulnerable to many vulnerabilities,
    including Arbitrary Code Execution and Denial of Service (DoS), and
    Sensitive Information Exposure. Nokogiri bundles the `libxml2` library,
    which is vulnerable in versions below 2.9.5.

    The CVEs assigned to the vulnerabilities are:

    ### CVE-2017-0663   {#cve-2017-0663}

    > It was discovered that a type confusion error existed in libxml2. An
    > attacker could use this to specially construct XML data that could
    > cause a denial of service or possibly execute arbitrary code.

    ### CVE-2017-7375   {#cve-2017-7375}

    > It was discovered that libxml2 did not properly validate parsed entity
    > references. An attacker could use this to specially construct XML data
    > that could expose sensitive information.

    ### CVE-2017-7376   {#cve-2017-7376}

    > It was discovered that a buffer overflow existed in libxml2 when
    > handling HTTP redirects. An attacker could use this to specially
    > construct XML data that could cause a denial of service or possibly
    > execute arbitrary code.

    ### CVE-2017-9047   {#cve-2017-9047}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overflow in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service or
    > possibly execute arbitrary code.

    ### CVE-2017-9048   {#cve-2017-9048}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overread in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service.

    ### CVE-2017-9049, CVE-2017-9050   {#cve-2017-9049-cve-2017-9050}

    > Marcel Böhme and Van-Thuan Pham discovered multiple buffer overreads
    > in libxml2 when handling parameter-entity references. An attacker
    > could use these to specially construct XML data that could cause a
    > denial of service.



    [1]: https://rubygems.org/gems/nokogiri
    \n[`nokogiri`][1] (鋸) is an HTML, XML, SAX, and Reader parser, with the
    ability to search documents via XPath or CSS3 selectors.

    Affected versions of the package are vulnerable to many vulnerabilities,
    including Arbitrary Code Execution and Denial of Service (DoS), and
    Sensitive Information Exposure. Nokogiri bundles the `libxml2` library,
    which is vulnerable in versions below 2.9.5.

    The CVEs assigned to the vulnerabilities are:

    ### CVE-2017-0663   {#cve-2017-0663}

    > It was discovered that a type confusion error existed in libxml2. An
    > attacker could use this to specially construct XML data that could
    > cause a denial of service or possibly execute arbitrary code.

    ### CVE-2017-7375   {#cve-2017-7375}

    > It was discovered that libxml2 did not properly validate parsed entity
    > references. An attacker could use this to specially construct XML data
    > that could expose sensitive information.

    ### CVE-2017-7376   {#cve-2017-7376}

    > It was discovered that a buffer overflow existed in libxml2 when
    > handling HTTP redirects. An attacker could use this to specially
    > construct XML data that could cause a denial of service or possibly
    > execute arbitrary code.

    ### CVE-2017-9047   {#cve-2017-9047}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overflow in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service or
    > possibly execute arbitrary code.

    ### CVE-2017-9048   {#cve-2017-9048}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overread in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service.

    ### CVE-2017-9049, CVE-2017-9050   {#cve-2017-9049-cve-2017-9050}

    > Marcel Böhme and Van-Thuan Pham discovered multiple buffer overreads
    > in libxml2 when handling parameter-entity references. An attacker
    > could use these to specially construct XML data that could cause a
    > denial of service.



    [1]: https://rubygems.org/gems/nokogiri
    \n[`nokogiri`][1] (鋸) is an HTML, XML, SAX, and Reader parser, with the
    ability to search documents via XPath or CSS3 selectors.

    Affected versions of the package are vulnerable to many vulnerabilities,
    including Arbitrary Code Execution and Denial of Service (DoS), and
    Sensitive Information Exposure. Nokogiri bundles the `libxml2` library,
    which is vulnerable in versions below 2.9.5.

    The CVEs assigned to the vulnerabilities are:

    ### CVE-2017-0663   {#cve-2017-0663}

    > It was discovered that a type confusion error existed in libxml2. An
    > attacker could use this to specially construct XML data that could
    > cause a denial of service or possibly execute arbitrary code.

    ### CVE-2017-7375   {#cve-2017-7375}

    > It was discovered that libxml2 did not properly validate parsed entity
    > references. An attacker could use this to specially construct XML data
    > that could expose sensitive information.

    ### CVE-2017-7376   {#cve-2017-7376}

    > It was discovered that a buffer overflow existed in libxml2 when
    > handling HTTP redirects. An attacker could use this to specially
    > construct XML data that could cause a denial of service or possibly
    > execute arbitrary code.

    ### CVE-2017-9047   {#cve-2017-9047}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overflow in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service or
    > possibly execute arbitrary code.

    ### CVE-2017-9048   {#cve-2017-9048}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overread in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service.

    ### CVE-2017-9049, CVE-2017-9050   {#cve-2017-9049-cve-2017-9050}

    > Marcel Böhme and Van-Thuan Pham discovered multiple buffer overreads
    > in libxml2 when handling parameter-entity references. An attacker
    > could use these to specially construct XML data that could cause a
    > denial of service.



    [1]: https://rubygems.org/gems/nokogiri
    \n[`nokogiri`][1] (鋸) is an HTML, XML, SAX, and Reader parser, with the
    ability to search documents via XPath or CSS3 selectors.

    Affected versions of the package are vulnerable to many vulnerabilities,
    including Arbitrary Code Execution and Denial of Service (DoS), and
    Sensitive Information Exposure. Nokogiri bundles the `libxml2` library,
    which is vulnerable in versions below 2.9.5.

    The CVEs assigned to the vulnerabilities are:

    ### CVE-2017-0663   {#cve-2017-0663}

    > It was discovered that a type confusion error existed in libxml2. An
    > attacker could use this to specially construct XML data that could
    > cause a denial of service or possibly execute arbitrary code.

    ### CVE-2017-7375   {#cve-2017-7375}

    > It was discovered that libxml2 did not properly validate parsed entity
    > references. An attacker could use this to specially construct XML data
    > that could expose sensitive information.

    ### CVE-2017-7376   {#cve-2017-7376}

    > It was discovered that a buffer overflow existed in libxml2 when
    > handling HTTP redirects. An attacker could use this to specially
    > construct XML data that could cause a denial of service or possibly
    > execute arbitrary code.

    ### CVE-2017-9047   {#cve-2017-9047}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overflow in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service or
    > possibly execute arbitrary code.

    ### CVE-2017-9048   {#cve-2017-9048}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overread in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service.

    ### CVE-2017-9049, CVE-2017-9050   {#cve-2017-9049-cve-2017-9050}

    > Marcel Böhme and Van-Thuan Pham discovered multiple buffer overreads
    > in libxml2 when handling parameter-entity references. An attacker
    > could use these to specially construct XML data that could cause a
    > denial of service.



    [1]: https://rubygems.org/gems/nokogiri
    \n[`nokogiri`][1] (鋸) is an HTML, XML, SAX, and Reader parser, with the
    ability to search documents via XPath or CSS3 selectors.

    Affected versions of the package are vulnerable to many vulnerabilities,
    including Arbitrary Code Execution and Denial of Service (DoS), and
    Sensitive Information Exposure. Nokogiri bundles the `libxml2` library,
    which is vulnerable in versions below 2.9.5.

    The CVEs assigned to the vulnerabilities are:

    ### CVE-2017-0663   {#cve-2017-0663}

    > It was discovered that a type confusion error existed in libxml2. An
    > attacker could use this to specially construct XML data that could
    > cause a denial of service or possibly execute arbitrary code.

    ### CVE-2017-7375   {#cve-2017-7375}

    > It was discovered that libxml2 did not properly validate parsed entity
    > references. An attacker could use this to specially construct XML data
    > that could expose sensitive information.

    ### CVE-2017-7376   {#cve-2017-7376}

    > It was discovered that a buffer overflow existed in libxml2 when
    > handling HTTP redirects. An attacker could use this to specially
    > construct XML data that could cause a denial of service or possibly
    > execute arbitrary code.

    ### CVE-2017-9047   {#cve-2017-9047}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overflow in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service or
    > possibly execute arbitrary code.

    ### CVE-2017-9048   {#cve-2017-9048}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overread in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service.

    ### CVE-2017-9049, CVE-2017-9050   {#cve-2017-9049-cve-2017-9050}

    > Marcel Böhme and Van-Thuan Pham discovered multiple buffer overreads
    > in libxml2 when handling parameter-entity references. An attacker
    > could use these to specially construct XML data that could cause a
    > denial of service.



    [1]: https://rubygems.org/gems/nokogiri
    \n[`nokogiri`][1] (鋸) is an HTML, XML, SAX, and Reader parser, with the
    ability to search documents via XPath or CSS3 selectors.

    Affected versions of the package are vulnerable to many vulnerabilities,
    including Arbitrary Code Execution and Denial of Service (DoS), and
    Sensitive Information Exposure. Nokogiri bundles the `libxml2` library,
    which is vulnerable in versions below 2.9.5.

    The CVEs assigned to the vulnerabilities are:

    ### CVE-2017-0663   {#cve-2017-0663}

    > It was discovered that a type confusion error existed in libxml2. An
    > attacker could use this to specially construct XML data that could
    > cause a denial of service or possibly execute arbitrary code.

    ### CVE-2017-7375   {#cve-2017-7375}

    > It was discovered that libxml2 did not properly validate parsed entity
    > references. An attacker could use this to specially construct XML data
    > that could expose sensitive information.

    ### CVE-2017-7376   {#cve-2017-7376}

    > It was discovered that a buffer overflow existed in libxml2 when
    > handling HTTP redirects. An attacker could use this to specially
    > construct XML data that could cause a denial of service or possibly
    > execute arbitrary code.

    ### CVE-2017-9047   {#cve-2017-9047}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overflow in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service or
    > possibly execute arbitrary code.

    ### CVE-2017-9048   {#cve-2017-9048}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overread in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service.

    ### CVE-2017-9049, CVE-2017-9050   {#cve-2017-9049-cve-2017-9050}

    > Marcel Böhme and Van-Thuan Pham discovered multiple buffer overreads
    > in libxml2 when handling parameter-entity references. An attacker
    > could use these to specially construct XML data that could cause a
    > denial of service.



    [1]: https://rubygems.org/gems/nokogiri
    \n[`nokogiri`][1] (鋸) is an HTML, XML, SAX, and Reader parser, with the
    ability to search documents via XPath or CSS3 selectors.

    Affected versions of the package are vulnerable to many vulnerabilities,
    including Arbitrary Code Execution and Denial of Service (DoS), and
    Sensitive Information Exposure. Nokogiri bundles the `libxml2` library,
    which is vulnerable in versions below 2.9.5.

    The CVEs assigned to the vulnerabilities are:

    ### CVE-2017-0663   {#cve-2017-0663}

    > It was discovered that a type confusion error existed in libxml2. An
    > attacker could use this to specially construct XML data that could
    > cause a denial of service or possibly execute arbitrary code.

    ### CVE-2017-7375   {#cve-2017-7375}

    > It was discovered that libxml2 did not properly validate parsed entity
    > references. An attacker could use this to specially construct XML data
    > that could expose sensitive information.

    ### CVE-2017-7376   {#cve-2017-7376}

    > It was discovered that a buffer overflow existed in libxml2 when
    > handling HTTP redirects. An attacker could use this to specially
    > construct XML data that could cause a denial of service or possibly
    > execute arbitrary code.

    ### CVE-2017-9047   {#cve-2017-9047}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overflow in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service or
    > possibly execute arbitrary code.

    ### CVE-2017-9048   {#cve-2017-9048}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overread in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service.

    ### CVE-2017-9049, CVE-2017-9050   {#cve-2017-9049-cve-2017-9050}

    > Marcel Böhme and Van-Thuan Pham discovered multiple buffer overreads
    > in libxml2 when handling parameter-entity references. An attacker
    > could use these to specially construct XML data that could cause a
    > denial of service.



    [1]: https://rubygems.org/gems/nokogiri
    \n[`nokogiri`][1] (鋸) is an HTML, XML, SAX, and Reader parser, with the
    ability to search documents via XPath or CSS3 selectors.

    Affected versions of the package are vulnerable to many vulnerabilities,
    including Arbitrary Code Execution and Denial of Service (DoS), and
    Sensitive Information Exposure. Nokogiri bundles the `libxml2` library,
    which is vulnerable in versions below 2.9.5.

    The CVEs assigned to the vulnerabilities are:

    ### CVE-2017-0663   {#cve-2017-0663}

    > It was discovered that a type confusion error existed in libxml2. An
    > attacker could use this to specially construct XML data that could
    > cause a denial of service or possibly execute arbitrary code.

    ### CVE-2017-7375   {#cve-2017-7375}

    > It was discovered that libxml2 did not properly validate parsed entity
    > references. An attacker could use this to specially construct XML data
    > that could expose sensitive information.

    ### CVE-2017-7376   {#cve-2017-7376}

    > It was discovered that a buffer overflow existed in libxml2 when
    > handling HTTP redirects. An attacker could use this to specially
    > construct XML data that could cause a denial of service or possibly
    > execute arbitrary code.

    ### CVE-2017-9047   {#cve-2017-9047}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overflow in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service or
    > possibly execute arbitrary code.

    ### CVE-2017-9048   {#cve-2017-9048}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overread in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service.

    ### CVE-2017-9049, CVE-2017-9050   {#cve-2017-9049-cve-2017-9050}

    > Marcel Böhme and Van-Thuan Pham discovered multiple buffer overreads
    > in libxml2 when handling parameter-entity references. An attacker
    > could use these to specially construct XML data that could cause a
    > denial of service.



    [1]: https://rubygems.org/gems/nokogiri
    \n[`nokogiri`][1] (鋸) is an HTML, XML, SAX, and Reader parser, with the
    ability to search documents via XPath or CSS3 selectors.

    Affected versions of the package are vulnerable to many vulnerabilities,
    including Arbitrary Code Execution and Denial of Service (DoS), and
    Sensitive Information Exposure. Nokogiri bundles the `libxml2` library,
    which is vulnerable in versions below 2.9.5.

    The CVEs assigned to the vulnerabilities are:

    ### CVE-2017-0663   {#cve-2017-0663}

    > It was discovered that a type confusion error existed in libxml2. An
    > attacker could use this to specially construct XML data that could
    > cause a denial of service or possibly execute arbitrary code.

    ### CVE-2017-7375   {#cve-2017-7375}

    > It was discovered that libxml2 did not properly validate parsed entity
    > references. An attacker could use this to specially construct XML data
    > that could expose sensitive information.

    ### CVE-2017-7376   {#cve-2017-7376}

    > It was discovered that a buffer overflow existed in libxml2 when
    > handling HTTP redirects. An attacker could use this to specially
    > construct XML data that could cause a denial of service or possibly
    > execute arbitrary code.

    ### CVE-2017-9047   {#cve-2017-9047}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overflow in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service or
    > possibly execute arbitrary code.

    ### CVE-2017-9048   {#cve-2017-9048}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overread in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service.

    ### CVE-2017-9049, CVE-2017-9050   {#cve-2017-9049-cve-2017-9050}

    > Marcel Böhme and Van-Thuan Pham discovered multiple buffer overreads
    > in libxml2 when handling parameter-entity references. An attacker
    > could use these to specially construct XML data that could cause a
    > denial of service.



    [1]: https://rubygems.org/gems/nokogiri
    \n[`nokogiri`][1] (鋸) is an HTML, XML, SAX, and Reader parser, with the
    ability to search documents via XPath or CSS3 selectors.

    Affected versions of the package are vulnerable to many vulnerabilities,
    including Arbitrary Code Execution and Denial of Service (DoS), and
    Sensitive Information Exposure. Nokogiri bundles the `libxml2` library,
    which is vulnerable in versions below 2.9.5.

    The CVEs assigned to the vulnerabilities are:

    ### CVE-2017-0663   {#cve-2017-0663}

    > It was discovered that a type confusion error existed in libxml2. An
    > attacker could use this to specially construct XML data that could
    > cause a denial of service or possibly execute arbitrary code.

    ### CVE-2017-7375   {#cve-2017-7375}

    > It was discovered that libxml2 did not properly validate parsed entity
    > references. An attacker could use this to specially construct XML data
    > that could expose sensitive information.

    ### CVE-2017-7376   {#cve-2017-7376}

    > It was discovered that a buffer overflow existed in libxml2 when
    > handling HTTP redirects. An attacker could use this to specially
    > construct XML data that could cause a denial of service or possibly
    > execute arbitrary code.

    ### CVE-2017-9047   {#cve-2017-9047}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overflow in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service or
    > possibly execute arbitrary code.

    ### CVE-2017-9048   {#cve-2017-9048}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overread in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service.

    ### CVE-2017-9049, CVE-2017-9050   {#cve-2017-9049-cve-2017-9050}

    > Marcel Böhme and Van-Thuan Pham discovered multiple buffer overreads
    > in libxml2 when handling parameter-entity references. An attacker
    > could use these to specially construct XML data that could cause a
    > denial of service.



    [1]: https://rubygems.org/gems/nokogiri
    \n[`nokogiri`][1] (鋸) is an HTML, XML, SAX, and Reader parser, with the
    ability to search documents via XPath or CSS3 selectors.

    Affected versions of the package are vulnerable to many vulnerabilities,
    including Arbitrary Code Execution and Denial of Service (DoS), and
    Sensitive Information Exposure. Nokogiri bundles the `libxml2` library,
    which is vulnerable in versions below 2.9.5.

    The CVEs assigned to the vulnerabilities are:

    ### CVE-2017-0663   {#cve-2017-0663}

    > It was discovered that a type confusion error existed in libxml2. An
    > attacker could use this to specially construct XML data that could
    > cause a denial of service or possibly execute arbitrary code.

    ### CVE-2017-7375   {#cve-2017-7375}

    > It was discovered that libxml2 did not properly validate parsed entity
    > references. An attacker could use this to specially construct XML data
    > that could expose sensitive information.

    ### CVE-2017-7376   {#cve-2017-7376}

    > It was discovered that a buffer overflow existed in libxml2 when
    > handling HTTP redirects. An attacker could use this to specially
    > construct XML data that could cause a denial of service or possibly
    > execute arbitrary code.

    ### CVE-2017-9047   {#cve-2017-9047}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overflow in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service or
    > possibly execute arbitrary code.

    ### CVE-2017-9048   {#cve-2017-9048}

    > Marcel Böhme and Van-Thuan Pham discovered a buffer overread in
    > libxml2 when handling elements. An attacker could use this to
    > specially construct XML data that could cause a denial of service.

    ### CVE-2017-9049, CVE-2017-9050   {#cve-2017-9049-cve-2017-9050}

    > Marcel Böhme and Van-Thuan Pham discovered multiple buffer overreads
    > in libxml2 when handling parameter-entity references. An attacker
    > could use these to specially construct XML data that could cause a
    > denial of service.



    [1]: https://rubygems.org/gems/nokogiri
  affected_package: nokogiri
  vulnerable_versions:
  - "<1.8.1"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2017-9050
  - CVE-2017-9049
  - CVE-2017-9048
  - CVE-2017-9047
  - CVE-2017-7376
  - CVE-2017-7375
  - CVE-2017-0663
  cwe:
  - CWE-200
  - CWE-126
  - CWE-89
  - CWE-399
  credit:
  - Marcel Böhme
  - VanThuan Pham
  references:
  - https://github.com/sparklemotion/nokogiri/issues/1673
  - https://usn.ubuntu.com/usn/usn-3424-1/
  source_url: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20432
- id: snykio:rubygems:nokogiri:2017-04-28
  title: Out of Bounds Memory Write
  description: |
    [`nokogiri`][1] (鋸) is an HTML, XML, SAX, and Reader parser, with the
    ability to search documents via XPath or CSS3 selectors.

    Affected versions of the package are vulnerable to Out of Bounds Memory
    Write. Nokogiri bundles the `libxslt` library, which is vulnerable in
    versions below 3. The `xsltAddTextString` function in `transform.c`
    lacked a check for integer overflow during a size calculation, which
    allowed a remote attacker to perform an out of bounds memory write via a
    crafted HTML page.



    [1]: https://rubygems.org/gems/nokogiri
    \n[`nokogiri`][1] (鋸) is an HTML, XML, SAX, and Reader parser, with the
    ability to search documents via XPath or CSS3 selectors.

    Affected versions of the package are vulnerable to Out of Bounds Memory
    Write. Nokogiri bundles the `libxslt` library, which is vulnerable in
    versions below 3. The `xsltAddTextString` function in `transform.c`
    lacked a check for integer overflow during a size calculation, which
    allowed a remote attacker to perform an out of bounds memory write via a
    crafted HTML page.



    [1]: https://rubygems.org/gems/nokogiri
    \n[`nokogiri`][1] (鋸) is an HTML, XML, SAX, and Reader parser, with the
    ability to search documents via XPath or CSS3 selectors.

    Affected versions of the package are vulnerable to Out of Bounds Memory
    Write. Nokogiri bundles the `libxslt` library, which is vulnerable in
    versions below 3. The `xsltAddTextString` function in `transform.c`
    lacked a check for integer overflow during a size calculation, which
    allowed a remote attacker to perform an out of bounds memory write via a
    crafted HTML page.



    [1]: https://rubygems.org/gems/nokogiri
  affected_package: nokogiri
  vulnerable_versions:
  - "<1.7.2"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2017-5029
  cwe:
  - CWE-787
  credit:
  - Unknown
  references:
  - https://github.com/sparklemotion/nokogiri/issues/1634
  - https://github.com/sparklemotion/nokogiri/commit/0859c487c9f6933d96d998560d88147c841f7336
  source_url: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20368
- id: snykio:rubygems:nokogiri:2017-04-27
  title: Arbitrary Code Execution
  description: |
    [`nokogiri`][1] (鋸) is an HTML, XML, SAX, and Reader parser, with the
    ability to search documents via XPath or CSS3 selectors.

    Affected versions of the package are vulnerable to Arbitrary Code
    Execution or a Denial of Service (memory corruption) via a crafted web
    site. Nokogiri bundles the `libxslt` library, which is vulnerable in
    versions below 3.

    ### Denial of Service (DoS) - CVE-2016-4738   {#denial-of-service-dos-cve-2016-4738}

    libxslt allows remote attackers to execute arbitrary code or cause a
    denial of service (memory corruption) via a crafted web site.

    ### Arbitrary Code Execution - CVE-2017-5029   {#arbitrary-code-execution-cve-2017-5029}

    The `xsltAddTextString` function in transform.c in libxslt, lacked a
    check for integer overflow during a size calculation. This allowed a
    remote attacker to perform an out of bounds memory write via a crafted
    HTML page.



    [1]: https://rubygems.org/gems/nokogiri
    \n[`nokogiri`][1] (鋸) is an HTML, XML, SAX, and Reader parser, with the
    ability to search documents via XPath or CSS3 selectors.

    Affected versions of the package are vulnerable to Arbitrary Code
    Execution or a Denial of Service (memory corruption) via a crafted web
    site. Nokogiri bundles the `libxslt` library, which is vulnerable in
    versions below 3.

    ### Denial of Service (DoS) - CVE-2016-4738   {#denial-of-service-dos-cve-2016-4738}

    libxslt allows remote attackers to execute arbitrary code or cause a
    denial of service (memory corruption) via a crafted web site.

    ### Arbitrary Code Execution - CVE-2017-5029   {#arbitrary-code-execution-cve-2017-5029}

    The `xsltAddTextString` function in transform.c in libxslt, lacked a
    check for integer overflow during a size calculation. This allowed a
    remote attacker to perform an out of bounds memory write via a crafted
    HTML page.



    [1]: https://rubygems.org/gems/nokogiri
    \n[`nokogiri`][1] (鋸) is an HTML, XML, SAX, and Reader parser, with the
    ability to search documents via XPath or CSS3 selectors.

    Affected versions of the package are vulnerable to Arbitrary Code
    Execution or a Denial of Service (memory corruption) via a crafted web
    site. Nokogiri bundles the `libxslt` library, which is vulnerable in
    versions below 3.

    ### Denial of Service (DoS) - CVE-2016-4738   {#denial-of-service-dos-cve-2016-4738}

    libxslt allows remote attackers to execute arbitrary code or cause a
    denial of service (memory corruption) via a crafted web site.

    ### Arbitrary Code Execution - CVE-2017-5029   {#arbitrary-code-execution-cve-2017-5029}

    The `xsltAddTextString` function in transform.c in libxslt, lacked a
    check for integer overflow during a size calculation. This allowed a
    remote attacker to perform an out of bounds memory write via a crafted
    HTML page.



    [1]: https://rubygems.org/gems/nokogiri
    \n[`nokogiri`][1] (鋸) is an HTML, XML, SAX, and Reader parser, with the
    ability to search documents via XPath or CSS3 selectors.

    Affected versions of the package are vulnerable to Arbitrary Code
    Execution or a Denial of Service (memory corruption) via a crafted web
    site. Nokogiri bundles the `libxslt` library, which is vulnerable in
    versions below 3.

    ### Denial of Service (DoS) - CVE-2016-4738   {#denial-of-service-dos-cve-2016-4738}

    libxslt allows remote attackers to execute arbitrary code or cause a
    denial of service (memory corruption) via a crafted web site.

    ### Arbitrary Code Execution - CVE-2017-5029   {#arbitrary-code-execution-cve-2017-5029}

    The `xsltAddTextString` function in transform.c in libxslt, lacked a
    check for integer overflow during a size calculation. This allowed a
    remote attacker to perform an out of bounds memory write via a crafted
    HTML page.



    [1]: https://rubygems.org/gems/nokogiri
    \n[`nokogiri`][1] (鋸) is an HTML, XML, SAX, and Reader parser, with the
    ability to search documents via XPath or CSS3 selectors.

    Affected versions of the package are vulnerable to Arbitrary Code
    Execution or a Denial of Service (memory corruption) via a crafted web
    site. Nokogiri bundles the `libxslt` library, which is vulnerable in
    versions below 3.

    ### Denial of Service (DoS) - CVE-2016-4738   {#denial-of-service-dos-cve-2016-4738}

    libxslt allows remote attackers to execute arbitrary code or cause a
    denial of service (memory corruption) via a crafted web site.

    ### Arbitrary Code Execution - CVE-2017-5029   {#arbitrary-code-execution-cve-2017-5029}

    The `xsltAddTextString` function in transform.c in libxslt, lacked a
    check for integer overflow during a size calculation. This allowed a
    remote attacker to perform an out of bounds memory write via a crafted
    HTML page.



    [1]: https://rubygems.org/gems/nokogiri
    \n[`nokogiri`][1] (鋸) is an HTML, XML, SAX, and Reader parser, with the
    ability to search documents via XPath or CSS3 selectors.

    Affected versions of the package are vulnerable to Arbitrary Code
    Execution or a Denial of Service (memory corruption) via a crafted web
    site. Nokogiri bundles the `libxslt` library, which is vulnerable in
    versions below 3.

    ### Denial of Service (DoS) - CVE-2016-4738   {#denial-of-service-dos-cve-2016-4738}

    libxslt allows remote attackers to execute arbitrary code or cause a
    denial of service (memory corruption) via a crafted web site.

    ### Arbitrary Code Execution - CVE-2017-5029   {#arbitrary-code-execution-cve-2017-5029}

    The `xsltAddTextString` function in transform.c in libxslt, lacked a
    check for integer overflow during a size calculation. This allowed a
    remote attacker to perform an out of bounds memory write via a crafted
    HTML page.



    [1]: https://rubygems.org/gems/nokogiri
    \n[`nokogiri`][1] (鋸) is an HTML, XML, SAX, and Reader parser, with the
    ability to search documents via XPath or CSS3 selectors.

    Affected versions of the package are vulnerable to Arbitrary Code
    Execution or a Denial of Service (memory corruption) via a crafted web
    site. Nokogiri bundles the `libxslt` library, which is vulnerable in
    versions below 3.

    ### Denial of Service (DoS) - CVE-2016-4738   {#denial-of-service-dos-cve-2016-4738}

    libxslt allows remote attackers to execute arbitrary code or cause a
    denial of service (memory corruption) via a crafted web site.

    ### Arbitrary Code Execution - CVE-2017-5029   {#arbitrary-code-execution-cve-2017-5029}

    The `xsltAddTextString` function in transform.c in libxslt, lacked a
    check for integer overflow during a size calculation. This allowed a
    remote attacker to perform an out of bounds memory write via a crafted
    HTML page.



    [1]: https://rubygems.org/gems/nokogiri
  affected_package: nokogiri
  vulnerable_versions:
  - "<1.7.2"
  severity: high
  package_manager: rubygems
  cwe:
  - CWE-119
  credit:
  - Unknown
  references:
  - https://github.com/sparklemotion/nokogiri/issues/1634
  - https://github.com/sparklemotion/nokogiri/commit/0859c487c9f6933d96d998560d88147c841f7336
  source_url: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20367
- id: snykio:rubygems:nokogiri:2017-01-11
  title: XML External Entity (XXE) Injection
  description: |+
    [nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors.

    Affected versions of this Gem are vulnerable to XML External Entity
    (XXE) attacks when opting into the `DTDLOAD` option and opting out of
    the `NONET` option. `Nokogiri` is affected by series of vulnerabilities
    in libxml2 and libxslt, which are libraries it depends on. When handling
    the expansion of XML external entities (XXE) in libxml2, you can specify
    documents to be read. Opting into the `DTDLOAD` option and opting out of
    the `NONET` option in `Nokogiri` allows unknown documents to be loaded
    from the network. This can be used by attackers to load specially
    crafted XML documents on an internal XML parsing service and may lead to
    unauthorized disclosure of potentially sensitive information.

    **Note:** This vulnerability exists also in versions `< 1.5.4`
    regardless of the options opted into or out of. See information
    [here][2]



    [1]: https://rubygems.org/gems/nokogiri
    [2]: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20298
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors.

    Affected versions of this Gem are vulnerable to XML External Entity
    (XXE) attacks when opting into the `DTDLOAD` option and opting out of
    the `NONET` option. `Nokogiri` is affected by series of vulnerabilities
    in libxml2 and libxslt, which are libraries it depends on. When handling
    the expansion of XML external entities (XXE) in libxml2, you can specify
    documents to be read. Opting into the `DTDLOAD` option and opting out of
    the `NONET` option in `Nokogiri` allows unknown documents to be loaded
    from the network. This can be used by attackers to load specially
    crafted XML documents on an internal XML parsing service and may lead to
    unauthorized disclosure of potentially sensitive information.

    **Note:** This vulnerability exists also in versions `< 1.5.4`
    regardless of the options opted into or out of. See information
    [here][2]



    [1]: https://rubygems.org/gems/nokogiri
    [2]: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20298
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors.

    Affected versions of this Gem are vulnerable to XML External Entity
    (XXE) attacks when opting into the `DTDLOAD` option and opting out of
    the `NONET` option. `Nokogiri` is affected by series of vulnerabilities
    in libxml2 and libxslt, which are libraries it depends on. When handling
    the expansion of XML external entities (XXE) in libxml2, you can specify
    documents to be read. Opting into the `DTDLOAD` option and opting out of
    the `NONET` option in `Nokogiri` allows unknown documents to be loaded
    from the network. This can be used by attackers to load specially
    crafted XML documents on an internal XML parsing service and may lead to
    unauthorized disclosure of potentially sensitive information.

    **Note:** This vulnerability exists also in versions `< 1.5.4`
    regardless of the options opted into or out of. See information
    [here][2]



    [1]: https://rubygems.org/gems/nokogiri
    [2]: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20298
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors.

    Affected versions of this Gem are vulnerable to XML External Entity
    (XXE) attacks when opting into the `DTDLOAD` option and opting out of
    the `NONET` option. `Nokogiri` is affected by series of vulnerabilities
    in libxml2 and libxslt, which are libraries it depends on. When handling
    the expansion of XML external entities (XXE) in libxml2, you can specify
    documents to be read. Opting into the `DTDLOAD` option and opting out of
    the `NONET` option in `Nokogiri` allows unknown documents to be loaded
    from the network. This can be used by attackers to load specially
    crafted XML documents on an internal XML parsing service and may lead to
    unauthorized disclosure of potentially sensitive information.

    **Note:** This vulnerability exists also in versions `< 1.5.4`
    regardless of the options opted into or out of. See information
    [here][2]



    [1]: https://rubygems.org/gems/nokogiri
    [2]: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20298
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: nokogiri
  vulnerable_versions:
  - ">= 1.5.4"
  severity: high
  package_manager: rubygems
  cwe:
  - CWE-611
  credit:
  - Snyk Security Research Team
  references:
  - https://github.com/sparklemotion/nokogiri/issues/1582
  - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9318
  source_url: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20299
- id: snykio:rubygems:nokogiri:2017-01-11
  title: XML External Entity (XXE) Injection
  description: |+
    [nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors.

    Affected versions of this Gem are vulnerable to XML External Entity
    (XXE) attacks. `Nokogiri` is affected by series of vulnerabilities in
    libxml2 and libxslt, which are libraries it depends on. When handling
    the expansion of XML external entities (XXE) in libxml2, you can specify
    documents to be read. This can be used by attackers to load specially
    crafted XML documents on an internal XML parsing service and may lead to
    unauthorized disclosure of potentially sensitive information.

    **Note:** This vulnerability exists also in versions `>= 1.5.4` only
    when opting into the `DTDLOAD` option and opting out of the `NONET`
    option. See information [here][2]



    [1]: https://rubygems.org/gems/nokogiri
    [2]: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20299
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors.

    Affected versions of this Gem are vulnerable to XML External Entity
    (XXE) attacks. `Nokogiri` is affected by series of vulnerabilities in
    libxml2 and libxslt, which are libraries it depends on. When handling
    the expansion of XML external entities (XXE) in libxml2, you can specify
    documents to be read. This can be used by attackers to load specially
    crafted XML documents on an internal XML parsing service and may lead to
    unauthorized disclosure of potentially sensitive information.

    **Note:** This vulnerability exists also in versions `>= 1.5.4` only
    when opting into the `DTDLOAD` option and opting out of the `NONET`
    option. See information [here][2]



    [1]: https://rubygems.org/gems/nokogiri
    [2]: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20299
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors.

    Affected versions of this Gem are vulnerable to XML External Entity
    (XXE) attacks. `Nokogiri` is affected by series of vulnerabilities in
    libxml2 and libxslt, which are libraries it depends on. When handling
    the expansion of XML external entities (XXE) in libxml2, you can specify
    documents to be read. This can be used by attackers to load specially
    crafted XML documents on an internal XML parsing service and may lead to
    unauthorized disclosure of potentially sensitive information.

    **Note:** This vulnerability exists also in versions `>= 1.5.4` only
    when opting into the `DTDLOAD` option and opting out of the `NONET`
    option. See information [here][2]



    [1]: https://rubygems.org/gems/nokogiri
    [2]: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20299
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors.

    Affected versions of this Gem are vulnerable to XML External Entity
    (XXE) attacks. `Nokogiri` is affected by series of vulnerabilities in
    libxml2 and libxslt, which are libraries it depends on. When handling
    the expansion of XML external entities (XXE) in libxml2, you can specify
    documents to be read. This can be used by attackers to load specially
    crafted XML documents on an internal XML parsing service and may lead to
    unauthorized disclosure of potentially sensitive information.

    **Note:** This vulnerability exists also in versions `>= 1.5.4` only
    when opting into the `DTDLOAD` option and opting out of the `NONET`
    option. See information [here][2]



    [1]: https://rubygems.org/gems/nokogiri
    [2]: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20299
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: nokogiri
  vulnerable_versions:
  - "< 1.5.4"
  severity: high
  package_manager: rubygems
  cwe:
  - CWE-611
  credit:
  - Snyk Security Research Team
  references:
  - https://github.com/sparklemotion/nokogiri/issues/1582
  - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9318
  source_url: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20298
- id: snykio:rubygems:nokogiri:2016-06-06
  title: Denial of Service (DoS)
  description: |+
    [nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors.

    Affected versions of this package are vulnerable to Denial of Services
    (DoS) attacks. Nokogiri is affected by series of vulnerabilities in
    libxml2 and libxslt, which are libraries Nokogiri depends on. It was
    discovered that libxml2 and libxslt incorrectly handled certain
    malformed documents, which can allow attackers to perform a Denial of
    Service or [Arbitrary Code Execution][2] attacks.



    [1]: https://rubygems.org/gems/nokogiri
    [2]: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20268-1
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors.

    Affected versions of this package are vulnerable to Denial of Services
    (DoS) attacks. Nokogiri is affected by series of vulnerabilities in
    libxml2 and libxslt, which are libraries Nokogiri depends on. It was
    discovered that libxml2 and libxslt incorrectly handled certain
    malformed documents, which can allow attackers to perform a Denial of
    Service or [Arbitrary Code Execution][2] attacks.



    [1]: https://rubygems.org/gems/nokogiri
    [2]: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20268-1
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors.

    Affected versions of this package are vulnerable to Denial of Services
    (DoS) attacks. Nokogiri is affected by series of vulnerabilities in
    libxml2 and libxslt, which are libraries Nokogiri depends on. It was
    discovered that libxml2 and libxslt incorrectly handled certain
    malformed documents, which can allow attackers to perform a Denial of
    Service or [Arbitrary Code Execution][2] attacks.



    [1]: https://rubygems.org/gems/nokogiri
    [2]: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20268-1
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: nokogiri
  vulnerable_versions:
  - "< 1.6.8 &&  >= 1.6.0"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2015-8806
  cwe:
  - CWE-400
  credit:
  - Unknown
  references:
  - https://rubysec.com/advisories/nokogiri-CVE-2015-8806
  - https://github.com/sparklemotion/nokogiri/issues/1473
  - https://www.ubuntu.com/usn/usn-2994-1/
  source_url: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20268
- id: snykio:rubygems:nokogiri:2016-06-06
  title: Arbitrary Code Execution
  description: |
    [nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors.

    Affected versions of this gem are vulnerable to Arbitrary Code Execution
    attacks. Nokogiri is affected by series of vulnerabilities in libxml2
    and libxslt, which are libraries Nokogiri depends on. libxml2 and
    libxslt incorrectly handled certain malformed documents, which can allow
    attackers to perform a [Denial of Service][2] or Arbitrary Code
    Execution attacks.



    [1]: https://rubygems.org/gems/nokogiri
    [2]: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20268
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors.

    Affected versions of this gem are vulnerable to Arbitrary Code Execution
    attacks. Nokogiri is affected by series of vulnerabilities in libxml2
    and libxslt, which are libraries Nokogiri depends on. libxml2 and
    libxslt incorrectly handled certain malformed documents, which can allow
    attackers to perform a [Denial of Service][2] or Arbitrary Code
    Execution attacks.



    [1]: https://rubygems.org/gems/nokogiri
    [2]: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20268
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors.

    Affected versions of this gem are vulnerable to Arbitrary Code Execution
    attacks. Nokogiri is affected by series of vulnerabilities in libxml2
    and libxslt, which are libraries Nokogiri depends on. libxml2 and
    libxslt incorrectly handled certain malformed documents, which can allow
    attackers to perform a [Denial of Service][2] or Arbitrary Code
    Execution attacks.



    [1]: https://rubygems.org/gems/nokogiri
    [2]: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20268
  affected_package: nokogiri
  vulnerable_versions:
  - "< 1.6.8 &&  >= 1.6.0"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2015-8806
  cwe:
  - CWE-94
  credit:
  - Unknown
  references:
  - https://rubysec.com/advisories/nokogiri-CVE-2015-8806
  - https://github.com/sparklemotion/nokogiri/issues/1473
  source_url: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20277
- id: snykio:rubygems:nokogiri:2016-01-18
  title: Denial of Service (DoS)
  description: |+
    [nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors.

    Affected versions of this Gem are vulnerable to both Memory Exhaustion
    and [Sensitive Information Exposure][2]. Heap-based buffer overflow in
    the `xmlGROW` function in parser.c in libxml2 allows context-dependent
    attackers to obtain sensitive process memory information via unspecified
    vectors. libxml2 could be made to crash if it opened a specially crafted
    file. It was discovered that libxml2 incorrectly handled certain
    malformed documents. If a user or automated system were tricked into
    opening a specially crafted document, an attacker could possibly cause
    libxml2 to crash, resulting in a Denial of Service.



    [1]: https://rubygems.org/gems/nokogiri
    [2]: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20292
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors.

    Affected versions of this Gem are vulnerable to both Memory Exhaustion
    and [Sensitive Information Exposure][2]. Heap-based buffer overflow in
    the `xmlGROW` function in parser.c in libxml2 allows context-dependent
    attackers to obtain sensitive process memory information via unspecified
    vectors. libxml2 could be made to crash if it opened a specially crafted
    file. It was discovered that libxml2 incorrectly handled certain
    malformed documents. If a user or automated system were tricked into
    opening a specially crafted document, an attacker could possibly cause
    libxml2 to crash, resulting in a Denial of Service.



    [1]: https://rubygems.org/gems/nokogiri
    [2]: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20292
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors.

    Affected versions of this Gem are vulnerable to both Memory Exhaustion
    and [Sensitive Information Exposure][2]. Heap-based buffer overflow in
    the `xmlGROW` function in parser.c in libxml2 allows context-dependent
    attackers to obtain sensitive process memory information via unspecified
    vectors. libxml2 could be made to crash if it opened a specially crafted
    file. It was discovered that libxml2 incorrectly handled certain
    malformed documents. If a user or automated system were tricked into
    opening a specially crafted document, an attacker could possibly cause
    libxml2 to crash, resulting in a Denial of Service.



    [1]: https://rubygems.org/gems/nokogiri
    [2]: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20292
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: nokogiri
  vulnerable_versions:
  - "< 1.6.7.2 &&  >= 1.6.0"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2015-7499
  cwe:
  - CWE-400
  credit:
  - Unknown
  references:
  - https://rubysec.com/advisories/nokogiri-CVE-2015-7499
  - https://nvd.nist.gov/vuln/detail/CVE-2015-7499
  source_url: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20253
- id: snykio:rubygems:nokogiri:2016-01-18
  title: Sensitive Information Exposure
  description: |+
    [nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors. Affected versions of
    this Gem are vulnerable to both [Memory Exhaustion][2] and Sensitive
    Information Exposure.



    [1]: https://rubygems.org/gems/nokogiri
    [2]: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20253
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors. Affected versions of
    this Gem are vulnerable to both [Memory Exhaustion][2] and Sensitive
    Information Exposure.



    [1]: https://rubygems.org/gems/nokogiri
    [2]: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20253
    \nHeap-based buffer overflow in the xmlGROW function in parser.c in
    libxml2 before 2.9.3 allows context-dependent attackers to obtain
    sensitive process memory information via unspecified vectors.

    libxml2 could be made to crash if it opened a specially crafted file. It
    was discovered that libxml2 incorrectly handled certain malformed
    documents. If a user or automated system were tricked into opening a
    specially crafted document, an attacker could possibly cause libxml2 to
    crash, resulting in a denial of service.

    \nHeap-based buffer overflow in the xmlGROW function in parser.c in
    libxml2 before 2.9.3 allows context-dependent attackers to obtain
    sensitive process memory information via unspecified vectors.

    libxml2 could be made to crash if it opened a specially crafted file. It
    was discovered that libxml2 incorrectly handled certain malformed
    documents. If a user or automated system were tricked into opening a
    specially crafted document, an attacker could possibly cause libxml2 to
    crash, resulting in a denial of service.

    \nHeap-based buffer overflow in the xmlGROW function in parser.c in
    libxml2 before 2.9.3 allows context-dependent attackers to obtain
    sensitive process memory information via unspecified vectors.

    libxml2 could be made to crash if it opened a specially crafted file. It
    was discovered that libxml2 incorrectly handled certain malformed
    documents. If a user or automated system were tricked into opening a
    specially crafted document, an attacker could possibly cause libxml2 to
    crash, resulting in a denial of service.

  affected_package: nokogiri
  vulnerable_versions:
  - "< 1.6.7.2 &&  >= 1.6.0"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2015-7499
  cwe:
  - CWE-200
  credit:
  - Unknown
  references:
  - http://rubysec.com/advisories/CVE-2015-7499
  - https://groups.google.com/forum/#!topic/ruby-security-ann/Dy7YiKb_pMM
  source_url: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20292
- id: snykio:rubygems:nokogiri:2015-12-14
  title: Denial of Service (DoS)
  description: |+
    [nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors.

    Affected versions of this Gem are vulnerable to Denial of Service (DoS)
    attacks. The `xmlStringLenDecodeEntities` function in parser.c in
    libxml2 does not properly prevent entity expansion, which allows
    context-dependent attackers to cause a denial of service (CPU
    consumption) via crafted XML data.



    [1]: https://rubygems.org/gems/nokogiri
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors.

    Affected versions of this Gem are vulnerable to Denial of Service (DoS)
    attacks. The `xmlStringLenDecodeEntities` function in parser.c in
    libxml2 does not properly prevent entity expansion, which allows
    context-dependent attackers to cause a denial of service (CPU
    consumption) via crafted XML data.



    [1]: https://rubygems.org/gems/nokogiri
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors.

    Affected versions of this Gem are vulnerable to Denial of Service (DoS)
    attacks. The `xmlStringLenDecodeEntities` function in parser.c in
    libxml2 does not properly prevent entity expansion, which allows
    context-dependent attackers to cause a denial of service (CPU
    consumption) via crafted XML data.



    [1]: https://rubygems.org/gems/nokogiri
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: nokogiri
  vulnerable_versions:
  - "< 1.6.7.1 &&  >= 1.6.0"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2015-5312
  cwe:
  - CWE-400
  credit:
  - Unknown
  references:
  - https://rubysec.com/advisories/nokogiri-CVE-2015-5312
  - https://nvd.nist.gov/vuln/detail/CVE-2015-5312
  source_url: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20245
- id: snykio:rubygems:nokogiri:2015-04-13
  title: Denial of Service (DoS)
  description: |+
    [nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors. Affected versions of
    this Gem are vulnerable to Denial of Service (DoS) attacks. This flaw
    could cause an application that uses libxml2 to use an excessive amount
    of memory.



    [1]: https://rubygems.org/gems/nokogiri
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors. Affected versions of
    this Gem are vulnerable to Denial of Service (DoS) attacks. This flaw
    could cause an application that uses libxml2 to use an excessive amount
    of memory.



    [1]: https://rubygems.org/gems/nokogiri
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: nokogiri
  vulnerable_versions:
  - "< 1.6.7.rc4 &&  >= 1.6.7.a || < 1.6.6.4"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2015-1819
  cwe:
  - CWE-400
  credit:
  - Florian Weimer
  references:
  - http://rubysec.com/advisories/nokogiri-CVE-2015-1819
  - https://github.com/sparklemotion/nokogiri/issues/1374
  - https://www.ubuntu.com/usn/usn-2812-1/
  source_url: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20214
- id: snykio:rubygems:nokogiri:2014-04-29
  title: Denial of Service (DoS)
  description: |+
    [nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors.

    Affected versions of this Gem are vulnerable to Denial of Service (DoS)
    attacks. It contains a flaw that is triggered when handling a root
    element in an XML document. This may allow a remote attacker to cause a
    consumption of memory resources.



    [1]: https://rubygems.org/gems/nokogiri
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors.

    Affected versions of this Gem are vulnerable to Denial of Service (DoS)
    attacks. It contains a flaw that is triggered when handling a root
    element in an XML document. This may allow a remote attacker to cause a
    consumption of memory resources.



    [1]: https://rubygems.org/gems/nokogiri
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors.

    Affected versions of this Gem are vulnerable to Denial of Service (DoS)
    attacks. It contains a flaw that is triggered when handling a root
    element in an XML document. This may allow a remote attacker to cause a
    consumption of memory resources.



    [1]: https://rubygems.org/gems/nokogiri
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: nokogiri
  vulnerable_versions:
  - "< 1.6.3"
  severity: medium
  package_manager: rubygems
  cwe:
  - CWE-400
  credit:
  - Yoko Harada
  - John Shahid
  references:
  - https://rubysec.com/advisories/nokogiri-OSVDB-118481
  - https://github.com/sparklemotion/nokogiri/pull/1087
  source_url: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20157
- id: snykio:rubygems:nokogiri:2013-12-13
  title: XML External Entity (XXE) Expansion
  description: |
    [nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors.

    Affected versions of this Gem are vulnerable to Denial of Service (DoS)
    attacks. It contains an flaw that is triggered during the parsing of XML
    data. The issue is due to an incorrectly configured XML parser accepting
    XML external entities from an untrusted source. By sending specially
    crafted XML data, a remote attacker can cause an infinite loop and crash
    the program.



    [1]: https://rubygems.org/gems/nokogiri
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors.

    Affected versions of this Gem are vulnerable to Denial of Service (DoS)
    attacks. It contains an flaw that is triggered during the parsing of XML
    data. The issue is due to an incorrectly configured XML parser accepting
    XML external entities from an untrusted source. By sending specially
    crafted XML data, a remote attacker can cause an infinite loop and crash
    the program.



    [1]: https://rubygems.org/gems/nokogiri
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors.

    Affected versions of this Gem are vulnerable to Denial of Service (DoS)
    attacks. It contains an flaw that is triggered during the parsing of XML
    data. The issue is due to an incorrectly configured XML parser accepting
    XML external entities from an untrusted source. By sending specially
    crafted XML data, a remote attacker can cause an infinite loop and crash
    the program.



    [1]: https://rubygems.org/gems/nokogiri
  affected_package: nokogiri
  vulnerable_versions:
  - "< 1.6.1 &&  >= 1.6 || < 1.5.11"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-6461
  cwe:
  - CWE-400
  credit:
  - Jonas Nicklas
  references:
  - https://rubysec.com/advisories/nokogiri-OSVDB-101458/
  - https://groups.google.com/forum/#!topic/ruby-security-ann/DeJpjTAg1FA
  source_url: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20127
- id: snykio:rubygems:nokogiri:2013-12-13
  title: Denial of Service (DoS)
  description: |+
    [nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors.

    Affected versions of this Gem are vulnerable to Denial of Service
    attacks. The issue is triggered when handling a specially crafted XML
    document, which can result in an infinite loop. This may allow a
    context-dependent attacker to crash the server.



    [1]: https://rubygems.org/gems/nokogiri
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors.

    Affected versions of this Gem are vulnerable to Denial of Service
    attacks. The issue is triggered when handling a specially crafted XML
    document, which can result in an infinite loop. This may allow a
    context-dependent attacker to crash the server.



    [1]: https://rubygems.org/gems/nokogiri
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors.

    Affected versions of this Gem are vulnerable to Denial of Service
    attacks. The issue is triggered when handling a specially crafted XML
    document, which can result in an infinite loop. This may allow a
    context-dependent attacker to crash the server.



    [1]: https://rubygems.org/gems/nokogiri
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: nokogiri
  vulnerable_versions:
  - "< 1.6.1 &&  >= 1.6 || < 1.5.11"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2013-6460
  cwe:
  - CWE-400
  credit:
  - Yoko Harada
  - John Shahid
  references:
  - http://rubysec.com/advisories/nokogiri-OSVDB-101179
  - https://groups.google.com/forum/#!topic/ruby-security-ann/DeJpjTAg1FA
  source_url: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20129
- id: snykio:rubygems:nokogiri:2012-06-07
  title: Information Exposure
  description: |+
    [nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors. Affected versions of
    this Gem are vulnerable to Sensitive Information Exposure.



    [1]: https://rubygems.org/gems/nokogiri
    \n[nokogiri][1] is an HTML, XML, SAX, and Reader parser, with the ability
    to search documents via XPath or CSS3 selectors. Affected versions of
    this Gem are vulnerable to Sensitive Information Exposure.



    [1]: https://rubygems.org/gems/nokogiri
    \nlibxml2 contains a flaw that may lead to unauthorized disclosure of
    potentially sensitive information. The issue is triggered when handling
    the expansion of XML external entities (XXE), you can specify URLs (e.g.
    HTTP) to be contacted when attacker-supplied XML is parsed. This can be
    used to trigger URL\'s on an internal network of a XML parsing service
    and allow a remote attacker to gain access to their responses.

    \nlibxml2 contains a flaw that may lead to unauthorized disclosure of
    potentially sensitive information. The issue is triggered when handling
    the expansion of XML external entities (XXE), you can specify URLs (e.g.
    HTTP) to be contacted when attacker-supplied XML is parsed. This can be
    used to trigger URL\'s on an internal network of a XML parsing service
    and allow a remote attacker to gain access to their responses.

  affected_package: nokogiri
  vulnerable_versions:
  - "< 1.5.4"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2012-6685
  cwe:
  - CWE-200
  credit:
  - Felix Gröbert
  references:
  - http://rubysec.com/advisories/CVE-2012-6685
  - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-6685
  - https://github.com/sparklemotion/nokogiri/issues/693
  source_url: https://snyk.io/vuln/SNYK-RUBY-NOKOGIRI-20032
