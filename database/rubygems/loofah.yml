---
- id: rubyadvisory:rubygems:loofah:CVE-2018-16468
  title: Loofah XSS Vulnerability
  description: |
    In the Loofah gem, through v2.2.2, unsanitized JavaScript may occur in
    sanitized output when a crafted SVG element is republished.
  affected_package: loofah
  patched_versions:
  - ">=  2.2.3"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2018-16468
  cvss_v3_score: 6.4
  disclosed_date: 2018-10-30
  created_date: 2018-10-30
  last_modified_date: 2018-10-30
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  - https://hackerone.com/reports/429267
  source_url: https://github.com/flavorjones/loofah/issues/154
- id: rubyadvisory:rubygems:loofah:CVE-2018-8048
  title: Loofah XSS Vulnerability
  description: |
    Loofah allows non-whitelisted attributes to be present in sanitized
    output when input with specially-crafted HTML fragments.
  affected_package: loofah
  patched_versions:
  - ">=  2.2.1"
  package_manager: rubygems
  cve:
  - CVE-2018-8048
  disclosed_date: 2018-03-16
  created_date: 2018-03-16
  last_modified_date: 2018-03-16
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://github.com/flavorjones/loofah/issues/144
- id: rubyadvisory:rubygems:loofah:OSVDB-90945
  title: Loofah HTML and XSS injection vulnerability
  description: |
    Loofah Gem for Ruby contains a flaw that allows a remote cross-site
    scripting (XSS) attack. This flaw exists because the
    Loofah::HTML::Document\#text function passes properly sanitized
    user-supplied input to the Loofah::XssFoliate and
    Loofah::Helpers\#strip_tags functions which convert input back to
    text. This may allow an attacker to create a specially crafted
    request that would execute arbitrary script code in a user's browser
    within the trust relationship between their browser and the server.
  affected_package: loofah
  patched_versions:
  - ">=  0.4.6"
  severity: medium
  package_manager: rubygems
  osvdb: 90945
  cvss_v2_score: 5.0
  disclosed_date: 2012-09-08
  created_date: 2012-09-08
  last_modified_date: 2012-09-08
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://www.osvdb.org/show/osvdb/90945
- id: snykio:rubygems:loofah:20039
  title: Cross-site Scripting (XSS)
  description: |+
    [`loofah`][1] is a library for manipulating and transforming HTML/XML
    documents and fragments. It\'s built on top of Nokogiri and libxml2.

    Affected versions of this gem allow a remote cross-site scripting (XSS)
    attack. This is due to the `Loofah::HTML::Document\#text` function
    passing properly sanitized user-supplied input to the
    `Loofah::XssFoliate` and `Loofah::Helpers\#strip_tags` functions which
    convert input back to text.



    [1]: https://rubygems.org/gems/loofah
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: loofah
  vulnerable_versions:
  - "< 0.4.6"
  severity: medium
  package_manager: rubygems
  cwe:
  - CWE-79
  disclosed_date: 2012-09-07
  created_date: 2012-09-07
  last_modified_date: 2012-09-07
  credit:
  - Unknown
  references:
  - http://rubysec.com/advisories/OSVDB-90945
  source_url: https://snyk.io/vuln/SNYK-RUBY-LOOFAH-20039
- id: snykio:rubygems:loofah:20463
  title: Cross-site Scripting (XSS)
  description: |+
    [`loofah`][1] is a general library for manipulating and transforming
    HTML/XML documents and fragments.

    Affected versions if this package are vulnerable to Cross-Site Scripting
    (XSS) attacks.



    [1]: https://rubygems.org/gems/loofah
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: loofah
  vulnerable_versions:
  - "<0.4.4"
  severity: medium
  package_manager: rubygems
  cwe:
  - CWE-79
  disclosed_date: 2010-01-31
  created_date: 2017-12-25
  last_modified_date: 2017-12-25
  credit:
  - John Pignata
  references:
  - https://github.com/flavorjones/loofah/blob/master/CHANGELOG.md#044-045-046-2010-02-01
  - https://github.com/flavorjones/loofah/commit/03e781b1a41d4bdda709639914b5a81b22e5e2bb
  - https://github.com/flavorjones/loofah/issues/17
  source_url: https://snyk.io/vuln/SNYK-RUBY-LOOFAH-20463
- id: snykio:rubygems:loofah:22023
  title: Cross-site Scripting (XSS)
  description: |+
    [Loofah][1] is a general library for manipulating and transforming
    HTML/XML documents and fragments.

    Affected versions fo this package are vulnerable to Cross-site Scripting
    (XSS) attacks. It allows non-whitelisted attributes to be present in
    sanitized output when input with specially-crafted HTML fragments.

    The vulnerability is possible only when the following conditions are
    met:

    * when running on MRI or RBX,
    * in combination with libxml2 &gt;= 2.9.2.

    **Note**\: JRuby users are not affected.



    [1]: https://github.com/flavorjones/loofah
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: loofah
  vulnerable_versions:
  - "<2.2.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2018-8048
  cwe:
  - CWE-79
  disclosed_date: 2018-03-15
  created_date: 2018-03-21
  last_modified_date: 2018-03-21
  credit:
  - Shopify Application Security Team
  references:
  - https://github.com/flavorjones/loofah/issues/144
  source_url: https://snyk.io/vuln/SNYK-RUBY-LOOFAH-22023
- id: snykio:rubygems:loofah:72548
  title: Cross-site Scripting (XSS)
  description: |+
    [loofah][1] is a general library for manipulating and transforming
    HTML/XML documents and fragments.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks when a crafted `SVG` element is republished.



    [1]: https://rubygems.org/gems/loofah
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: loofah
  vulnerable_versions:
  - "<2.2.3"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2018-16468
  cwe:
  - CWE-79
  disclosed_date: 2018-10-27
  created_date: 2018-10-31
  last_modified_date: 2018-10-31
  credit:
  - Unknown
  references:
  - https://github.com/flavorjones/loofah/commit/71e4b5434fbcb2ad87643f0c9fecfc3a847943c4
  - https://github.com/flavorjones/loofah/issues/154
  source_url: https://snyk.io/vuln/SNYK-RUBY-LOOFAH-72548
