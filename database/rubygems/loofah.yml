---
- id: rubyadvisory:rubygems:loofah:CVE-2018-16468
  title: Loofah XSS Vulnerability
  description: |
    In the Loofah gem, through v2.2.2, unsanitized JavaScript may occur in
    sanitized output when a crafted SVG element is republished.
  affected_package: loofah
  patched_versions:
  - ">=  2.2.3"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2018-16468
  cvss_v3_score: 6.4
  disclosed_date: 2018-10-30
  created_date: 2018-10-30
  last_modified_date: 2018-10-30
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  - https://hackerone.com/reports/429267
  source_url: https://github.com/flavorjones/loofah/issues/154
- id: rubyadvisory:rubygems:loofah:CVE-2018-8048
  title: Loofah XSS Vulnerability
  description: |
    Loofah allows non-whitelisted attributes to be present in sanitized
    output when input with specially-crafted HTML fragments.
  affected_package: loofah
  patched_versions:
  - ">=  2.2.1"
  package_manager: rubygems
  cve:
  - CVE-2018-8048
  disclosed_date: 2018-03-16
  created_date: 2018-03-16
  last_modified_date: 2018-03-16
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://github.com/flavorjones/loofah/issues/144
- id: rubyadvisory:rubygems:loofah:CVE-2019-15587
  title: Loofah XSS Vulnerability
  description: |
    In the Loofah gem, through v2.3.0, unsanitized JavaScript may occur in
    sanitized output when a crafted SVG element is republished.
  affected_package: loofah
  patched_versions:
  - ">= 2.3.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2019-15587
  cvss_v3_score: 6.4
  disclosed_date: 2019-10-22
  created_date: 2019-10-22
  last_modified_date: 2019-10-22
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://github.com/flavorjones/loofah/issues/171
- id: rubyadvisory:rubygems:loofah:OSVDB-90945
  title: Loofah HTML and XSS injection vulnerability
  description: |
    Loofah Gem for Ruby contains a flaw that allows a remote cross-site
    scripting (XSS) attack. This flaw exists because the
    Loofah::HTML::Document\#text function passes properly sanitized
    user-supplied input to the Loofah::XssFoliate and
    Loofah::Helpers\#strip_tags functions which convert input back to
    text. This may allow an attacker to create a specially crafted
    request that would execute arbitrary script code in a user's browser
    within the trust relationship between their browser and the server.
  affected_package: loofah
  patched_versions:
  - ">=  0.4.6"
  severity: medium
  package_manager: rubygems
  osvdb: 90945
  cvss_v2_score: 5.0
  disclosed_date: 2012-09-08
  created_date: 2012-09-08
  last_modified_date: 2012-09-08
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: http://www.osvdb.org/show/osvdb/90945
- id: snykio:rubygems:loofah:20039
  title: Cross-site Scripting (XSS)
  description: |+
    [`loofah`][1] is a library for manipulating and transforming HTML/XML
    documents and fragments. It\'s built on top of Nokogiri and libxml2.

    Affected versions of this gem allow a remote cross-site scripting (XSS)
    attack. This is due to the `Loofah::HTML::Document\#text` function
    passing properly sanitized user-supplied input to the
    `Loofah::XssFoliate` and `Loofah::Helpers\#strip_tags` functions which
    convert input back to text.



    [1]: https://rubygems.org/gems/loofah
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: loofah
  vulnerable_versions:
  - "<0.4.6"
  severity: medium
  package_manager: rubygems
  cwe:
  - CWE-79
  disclosed_date: 2012-09-07
  created_date: 2012-09-07
  last_modified_date: 2012-09-07
  credit:
  - Unknown
  references:
  - http://rubysec.com/advisories/OSVDB-90945
  source_url: https://snyk.io/vuln/SNYK-RUBY-LOOFAH-20039
- id: snykio:rubygems:loofah:20463
  title: Cross-site Scripting (XSS)
  description: |+
    [`loofah`][1] is a general library for manipulating and transforming
    HTML/XML documents and fragments.

    Affected versions if this package are vulnerable to Cross-Site Scripting
    (XSS) attacks.



    [1]: https://rubygems.org/gems/loofah
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: loofah
  vulnerable_versions:
  - "<0.4.4"
  severity: medium
  package_manager: rubygems
  cwe:
  - CWE-79
  disclosed_date: 2010-01-31
  created_date: 2017-12-25
  last_modified_date: 2017-12-25
  credit:
  - John Pignata
  references:
  - https://github.com/flavorjones/loofah/blob/master/CHANGELOG.md#044-045-046-2010-02-01
  - https://github.com/flavorjones/loofah/commit/03e781b1a41d4bdda709639914b5a81b22e5e2bb
  - https://github.com/flavorjones/loofah/issues/17
  source_url: https://snyk.io/vuln/SNYK-RUBY-LOOFAH-20463
- id: snykio:rubygems:loofah:22023
  title: Cross-site Scripting (XSS)
  description: |+
    [Loofah][1] is a general library for manipulating and transforming
    HTML/XML documents and fragments.

    Affected versions fo this package are vulnerable to Cross-site Scripting
    (XSS) attacks. It allows non-whitelisted attributes to be present in
    sanitized output when input with specially-crafted HTML fragments.

    The vulnerability is possible only when the following conditions are
    met:

    * when running on MRI or RBX,
    * in combination with libxml2 &gt;= 2.9.2.

    **Note**\: JRuby users are not affected.



    [1]: https://github.com/flavorjones/loofah
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: loofah
  vulnerable_versions:
  - "<2.2.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2018-8048
  cwe:
  - CWE-79
  disclosed_date: 2018-03-15
  created_date: 2018-03-21
  last_modified_date: 2018-03-21
  credit:
  - Shopify Application Security Team
  references:
  - https://github.com/flavorjones/loofah/issues/144
  source_url: https://snyk.io/vuln/SNYK-RUBY-LOOFAH-22023
- id: snykio:rubygems:loofah:474102
  title: Cross-site Scripting (XSS)
  description: |+
    [loofah][1] is a general library for manipulating and transforming
    HTML/XML documents and fragments, built on top of Nokogiri.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Unsanitized JavaScript may occur in sanitized output when a
    crafted SVG element is republished.



    [1]: https://github.com/flavorjones/loofah
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: loofah
  vulnerable_versions:
  - "<2.3.1"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2019-15587
  cwe:
  - CWE-94
  disclosed_date: 2019-10-22
  created_date: 2019-10-23
  last_modified_date: 2019-10-23
  credit:
  - vxhex
  references:
  - https://github.com/flavorjones/loofah/commit/0c6617af440879ce97440f6eb6c58636456dc8ec
  - https://github.com/flavorjones/loofah/issues/171
  source_url: https://snyk.io/vuln/SNYK-RUBY-LOOFAH-474102
- id: snykio:rubygems:loofah:72548
  title: Cross-site Scripting (XSS)
  description: |+
    [loofah][1] is a general library for manipulating and transforming
    HTML/XML documents and fragments.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks when a crafted `SVG` element is republished.



    [1]: https://rubygems.org/gems/loofah
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: loofah
  vulnerable_versions:
  - "<2.2.3"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2018-16468
  cwe:
  - CWE-79
  disclosed_date: 2018-10-27
  created_date: 2018-10-31
  last_modified_date: 2018-10-31
  credit:
  - Unknown
  references:
  - https://github.com/flavorjones/loofah/commit/71e4b5434fbcb2ad87643f0c9fecfc3a847943c4
  - https://github.com/flavorjones/loofah/issues/154
  source_url: https://snyk.io/vuln/SNYK-RUBY-LOOFAH-72548
