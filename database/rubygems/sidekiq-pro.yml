---
- id: rubyadvisory:rubygems:sidekiq-pro:2015-07-17
  title: Sidekiq Pro Gem for Ruby CSRF in Job Filtering
  description: |
    Sidekiq::Web job filtering lacks CSRF protection. This issue
    is related to OSVDB-125675.
  affected_package: sidekiq-pro
  patched_versions:
  - ">= 2.0.6"
  package_manager: rubygems
  cve:
  - CVE-
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://github.com/mperham/sidekiq/commit/651400ed8f237118346895c99dc28ca94f3169d3
- id: rubyadvisory:rubygems:sidekiq-pro:2014-10-13
  title: 'Sidekiq Pro Gem for Ruby web/views/batch{,es}.erb Description Element XSS

'
  description: XSS via batch description in Sidekiq::Web
  affected_package: sidekiq-pro
  patched_versions:
  - ">= 1.9.1"
  package_manager: rubygems
  cve:
  - CVE-
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://github.com/mperham/sidekiq/commit/99b12fb50fe244c5a317f03f1bed9b333ec56ebe
- id: rubyadvisory:rubygems:sidekiq-pro:2015-05-11
  title: |
    Sidekiq Pro Gem for Ruby web/views/batch.erb Class and ErrorMessage Elements
    Reflected XSS
  description: 'XSS via batch failure error_class and error_message in Sidekiq::Web

'
  affected_package: sidekiq-pro
  patched_versions:
  - ">= 2.0.2"
  package_manager: rubygems
  cve:
  - CVE-
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://github.com/mperham/sidekiq/commit/a695ff347ae50f641dfc35189131b232ea0aa1db
- id: snykio:rubygems:sidekiq-pro:2015-07-16
  title: Cross-site Request Forgery (CSRF)
  description: |
    [`sidekiq-pro`][1] is the commercial version of [`sidekiq`][2], a
    background processing package for Ruby.

    Affected versions contain a vulnerability that allows forgery of POST
    requests on job filtering in `Sidekiq::Web`.



    [1]: http://sidekiq.org/products/pro
    [2]: https://rubygems.org/gems/sidekiq
    \n[`sidekiq-pro`][1] is the commercial version of [`sidekiq`][2], a
    background processing package for Ruby.

    Affected versions contain a vulnerability that allows forgery of POST
    requests on job filtering in `Sidekiq::Web`.



    [1]: http://sidekiq.org/products/pro
    [2]: https://rubygems.org/gems/sidekiq
    \n[`sidekiq-pro`][1] is the commercial version of [`sidekiq`][2], a
    background processing package for Ruby.

    Affected versions contain a vulnerability that allows forgery of POST
    requests on job filtering in `Sidekiq::Web`.



    [1]: http://sidekiq.org/products/pro
    [2]: https://rubygems.org/gems/sidekiq
  affected_package: sidekiq-pro
  vulnerable_versions:
  - "< 2.0.6"
  severity: medium
  package_manager: rubygems
  cwe:
  - CWE-352
  credit:
  - Unknown
  references:
  - http://rubysec.com/advisories/OSVDB-126331
  - https://github.com/mperham/sidekiq/commit/651400ed8f237118346895c99dc28ca94f3169d3
  source_url: https://snyk.io/vuln/SNYK-RUBY-SIDEKIQPRO-20234
- id: snykio:rubygems:sidekiq-pro:2015-05-10
  title: Cross-site Scripting (XSS)
  description: |+
    [`sidekiq-pro`][1] is the commercial version of [`sidekiq`][2], a
    background processing package for Ruby.

    Affected versions contain a vulnerability that allows Cross-site
    Scripting (XSS) using the batch failure `error_class` and
    `error_message` in `Sidekiq::Web`.



    [1]: http://sidekiq.org/products/pro
    [2]: https://rubygems.org/gems/sidekiq
    \n[`sidekiq-pro`][1] is the commercial version of [`sidekiq`][2], a
    background processing package for Ruby.

    Affected versions contain a vulnerability that allows Cross-site
    Scripting (XSS) using the batch failure `error_class` and
    `error_message` in `Sidekiq::Web`.



    [1]: http://sidekiq.org/products/pro
    [2]: https://rubygems.org/gems/sidekiq
    \n[`sidekiq-pro`][1] is the commercial version of [`sidekiq`][2], a
    background processing package for Ruby.

    Affected versions contain a vulnerability that allows Cross-site
    Scripting (XSS) using the batch failure `error_class` and
    `error_message` in `Sidekiq::Web`.



    [1]: http://sidekiq.org/products/pro
    [2]: https://rubygems.org/gems/sidekiq
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: sidekiq-pro
  vulnerable_versions:
  - "< 2.0.2"
  severity: medium
  package_manager: rubygems
  cwe:
  - CWE-79
  credit:
  - moneybird.com
  references:
  - http://rubysec.com/advisories/OSVDB-126329
  - https://github.com/mperham/sidekiq/commit/a695ff347ae50f641dfc35189131b232ea0aa1db
  source_url: https://snyk.io/vuln/SNYK-RUBY-SIDEKIQPRO-20219
- id: snykio:rubygems:sidekiq-pro:2014-10-12
  title: Cross-site Scripting (XSS)
  description: |+
    [`sidekiq-pro`][1] is the commercial version of [`sidekiq`][2], a
    background processing package for Ruby.

    Affected versions contain a vulnerability that allows Cross-site
    Scripting (XSS) using the batch description in `Sidekiq::Web`.



    [1]: http://sidekiq.org/products/pro
    [2]: https://rubygems.org/gems/sidekiq
    \n[`sidekiq-pro`][1] is the commercial version of [`sidekiq`][2], a
    background processing package for Ruby.

    Affected versions contain a vulnerability that allows Cross-site
    Scripting (XSS) using the batch description in `Sidekiq::Web`.



    [1]: http://sidekiq.org/products/pro
    [2]: https://rubygems.org/gems/sidekiq
    \n[`sidekiq-pro`][1] is the commercial version of [`sidekiq`][2], a
    background processing package for Ruby.

    Affected versions contain a vulnerability that allows Cross-site
    Scripting (XSS) using the batch description in `Sidekiq::Web`.



    [1]: http://sidekiq.org/products/pro
    [2]: https://rubygems.org/gems/sidekiq
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: sidekiq-pro
  vulnerable_versions:
  - "< 1.9.1"
  severity: medium
  package_manager: rubygems
  cwe:
  - CWE-79
  credit:
  - intercom.io
  references:
  - http://rubysec.com/advisories/OSVDB-126330
  - https://github.com/mperham/sidekiq/commit/99b12fb50fe244c5a317f03f1bed9b333ec56ebe
  source_url: https://snyk.io/vuln/SNYK-RUBY-SIDEKIQPRO-20197
