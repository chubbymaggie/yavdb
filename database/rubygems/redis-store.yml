---
- id: rubyadvisory:rubygems:redis-store:CVE-2017-1000248
  title: Unsafe objects can be loaded from Redis
  description: |
    Redis-store <=v1.3.0 allows unsafe objects to be loaded from Redis via the
    use of the Marshal serializer.
  affected_package: redis-store
  patched_versions:
  - ">= 1.4.0"
  package_manager: rubygems
  cve:
  - CVE-2017-1000248
  disclosed_date: 2017-11-16
  created_date: 2017-11-16
  last_modified_date: 2017-11-16
  credit:
  - Rubysec
  references:
  - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-1000248
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://github.com/redis-store/redis-store/commit/ce13252c26fcc40ed4935c9abfeb0ee0761e5704
- id: snykio:rubygems:redis-store:20452
  title: Deserialization of Untrusted Data
  description: |
    [`redis-store`][1] is a namespaced Rack::Session, Rack::Cache, I18n and
    cache Redis stores for Ruby web frameworks.

    Affected versions of the package are vulnerable to Deserialization of
    Untrusted Data.

    # Details   {#details}

    Serialization is a process of converting an object into a sequence of
    bytes which can be persisted to a disk or database or can be sent
    through streams. The reverse process of creating object from sequence of
    bytes is called deserialization. Serialization is commonly used for
    communication (sharing objects between multiple hosts) and persistence
    (store the object state in a file or a database). It is an integral part
    of popular protocols like *Remote Method Invocation (RMI)*, *Java
    Management Extension (JMX)*, *Java Messaging System (JMS)*, *Action
    Message Format (AMF)*, *Java Server Faces (JSF) ViewState*, etc.

    *Deserialization of untrusted data* ([CWE-502][2]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.



    [1]: https://rubygems.org/gems/redis-store
    [2]: https://cwe.mitre.org/data/definitions/502.html
  affected_package: redis-store
  vulnerable_versions:
  - "<1.4.0"
  severity: high
  package_manager: rubygems
  cve:
  - CVE-2017-1000248
  cwe:
  - CWE-502
  disclosed_date: 2017-08-10
  created_date: 2017-12-07
  last_modified_date: 2017-12-07
  credit:
  - Dylan Katz
  references:
  - https://github.com/redis-store/redis-store/commit/e0c1398d54a9661c8c70267c3a925ba6b192142e
  - https://github.com/redis-store/redis-store/issues/289
  - https://github.com/redis-store/redis-store/pull/290
  - https://nvd.nist.gov/vuln/detail/CVE-2017-1000248
  source_url: https://snyk.io/vuln/SNYK-RUBY-REDISSTORE-20452
