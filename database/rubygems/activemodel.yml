---
- id: rubyadvisory:rubygems:activemodel:CVE-2016-0753
  title: Possible Input Validation Circumvention in Active Model
  description: |
    There is a possible input validation circumvention vulnerability in Active
    Model. This vulnerability has been assigned the CVE identifier CVE-2016-0753.

    Versions Affected:  4.1.0 and newer
    Not affected:       4.0.13 and older
    Fixed Versions:     5.0.0.beta1.1, 4.2.5.1, 4.1.14.1

    Impact
    ------
    Code that uses Active Model based models (including Active Record models) and
    does not validate user input before passing it to the model can be subject to
    an attack where specially crafted input will cause the model to skip
    validations.

    Vulnerable code will look something like this:

    ```ruby
    SomeModel.new(unverified_user_input)
    ```

    Rails users using Strong Parameters are generally not impacted by this issue
    as they are encouraged to whitelist parameters and must specifically opt-out
    of input verification using the `permit!` method to allow mass assignment.

    For example, a vulnerable Rails application will have code that looks like
    this:

    ```ruby
    def create
      params.permit! # allow all parameters
      @user = User.new params[:users]
    end
    ```

    Active Model and Active Record objects are not equipped to handle arbitrary
    user input.  It is up to the application to verify input before passing it to
    Active Model models.  Rails users already have Strong Parameters in place to
    handle white listing, but applications using Active Model and Active Record
    outside of a Rails environment may be impacted.

    All users running an affected release should either upgrade or use one of the
    workarounds immediately.

    Releases
    --------
    The FIXED releases are available at the normal locations.

    Workarounds
    -----------
    There are several workarounds depending on the application.  Inside a Rails
    application, stop using `permit!`.  Outside a Rails application, either use
    Hash#slice to select the parameters you need, or integrate Strong Parameters
    with your application.

    Patches
    -------
    To aid users who aren't able to upgrade immediately we have provided patches for
    the two supported release series. They are in git-am format and consist of a
    single changeset.

    * 4-1-validation_skip.patch - Patch for 4.1 series
    * 4-2-validation_skip.patch - Patch for 4.2 series
    * 5-0-validation_skip.patch - Patch for 5.0 series

    Please note that only the 4.1.x and 4.2.x series are supported at present. Users
    of earlier unsupported releases are advised to upgrade as soon as possible as we
    cannot guarantee the continued availability of security fixes for unsupported
    releases.

    Credits
    -------
    Thanks to:

    [John Backus](https://github.com/backus) from BlockScore for reporting this!
  affected_package: activemodel
  unaffected_versions:
  - "<= 4.0.13"
  patched_versions:
  - ">= 5.0.0.beta1.1"
  - "~> 4.1.14  >= 4.1.14.1"
  - "~> 4.2.5  >= 4.2.5.1"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2016-0753
  cvss_v2_score: 5.0
  cvss_v3_score: 5.3
  disclosed_date: 2016-01-25
  created_date: 2016-01-25
  last_modified_date: 2016-01-25
  credit:
  - Rubysec
  references:
  - https://github.com/rubysec/ruby-advisory-db
  source_url: https://groups.google.com/forum/#!topic/rubyonrails-security/6jQVC1geukQ
- id: snykio:rubygems:activemodel:20260
  title: Input Validation Bypass
  description: |+
    [`activemodel`][1] is a toolkit for building modeling framework like
    Active Record. Affected versions of this Gem are vulnerable to Input
    Validation Bypass Attacks.



    [1]: https://rubygems.org/gems/activemodel
    \nCode that uses Active Model based models (including Active Record
    models) and does not validate user input before passing it to the model
    can be subject to an attack where specially crafted input will cause the
    model to skip validations.

    Vulnerable code will look something like this:

        SomeModel.new(unverified_user_input)
    {: .language-ruby}

    Rails users using Strong Parameters are generally not impacted by this
    issue as they are encouraged to whitelist parameters and must
    specifically opt-out of input verification using the `permit!` method to
    allow mass assignment. For example, a vulnerable Rails application will
    have code that looks like this:

        def create
        params.permit! # allow all parameters
        @user = User.new params[:users]
        end
    {: .language-ruby}

    Active Model and Active Record objects are not equipped to handle
    arbitrary user input. It is up to the application to verify input before
    passing it to Active Model models. Rails users already have Strong
    Parameters in place to handle white listing, but applications using
    Active Model and Active Record outside of a Rails environment may be
    impacted.

  affected_package: activemodel
  vulnerable_versions:
  - "< 4.1.14.1  > 4.0.13"
  - "< 4.2.5.1  >= 4.2"
  - "< 5.0.0.beta1.1  >= 4.3"
  severity: medium
  package_manager: rubygems
  cve:
  - CVE-2016-0753
  cwe:
  - CWE-284
  disclosed_date: 2016-01-24
  created_date: 2016-01-24
  last_modified_date: 2016-01-24
  credit:
  - John Backus
  references:
  - http://rubysec.com/advisories/CVE-2016-0753
  - https://groups.google.com/forum/#!topic/rubyonrails-security/6jQVC1geukQ
  source_url: https://snyk.io/vuln/SNYK-RUBY-ACTIVEMODEL-20260
