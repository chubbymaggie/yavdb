---
- id: snykio:go:code.cloudfoundry.org/archiver:2018-05-27
  title: Arbitrary File Write via Archive Extraction (Zip Slip)
  description: |
    [`code.cloudfoundry.org/archiver`][1] is Utilities for extracting and
    compressing tgz and zip files..

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        ++2018-04-15 22:04:29 .....           19           19  good.txt
        ++2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://github.com/cloudfoundry/archiver
    \n[`code.cloudfoundry.org/archiver`][1] is Utilities for extracting and
    compressing tgz and zip files..

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        ++2018-04-15 22:04:29 .....           19           19  good.txt
        ++2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://github.com/cloudfoundry/archiver
    \n[`code.cloudfoundry.org/archiver`][1] is Utilities for extracting and
    compressing tgz and zip files..

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        ++2018-04-15 22:04:29 .....           19           19  good.txt
        ++2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://github.com/cloudfoundry/archiver
    \n[`code.cloudfoundry.org/archiver`][1] is Utilities for extracting and
    compressing tgz and zip files..

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        ++2018-04-15 22:04:29 .....           19           19  good.txt
        ++2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://github.com/cloudfoundry/archiver
    \n[`code.cloudfoundry.org/archiver`][1] is Utilities for extracting and
    compressing tgz and zip files..

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        ++2018-04-15 22:04:29 .....           19           19  good.txt
        ++2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://github.com/cloudfoundry/archiver
    \n[`code.cloudfoundry.org/archiver`][1] is Utilities for extracting and
    compressing tgz and zip files..

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        ++2018-04-15 22:04:29 .....           19           19  good.txt
        ++2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://github.com/cloudfoundry/archiver
  affected_package: code.cloudfoundry.org/archiver
  vulnerable_versions:
  - "*"
  severity: high
  package_manager: go
  cwe:
  - CWE-29
  credit:
  - M. Hanselmann
  references:
  - https://github.com/cloudfoundry/archiver/commit/09b5706aa9367972c09144a450bb4523049ee840
  source_url: https://snyk.io/vuln/SNYK-GOLANG-CODECLOUDFOUNDRYORGARCHIVER-50073
