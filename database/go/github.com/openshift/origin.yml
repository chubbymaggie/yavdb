---
- id: snykio:go:github.com/openshift/origin:2016-07-13
  title: Information Exposure
  description: |
    Affected version of [`github.com/openshift/origin`][1] are vulnerable to
    Information Exposure. The API server in Kubernetes, as used in Red Hat
    OpenShift Enterprise 3.2, in a multi tenant environment allows remote
    authenticated users with knowledge of other project names to obtain
    sensitive project and user information via vectors related to the
    watch-cache list.



    [1]: https://github.com/openshift/origin
    \nAffected version of [`github.com/openshift/origin`][1] are vulnerable to
    Information Exposure. The API server in Kubernetes, as used in Red Hat
    OpenShift Enterprise 3.2, in a multi tenant environment allows remote
    authenticated users with knowledge of other project names to obtain
    sensitive project and user information via vectors related to the
    watch-cache list.



    [1]: https://github.com/openshift/origin
  affected_package: github.com/openshift/origin
  vulnerable_versions:
  - "<1.2.0 || =1.3.0-alpha.0"
  severity: medium
  package_manager: go
  cve:
  - CVE-2016-5392
  cwe:
  - CWE-200
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-5392
  - https://access.redhat.com/errata/RHSA-2016:1427
  - https://bugzilla.redhat.com/show_bug.cgi?id=1356195
  source_url: https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMOPENSHIFTORIGIN-50016
- id: snykio:go:github.com/openshift/origin:2016-03-17
  title: Information Exposure
  description: |
    Affected version of [`github.com/openshift/origin`][1] are vulnerable to
    Information Exposure. HAproxy in Red Hat OpenShift Enterprise 3.2 and
    OpenShift Origin allows local users to obtain the internal IP address of
    a pod by reading the `OPENSHIFT_[namespace]_SERVERID` cookie.



    [1]: https://github.com/openshift/origin
    \nAffected version of [`github.com/openshift/origin`][1] are vulnerable to
    Information Exposure. HAproxy in Red Hat OpenShift Enterprise 3.2 and
    OpenShift Origin allows local users to obtain the internal IP address of
    a pod by reading the `OPENSHIFT_[namespace]_SERVERID` cookie.



    [1]: https://github.com/openshift/origin
  affected_package: github.com/openshift/origin
  vulnerable_versions:
  - "<1.2.0-rc1"
  severity: medium
  package_manager: go
  cve:
  - CVE-2016-3711
  cwe:
  - CWE-200
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-3711
  - https://github.com/openshift/origin/commit/2d4cec7abefee8af1bfefa886541b370618d817c
  - https://access.redhat.com/errata/RHSA-2016:1064
  - https://github.com/openshift/origin/pull/8334
  source_url: https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMOPENSHIFTORIGIN-50038
- id: snykio:go:github.com/openshift/origin:2016-03-09
  title: Arbitrary Command Execution
  description: |
    Affected version of [`github.com/openshift/origin`][1] are vulnerable to
    Arbitrary Command Execution. Red Hat OpenShift Enterprise 3.2 and
    OpenShift Origin allow remote authenticated users to execute commands
    with root privileges by changing the root password in an sti builder
    image.



    [1]: https://github.com/openshift/origin
    \nAffected version of [`github.com/openshift/origin`][1] are vulnerable to
    Arbitrary Command Execution. Red Hat OpenShift Enterprise 3.2 and
    OpenShift Origin allow remote authenticated users to execute commands
    with root privileges by changing the root password in an sti builder
    image.



    [1]: https://github.com/openshift/origin
  affected_package: github.com/openshift/origin
  vulnerable_versions:
  - "<1.1.4"
  severity: high
  package_manager: go
  cve:
  - CVE-2016-2160
  cwe:
  - CWE-264
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-2160
  - https://github.com/openshift/origin/commit/2d0350c84150d88be4d1ac181694366832a55709
  - https://access.redhat.com/errata/RHSA-2016:1064
  - https://bugzilla.redhat.com/show_bug.cgi?id=1316127
  - https://github.com/openshift/origin/pull/7864
  source_url: https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMOPENSHIFTORIGIN-50002
- id: snykio:go:github.com/openshift/origin:2016-02-03
  title: Privilege Elevation
  description: |
    Affected version of [`github.com/openshift/origin`][1] are vulnerable to
    Privilege Elevation. The API server in Kubernetes might allow remote
    attackers to gain privileges by editing a build configuration to use a
    restricted strategy.



    [1]: https://github.com/openshift/origin
    \nAffected version of [`github.com/openshift/origin`][1] are vulnerable to
    Privilege Elevation. The API server in Kubernetes might allow remote
    attackers to gain privileges by editing a build configuration to use a
    restricted strategy.



    [1]: https://github.com/openshift/origin
  affected_package: github.com/openshift/origin
  vulnerable_versions:
  - "*"
  severity: high
  package_manager: go
  cve:
  - CVE-2016-1906
  cwe:
  - CWE-264
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-1906
  - https://github.com/openshift/origin/commit/d95ec085f03ecf10e8c424a4f0340ddb38891406
  - https://access.redhat.com/errata/RHSA-2016:0070
  - https://github.com/openshift/origin/issues/6556
  source_url: https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMOPENSHIFTORIGIN-50000
- id: snykio:go:github.com/openshift/origin:2015-08-25
  title: Denial of Service (DoS)
  description: |+
    Affected version of [`github.com/openshift/origin`][1] are vulnerable to
    Denial Of Service (DoS) attacks. The API server in OpenShift Origin
    1.0.5 allows remote attackers to cause a denial of service (master
    process crash) via crafted JSON data.



    [1]: https://github.com/openshift/origin
    \nAffected version of [`github.com/openshift/origin`][1] are vulnerable to
    Denial Of Service (DoS) attacks. The API server in OpenShift Origin
    1.0.5 allows remote attackers to cause a denial of service (master
    process crash) via crafted JSON data.



    [1]: https://github.com/openshift/origin
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: github.com/openshift/origin
  vulnerable_versions:
  - "<1.0.6"
  severity: medium
  package_manager: go
  cve:
  - CVE-2015-5250
  cwe:
  - CWE-20
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-5250
  - https://github.com/openshift/origin/commit/dace5075e31b74703e944b6b3ebe8836be8d1b9a
  - https://access.redhat.com/errata/RHSA-2015:1736
  - https://bugzilla.redhat.com/show_bug.cgi?id=1259867
  - https://github.com/openshift/origin/issues/4374
  source_url: https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMOPENSHIFTORIGIN-50033
- id: snykio:go:github.com/openshift/origin:2015-07-30
  title: Information Exposure
  description: |
    Affected version of [`github.com/openshift/origin`][1] are vulnerable to
    Information Exposure. openshift-node in OpenShift Origin 1.1.6 and
    earlier improperly stores router credentials as envvars in the pod when
    the --credentials option is used, which allows local users to obtain
    sensitive private key information by reading the systemd journal.



    [1]: https://github.com/openshift/origin
    \nAffected version of [`github.com/openshift/origin`][1] are vulnerable to
    Information Exposure. openshift-node in OpenShift Origin 1.1.6 and
    earlier improperly stores router credentials as envvars in the pod when
    the --credentials option is used, which allows local users to obtain
    sensitive private key information by reading the systemd journal.



    [1]: https://github.com/openshift/origin
  affected_package: github.com/openshift/origin
  vulnerable_versions:
  - "<1.5.0-alpha.3"
  severity: low
  package_manager: go
  cve:
  - CVE-2015-8945
  cwe:
  - CWE-255
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-8945
  - https://github.com/openshift/origin/commit/f762dc6f052a36b0dc2b72e23aa7895aac6a84f1
  - http://www.openwall.com/lists/oss-security/2016/07/13/10
  - https://github.com/openshift/origin/issues/3951
  source_url: https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMOPENSHIFTORIGIN-50042
