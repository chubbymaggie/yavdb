---
- id: snykio:go:github.com/robbert229/jwt:2015-03-31
  title: Timing Attack
  description: |
    Affected version of [`github.com/robbert229/jwt`][1] are vulnerable to
    Side-channel Attacks.

    The library uses the insecure, non-constant string comparison function
    `strings.Compare()`, instead of the time constant string comparison. As
    a result, the comparison will fail faster when the first characters in
    the HMAC are incorrect. An attacker can use this difference to perform a
    timing attack, essentially allowing them to guess the HMAC one character
    at a time.

    Similar vulnerability was previously found in [Google\'s Keyczar
    crytographic library][2].

    You can read more about timing attacks in Node.js on the [Snyk blog][3].



    [1]: https://github.com/dgrijalva/jwt-go
    [2]: https://rdist.root.org/2009/05/28/timing-attack-in-google-keyczar-library/
    [3]: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/
    \nAffected version of [`github.com/robbert229/jwt`][1] are vulnerable to
    Side-channel Attacks.

    The library uses the insecure, non-constant string comparison function
    `strings.Compare()`, instead of the time constant string comparison. As
    a result, the comparison will fail faster when the first characters in
    the HMAC are incorrect. An attacker can use this difference to perform a
    timing attack, essentially allowing them to guess the HMAC one character
    at a time.

    Similar vulnerability was previously found in [Google\'s Keyczar
    crytographic library][2].

    You can read more about timing attacks in Node.js on the [Snyk blog][3].



    [1]: https://github.com/dgrijalva/jwt-go
    [2]: https://rdist.root.org/2009/05/28/timing-attack-in-google-keyczar-library/
    [3]: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/
    \nAffected version of [`github.com/robbert229/jwt`][1] are vulnerable to
    Side-channel Attacks.

    The library uses the insecure, non-constant string comparison function
    `strings.Compare()`, instead of the time constant string comparison. As
    a result, the comparison will fail faster when the first characters in
    the HMAC are incorrect. An attacker can use this difference to perform a
    timing attack, essentially allowing them to guess the HMAC one character
    at a time.

    Similar vulnerability was previously found in [Google\'s Keyczar
    crytographic library][2].

    You can read more about timing attacks in Node.js on the [Snyk blog][3].



    [1]: https://github.com/dgrijalva/jwt-go
    [2]: https://rdist.root.org/2009/05/28/timing-attack-in-google-keyczar-library/
    [3]: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/
    \nAffected version of [`github.com/robbert229/jwt`][1] are vulnerable to
    Side-channel Attacks.

    The library uses the insecure, non-constant string comparison function
    `strings.Compare()`, instead of the time constant string comparison. As
    a result, the comparison will fail faster when the first characters in
    the HMAC are incorrect. An attacker can use this difference to perform a
    timing attack, essentially allowing them to guess the HMAC one character
    at a time.

    Similar vulnerability was previously found in [Google\'s Keyczar
    crytographic library][2].

    You can read more about timing attacks in Node.js on the [Snyk blog][3].



    [1]: https://github.com/dgrijalva/jwt-go
    [2]: https://rdist.root.org/2009/05/28/timing-attack-in-google-keyczar-library/
    [3]: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/
    \nAffected version of [`github.com/robbert229/jwt`][1] are vulnerable to
    Side-channel Attacks.

    The library uses the insecure, non-constant string comparison function
    `strings.Compare()`, instead of the time constant string comparison. As
    a result, the comparison will fail faster when the first characters in
    the HMAC are incorrect. An attacker can use this difference to perform a
    timing attack, essentially allowing them to guess the HMAC one character
    at a time.

    Similar vulnerability was previously found in [Google\'s Keyczar
    crytographic library][2].

    You can read more about timing attacks in Node.js on the [Snyk blog][3].



    [1]: https://github.com/dgrijalva/jwt-go
    [2]: https://rdist.root.org/2009/05/28/timing-attack-in-google-keyczar-library/
    [3]: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/
  affected_package: github.com/robbert229/jwt
  vulnerable_versions:
  - "*"
  severity: low
  package_manager: go
  cwe:
  - CWE-208
  credit:
  - Vetcher
  references:
  - https://github.com/robbert229/jwt/commit/ca1404ee6e83fcbafb66b09ed0d543850a15b654
  - https://github.com/robbert229/jwt/pull/13
  - https://github.com/robbert229/jwt/issues/12
  - https://www.reddit.com/r/golang/comments/2lu55c/restful_session_token/cly7mu6/
  source_url: https://snyk.io/vuln/SNYK-GOLANG-GITHUBCOMROBBERT229JWT-50051
