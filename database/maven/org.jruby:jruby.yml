---
- id: ossindex:maven:org.jruby:jruby:2012-11-28
  title: "[CVE-2012-5370]  Cryptographic Issues"
  description: JRuby computes hash values without properly restricting the ability
    to trigger hash collisions predictably, which allows context-dependent attackers
    to cause a denial of service (CPU consumption) via crafted input to an application
    that maintains a hash table, as demonstrated by a universal multicollision attack
    against the MurmurHash2 algorithm, a different vulnerability than CVE-2011-4838.
  affected_package: org.jruby:jruby
  vulnerable_versions:
  - "*"
  package_manager: maven
  cve:
  - CVE-2012-5370
  credit:
  - OSSIndex
  references:
  - http://2012.appsec-forum.ch/conferences/#c17
  - http://asfws12.files.wordpress.com/2012/11/asfws2012-jean_philippe_aumasson-martin_bosslet-hash_flooding_dos_reloaded.pdf
  - http://rhn.redhat.com/errata/RHSA-2013-0533.html
  - http://www.ocert.org/advisories/ocert-2012-001.html
  - https://bugzilla.redhat.com/show_bug.cgi?id=880671
  - https://www.131002.net/data/talks/appsec12_slides.pdf
  source_url: https://ossindex.net/resource/package/7015268762/vulnerabilities
- id: ossindex:maven:org.jruby:jruby:2011-12-30
  title: "[CVE-2011-4838]  Improper Input Validation"
  description: JRuby before 1.6.5.1 computes hash values without restricting the ability
    to trigger hash collisions predictably, which allows context-dependent attackers
    to cause a denial of service (CPU consumption) via crafted input to an application
    that maintains a hash table.
  affected_package: org.jruby:jruby
  vulnerable_versions:
  - 0.9.0
  - 0.9.1
  - 0.9.2
  - 0.9.8
  - 0.9.9
  - '1.0'
  - 1.0.0
  - 1.0.1
  - 1.0.2
  - 1.0.3
  - '1.1'
  - 1.1.1
  - 1.1.2
  - 1.1.3
  - 1.1.4
  - 1.1.5
  - 1.1.6
  - 1.2.0
  - 1.3.0
  - 1.3.1
  - 1.4.0
  - 1.4.1
  - 1.5.0
  - 1.5.1
  - 1.5.2
  - 1.5.3
  - 1.5.4
  - 1.5.5
  - 1.5.6
  - 1.6.0
  - 1.6.1
  - 1.6.2
  - 1.6.3
  - 1.6.4
  - 1.6.5
  package_manager: maven
  cve:
  - CVE-2011-4838
  credit:
  - OSSIndex
  references:
  - http://archives.neohapsis.com/archives/bugtraq/2011-12/0181.html
  - http://jruby.org/2011/12/27/jruby-1-6-5-1.html
  - http://rhn.redhat.com/errata/RHSA-2012-1232.html
  - http://secunia.com/advisories/47407
  - http://secunia.com/advisories/50084
  - http://security.gentoo.org/glsa/glsa-201207-06.xml
  - http://www.kb.cert.org/vuls/id/903934
  - http://www.nruns.com/_downloads/advisory28122011.pdf
  - http://www.ocert.org/advisories/ocert-2011-003.html
  - http://xforce.iss.net/xforce/xfdb/72019
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/72019
  source_url: https://ossindex.net/resource/package/7015268762/vulnerabilities
- id: ossindex:maven:org.jruby:jruby:2012-11-23
  title: '[CVE-2010-1330]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: The regular expression engine in JRuby before 1.4.1, when $KCODE is
    set to 'u', does not properly handle characters immediately after a UTF-8 character,
    which allows remote attackers to conduct cross-site scripting (XSS) attacks via
    a crafted string.
  affected_package: org.jruby:jruby
  vulnerable_versions:
  - 0.9.0
  - 0.9.1
  - 0.9.2
  - 0.9.8
  - 0.9.9
  - '1.0'
  - 1.0.0
  - 1.0.1
  - 1.0.2
  - 1.0.3
  - '1.1'
  - 1.1.1
  - 1.1.2
  - 1.1.3
  - 1.1.4
  - 1.1.5
  - 1.1.6
  - 1.2.0
  - 1.3.0
  - 1.3.1
  - 1.4.0
  package_manager: maven
  cve:
  - CVE-2010-1330
  credit:
  - OSSIndex
  references:
  - http://rhn.redhat.com/errata/RHSA-2011-1456.html
  - http://secunia.com/advisories/46891
  - http://www.jruby.org/2010/04/26/jruby-1-4-1-xss-vulnerability.html
  - http://www.osvdb.org/77297
  - http://xforce.iss.net/xforce/xfdb/80277
  - https://bugs.gentoo.org/show_bug.cgi?id=317435
  - https://bugzilla.redhat.com/show_bug.cgi?id=750306
  source_url: https://ossindex.net/resource/package/7015268762/vulnerabilities
- id: snykio:maven:org.jruby:jruby:2016-12-25
  title: Arbitrary Code Injection
  description: |
    [`org.jruby:jruby`][1] Race condition in
    hawtjni-runtime/src/main/java/org/fusesource/hawtjni/runtime/Library.java
    in HawtJNI before 1.8, when a custom library path is not specified,
    allows local users to execute arbitrary Java code by overwriting a
    temporary JAR file with a predictable name in /tmp.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jruby%22
    \n[`org.jruby:jruby`][1] Race condition in
    hawtjni-runtime/src/main/java/org/fusesource/hawtjni/runtime/Library.java
    in HawtJNI before 1.8, when a custom library path is not specified,
    allows local users to execute arbitrary Java code by overwriting a
    temporary JAR file with a predictable name in /tmp.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jruby%22
  affected_package: org.jruby:jruby
  vulnerable_versions:
  - "<= 1.7.4"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-2035
  cwe:
  - CWE-94
  credit:
  - Florian Weimer
  references:
  - https://bugzilla.redhat.com/CVE-2013-2035
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJRUBY-30135
- id: snykio:maven:org.jruby:jruby:2016-12-25
  title: Denial of Service and SQL Injection
  description: |
    [`org.jruby:jruby`][1] The JSON gem before 1.5.5, 1.6.x before 1.6.8,
    and 1.7.x before 1.7.7 for Ruby allows remote attackers to cause a
    denial of service (resource consumption) or bypass the mass assignment
    protection mechanism via a crafted JSON document that triggers the
    creation of arbitrary Ruby symbols or certain internal objects, as
    demonstrated by conducting a SQL injection attack against Ruby on Rails,
    aka \"Unsafe Object Creation Vulnerability.\"



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jruby%22
    \n[`org.jruby:jruby`][1] The JSON gem before 1.5.5, 1.6.x before 1.6.8,
    and 1.7.x before 1.7.7 for Ruby allows remote attackers to cause a
    denial of service (resource consumption) or bypass the mass assignment
    protection mechanism via a crafted JSON document that triggers the
    creation of arbitrary Ruby symbols or certain internal objects, as
    demonstrated by conducting a SQL injection attack against Ruby on Rails,
    aka \"Unsafe Object Creation Vulnerability.\"



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jruby%22
  affected_package: org.jruby:jruby
  vulnerable_versions:
  - ">= 1.7.2"
  severity: high
  package_manager: maven
  cve:
  - CVE-2013-0269
  cwe:
  - CWE-20
  credit:
  - Thomas Hollstegge
  - Ben Murphy
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-0269
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJRUBY-30132
- id: snykio:maven:org.jruby:jruby:2016-12-25
  title: XML External Entity (XXE) Injection
  description: |+
    [`org.jruby:jruby`][1] lib/rexml/text.rb in the REXML parser in Ruby
    before 1.9.3-p392 allows remote attackers to cause a denial of service
    (memory consumption and crash) via crafted text nodes in an XML
    document, aka an XML Entity Expansion (XEE) attack.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jruby%22
    \n[`org.jruby:jruby`][1] lib/rexml/text.rb in the REXML parser in Ruby
    before 1.9.3-p392 allows remote attackers to cause a denial of service
    (memory consumption and crash) via crafted text nodes in an XML
    document, aka an XML Entity Expansion (XEE) attack.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jruby%22
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: org.jruby:jruby
  vulnerable_versions:
  - ">= 1.7.2"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-1821
  cwe:
  - CWE-20
  credit:
  - Ben Murphy
  references:
  - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-1821
  - https://www.ruby-lang.org/en/news/2013/02/22/rexml-dos-2013-02-22/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJRUBY-30133
- id: snykio:maven:org.jruby:jruby:2016-12-25
  title: XML External Entities (XXE)
  description: |
    [`org.jruby:jruby`][1] The ActiveSupport::XmlMini\_JDOM backend in
    lib/active\_support/xml\_mini/jdom.rb in the Active Support component in
    Ruby on Rails 3.0.x and 3.1.x before 3.1.12 and 3.2.x before 3.2.13,
    when JRuby is used, does not properly restrict the capabilities of the
    XML parser, which allows remote attackers to read arbitrary files or
    cause a denial of service (resource consumption) via vectors involving
    (1) an external DTD or (2) an external entity declaration in conjunction
    with an entity reference.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jruby%22
    \n[`org.jruby:jruby`][1] The ActiveSupport::XmlMini\_JDOM backend in
    lib/active\_support/xml\_mini/jdom.rb in the Active Support component in
    Ruby on Rails 3.0.x and 3.1.x before 3.1.12 and 3.2.x before 3.2.13,
    when JRuby is used, does not properly restrict the capabilities of the
    XML parser, which allows remote attackers to read arbitrary files or
    cause a denial of service (resource consumption) via vectors involving
    (1) an external DTD or (2) an external entity declaration in conjunction
    with an entity reference.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jruby%22
  affected_package: org.jruby:jruby
  vulnerable_versions:
  - "<= 3.1.11"
  - ">= 3.2 <= 3.2.12"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-1856
  cwe:
  - CWE-20
  credit:
  - Ben Murphy
  references:
  - http://www.openwall.com/lists/oss-security/2013/03/18/4
  - http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-1856
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJRUBY-30134
- id: snykio:maven:org.jruby:jruby:2015-02-26
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.jruby:jruby`][1] The regular expression engine in JRuby before
    1.4.1, when $KCODE is set to \'u\', does not properly handle characters
    immediately after a UTF-8 character, which allows remote attackers to
    conduct cross-site scripting (XSS) attacks via a crafted string.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jruby%22
    \n[`org.jruby:jruby`][1] The regular expression engine in JRuby before
    1.4.1, when $KCODE is set to \'u\', does not properly handle characters
    immediately after a UTF-8 character, which allows remote attackers to
    conduct cross-site scripting (XSS) attacks via a crafted string.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jruby%22
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.jruby:jruby
  vulnerable_versions:
  - "< 1.4.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2010-1330
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-1330
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJRUBY-31215
- id: victims:maven:org.jruby:jruby:date
  title: 'ruby: entity expansion DoS vulnerability in REXML'
  affected_package: org.jruby:jruby
  vulnerable_versions:
  - "==1.7.2"
  severity: medium
  package_manager: maven
  cve:
  - 2013-1821
  credit:
  - Victims CVE Database
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2013/1821.yaml
- id: victims:maven:org.jruby:jruby:date
  title: 'JRuby: File access with XML External Entities'
  description: 'There is a vulnerability in the JDOM backend to ActiveSupport''s XML
    parser.  This could allow an attacker to perform a denial of service attack or
    gain access to files stored on the application server.  This vulnerability has
    been assigned the CVE identifier CVE-2013-1856.

'
  affected_package: org.jruby:jruby
  vulnerable_versions:
  - "<=3.1.11"
  - "<=3.2.12"
  - '3.2'
  patched_versions:
  - ">=3.1.12"
  - "<=3.2.13"
  - '3.2'
  severity: medium
  package_manager: maven
  cve:
  - 2013-1856
  credit:
  - Victims CVE Database
  references:
  - http://www.openwall.com/lists/oss-security/2013/03/18/4
  - http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-1856
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2013/1856.yaml
- id: victims:maven:org.jruby:jruby:date
  title: 'HawtJNI: predictable temporary file name leading to local arbitrary code
    execution'
  description: '"The HawtJNI Library class wrote native libraries to a predictable
    file name  in /tmp when the native libraries were bundled in a JAR file, and no
    custom  library path was specified. A local attacker could overwrite these native  libraries
    with malicious versions during the window between when HawtJNI  writes them, and
    when they are executed."

'
  affected_package: org.jruby:jruby
  vulnerable_versions:
  - "<=1.7.4"
  patched_versions:
  - ">=1.7.5"
  severity: low
  package_manager: maven
  cve:
  - 2013-2035
  credit:
  - Victims CVE Database
  references:
  - https://bugzilla.redhat.com/CVE-2013-2035
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2013/2035.yaml
- id: victims:maven:org.jruby:jruby:date
  title: 'rubygem-json: Denial of Service and SQL Injection'
  affected_package: org.jruby:jruby
  vulnerable_versions:
  - "==1.7.2"
  severity: high
  package_manager: maven
  cve:
  - 2013-0269
  credit:
  - Victims CVE Database
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-0269
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2013/0269.yaml
