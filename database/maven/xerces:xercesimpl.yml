---
- id: snykio:maven:xerces:xercesimpl:2012-06-06
  title: XML Parsing Infinite Loop
  description: |
    [`xerces:xercesImpl`][1] XML parsing infinite loop Unspecified
    vulnerability in the Java Runtime Environment (JRE) component in Oracle
    Java SE 7 update 4 and earlier, and 6 update 32 and earlier, allows
    remote attackers to affect availability, related to JAXP.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22xercesImpl%22
    \n[`xerces:xercesImpl`][1] XML parsing infinite loop Unspecified
    vulnerability in the Java Runtime Environment (JRE) component in Oracle
    Java SE 7 update 4 and earlier, and 6 update 32 and earlier, allows
    remote attackers to affect availability, related to JAXP.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22xercesImpl%22
  affected_package: xerces:xercesimpl
  vulnerable_versions:
  - "<= 2.3.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2012-1724
  cwe:
  - CWE-94
  credit:
  - Adam Gowdiak
  - Andrei Costin
  - Chris Ries
  - Clayton Smith
  references:
  - https://bugzilla.redhat.com/CVE-2012-1724
  - http://svn.apache.org/viewvc?view=revision&revision=319059
  - http://www.oracle.com/technetwork/topics/security/javacpujun2012-1515912.html
  source_url: https://snyk.io/vuln/SNYK-JAVA-XERCES-30182
- id: snykio:maven:xerces:xercesimpl:2013-10-15
  title: Denial of Service (DoS)
  description: |+
    [`xerces:xercesImpl`][1] is a complete framework for building parser
    components and configurations that is extremely modular and easy to
    program.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks, which is caused by the way the JRE processes XML files. A
    remote attacker could use this flaw to supply crafted XML that would
    lead to a denial of service.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22xercesImpl%22
    \n[`xerces:xercesImpl`][1] is a complete framework for building parser
    components and configurations that is extremely modular and easy to
    program.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks, which is caused by the way the JRE processes XML files. A
    remote attacker could use this flaw to supply crafted XML that would
    lead to a denial of service.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22xercesImpl%22
    \n[`xerces:xercesImpl`][1] is a complete framework for building parser
    components and configurations that is extremely modular and easy to
    program.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks, which is caused by the way the JRE processes XML files. A
    remote attacker could use this flaw to supply crafted XML that would
    lead to a denial of service.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22xercesImpl%22
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: xerces:xercesimpl
  vulnerable_versions:
  - "<= 2.11.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-4002
  cwe:
  - CWE-94
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/CVE-2013-4002
  - http://svn.apache.org/viewvc?view=revision&revision=1499506
  source_url: https://snyk.io/vuln/SNYK-JAVA-XERCES-30183
- id: snykio:maven:xerces:xercesimpl:2017-08-29
  title: Denial of Service (DoS)
  description: |+
    Affected versions of [`xerces:xercesImpl`][1] are vulnerable to Denial
    of Service (DoS) attacks. An attacker may be able to force the target
    server to parse an FTP URL, which points to an FTP server controller by
    the attacker. When the target server is mid way through fetching the FTP
    resources, the attackers malicious FTP server will exit the process and
    will leave the thread hanging in the target server.

    It is possible to conduvt this attack only if the following conditions
    are met:

    * An attacker can pass an URL parameter that points to a controlled FTP
      server to the target.
    * Target server uses vulnerable component(s) to fetch the resource
      specified by the attacker.
    * Target server does not prevent fetching of FTP URI resources.



    [1]: https://xerces.apache.org/
    \nAffected versions of [`xerces:xercesImpl`][1] are vulnerable to Denial
    of Service (DoS) attacks. An attacker may be able to force the target
    server to parse an FTP URL, which points to an FTP server controller by
    the attacker. When the target server is mid way through fetching the FTP
    resources, the attackers malicious FTP server will exit the process and
    will leave the thread hanging in the target server.

    It is possible to conduvt this attack only if the following conditions
    are met:

    * An attacker can pass an URL parameter that points to a controlled FTP
      server to the target.
    * Target server uses vulnerable component(s) to fetch the resource
      specified by the attacker.
    * Target server does not prevent fetching of FTP URI resources.



    [1]: https://xerces.apache.org/
    \nAffected versions of [`xerces:xercesImpl`][1] are vulnerable to Denial
    of Service (DoS) attacks. An attacker may be able to force the target
    server to parse an FTP URL, which points to an FTP server controller by
    the attacker. When the target server is mid way through fetching the FTP
    resources, the attackers malicious FTP server will exit the process and
    will leave the thread hanging in the target server.

    It is possible to conduvt this attack only if the following conditions
    are met:

    * An attacker can pass an URL parameter that points to a controlled FTP
      server to the target.
    * Target server uses vulnerable component(s) to fetch the resource
      specified by the attacker.
    * Target server does not prevent fetching of FTP URI resources.



    [1]: https://xerces.apache.org/
    \nAffected versions of [`xerces:xercesImpl`][1] are vulnerable to Denial
    of Service (DoS) attacks. An attacker may be able to force the target
    server to parse an FTP URL, which points to an FTP server controller by
    the attacker. When the target server is mid way through fetching the FTP
    resources, the attackers malicious FTP server will exit the process and
    will leave the thread hanging in the target server.

    It is possible to conduvt this attack only if the following conditions
    are met:

    * An attacker can pass an URL parameter that points to a controlled FTP
      server to the target.
    * Target server uses vulnerable component(s) to fetch the resource
      specified by the attacker.
    * Target server does not prevent fetching of FTP URI resources.



    [1]: https://xerces.apache.org/
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: xerces:xercesimpl
  vulnerable_versions:
  - "<= 2.11.0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-10355
  cwe:
  - CWE-400
  credit:
  - Unknown
  references:
  - https://blogs.securiteam.com/index.php/archives/3271
  - https://nvd.nist.gov/vuln/detail/CVE-2017-10355
  source_url: https://snyk.io/vuln/SNYK-JAVA-XERCES-31497
