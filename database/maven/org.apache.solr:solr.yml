---
- id: ossindex:maven:org.apache.solr:solr:2009-10-28
  title: '[CVE-2009-3821]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in the Apache Solr Search
    (solr) extension 1.0.0 for TYPO3 allows remote attackers to inject arbitrary web
    script or HTML via unspecified vectors.
  affected_package: org.apache.solr:solr
  vulnerable_versions:
  - 1.0.0
  package_manager: maven
  cve:
  - CVE-2009-3821
  credit:
  - OSSIndex
  references:
  - http://typo3.org/teams/security/security-bulletins/typo3-sa-2009-014/
  source_url: https://ossindex.net/resource/package/7015343899/vulnerabilities
- id: ossindex:maven:org.apache.solr:solr:2013-10-28
  title: '[CVE-2013-6289]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in the Apache Solr for TYPO3
    (solr) extension before 2.8.3 for TYPO3 allows remote attackers to inject arbitrary
    web script or HTML via unspecified vectors.
  affected_package: org.apache.solr:solr
  vulnerable_versions:
  - '1.0'
  - 1.3.0
  - 1.3.1
  - 2.1.0
  - 2.2.0
  - 2.2.1
  - 2.2.2
  - 2.8.0
  - 2.8.1
  - 2.8.2
  package_manager: maven
  cve:
  - CVE-2013-6289
  credit:
  - OSSIndex
  references:
  - http://secunia.com/advisories/54978
  - http://typo3.org/extensions/repository/view/solr
  - http://typo3.org/teams/security/security-bulletins/typo3-extensions/typo3-ext-sa-2013-009/
  - http://www.securityfocus.com/bid/62674
  source_url: https://ossindex.net/resource/package/7015343899/vulnerabilities
- id: ossindex:maven:org.apache.solr:solr:2013-10-28
  title: "[CVE-2013-6288] Unspecified vulnerability in the Apache Solr for TYPO3 (solr)
    extension before 2..."
  description: Unspecified vulnerability in the Apache Solr for TYPO3 (solr) extension
    before 2.8.3 for TYPO3 has unknown impact and remote attack vectors, related to
    "Insecure Unserialize."
  affected_package: org.apache.solr:solr
  vulnerable_versions:
  - '1.0'
  - 1.3.0
  - 1.3.1
  - 2.1.0
  - 2.2.0
  - 2.2.1
  - 2.2.2
  - 2.8.0
  - 2.8.1
  - 2.8.2
  package_manager: maven
  cve:
  - CVE-2013-6288
  credit:
  - OSSIndex
  references:
  - http://secunia.com/advisories/54978
  - http://typo3.org/extensions/repository/view/solr
  - http://typo3.org/teams/security/security-bulletins/typo3-extensions/typo3-ext-sa-2013-009/
  - http://www.securityfocus.com/bid/62674
  source_url: https://ossindex.net/resource/package/7015343899/vulnerabilities
- id: ossindex:maven:org.apache.solr:solr:2013-12-07
  title: "[CVE-2013-6408] The DocumentAnalysisRequestHandler in Apache Solr before
    4.3.1 does not properly..."
  description: 'The DocumentAnalysisRequestHandler in Apache Solr before 4.3.1 does
    not properly use the EmptyEntityResolver, which allows remote attackers to have
    an unspecified impact via XML data containing an external entity declaration in
    conjunction with an entity reference, related to an XML External Entity (XXE)
    issue.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2013-6407.'
  affected_package: org.apache.solr:solr
  vulnerable_versions:
  - ">=3.6.0 <=3.6.2"
  - ">=4.0.0 <4.3.1"
  package_manager: maven
  cve:
  - CVE-2013-6408
  credit:
  - OSSIndex
  references:
  - http://rhn.redhat.com/errata/RHSA-2013-1844.html
  - http://rhn.redhat.com/errata/RHSA-2014-0029.html
  - http://secunia.com/advisories/55542
  - http://secunia.com/advisories/59372
  - http://svn.apache.org/viewvc/lucene/dev/branches/branch_4x/solr/CHANGES.txt?view=markup
  - http://www.openwall.com/lists/oss-security/2013/11/29/2
  - https://issues.apache.org/jira/browse/SOLR-4881
  source_url: https://ossindex.net/resource/package/7015343899/vulnerabilities
- id: ossindex:maven:org.apache.solr:solr:2013-12-07
  title: "[CVE-2013-6407] The UpdateRequestHandler for XML in Apache Solr before 4.1
    allows remote attacke..."
  description: The UpdateRequestHandler for XML in Apache Solr before 4.1 allows remote
    attackers to have an unspecified impact via XML data containing an external entity
    declaration in conjunction with an entity reference, related to an XML External
    Entity (XXE) issue.
  affected_package: org.apache.solr:solr
  vulnerable_versions:
  - 3.6.0
  - 3.6.1
  - 3.6.2
  - 4.0.0
  package_manager: maven
  cve:
  - CVE-2013-6407
  credit:
  - OSSIndex
  references:
  - http://rhn.redhat.com/errata/RHSA-2013-1844.html
  - http://rhn.redhat.com/errata/RHSA-2014-0029.html
  - http://secunia.com/advisories/55542
  - http://secunia.com/advisories/59372
  - http://svn.apache.org/viewvc/lucene/dev/branches/branch_4x/solr/CHANGES.txt?view=markup
  - http://www.openwall.com/lists/oss-security/2013/11/29/2
  - https://issues.apache.org/jira/browse/SOLR-3895
  source_url: https://ossindex.net/resource/package/7015343899/vulnerabilities
- id: ossindex:maven:org.apache.solr:solr:2013-12-07
  title: '[CVE-2013-6397]  Improper Limitation of a Pathname to a Restricted Directory
    ("Path Traversal")'
  description: 'Directory traversal vulnerability in SolrResourceLoader in Apache
    Solr before 4.6 allows remote attackers to read arbitrary files via a .. (dot
    dot) or full pathname in the tr parameter to solr/select/, when the response writer
    (wt parameter) is set to XSLT.  NOTE: this can be leveraged using a separate XXE
    (XML eXternal Entity) vulnerability to allow access to files across restricted
    network boundaries.'
  affected_package: org.apache.solr:solr
  vulnerable_versions:
  - "<4.6.0"
  package_manager: maven
  cve:
  - CVE-2013-6397
  credit:
  - OSSIndex
  references:
  - http://lucene.apache.org/solr/4_6_0/changes/Changes.html
  - http://rhn.redhat.com/errata/RHSA-2013-1844.html
  - http://rhn.redhat.com/errata/RHSA-2014-0029.html
  - http://secunia.com/advisories/55730
  - http://secunia.com/advisories/59372
  - http://www.agarri.fr/kom/archives/2013/11/27/compromising_an_unreachable_solr_server_with_cve-2013-6397/index.html
  - http://www.openwall.com/lists/oss-security/2013/11/27/1
  - http://www.securityfocus.com/bid/63935
  - https://issues.apache.org/jira/browse/SOLR-4882
  source_url: https://ossindex.net/resource/package/7015343899/vulnerabilities
- id: ossindex:maven:org.apache.solr:solr:2013-12-07
  title: "[CVE-2012-6612] The (1) UpdateRequestHandler for XSLT or (2) XPathEntityProcessor
    in Apache Solr..."
  description: The (1) UpdateRequestHandler for XSLT or (2) XPathEntityProcessor in
    Apache Solr before 4.1 allows remote attackers to have an unspecified impact via
    XML data containing an external entity declaration in conjunction with an entity
    reference, related to an XML External Entity (XXE) issue, different vectors than
    CVE-2013-6407.
  affected_package: org.apache.solr:solr
  vulnerable_versions:
  - "<4.1.0"
  package_manager: maven
  cve:
  - CVE-2012-6612
  credit:
  - OSSIndex
  references:
  - http://rhn.redhat.com/errata/RHSA-2013-1844.html
  - http://rhn.redhat.com/errata/RHSA-2014-0029.html
  - http://svn.apache.org/viewvc/lucene/dev/branches/branch_4x/solr/CHANGES.txt?view=markup
  - https://issues.apache.org/jira/browse/SOLR-3895
  source_url: https://ossindex.net/resource/package/7015343899/vulnerabilities
- id: ossindex:maven:org.apache.solr:solr:2015-01-06
  title: '[CVE-2014-3628]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in the Admin UI Plugin / Stats
    page in Apache Solr 4.x before 4.10.3 allows remote attackers to inject arbitrary
    web script or HTML via the fieldvaluecache object.
  affected_package: org.apache.solr:solr
  vulnerable_versions:
  - 4.0.0
  - 4.1.0
  - 4.10.0
  - 4.10.1
  - 4.10.2
  - 4.2.0
  - 4.2.1
  - 4.3.0
  - 4.3.1
  - 4.4.0
  - 4.5.0
  - 4.5.1
  - 4.6.0
  - 4.6.1
  - 4.7.0
  - 4.7.1
  - 4.7.2
  - 4.8.0
  - 4.8.1
  - 4.9.0
  - 4.9.1
  package_manager: maven
  cve:
  - CVE-2014-3628
  credit:
  - OSSIndex
  references:
  - http://mail-archives.us.apache.org/mod_mbox/www-announce/201412.mbox/%3C54A1A7C7.2070804@apache.org%3E
  - http://secunia.com/advisories/62024
  source_url: https://ossindex.net/resource/package/7015343899/vulnerabilities
- id: ossindex:maven:org.apache.solr:solr:2016-02-15
  title: '[CVE-2015-8797]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in webapp/web/js/scripts/plugins.js
    in the stats page in the Admin UI in Apache Solr before 5.3.1 allows remote attackers
    to inject arbitrary web script or HTML via the entry parameter to a plugins/cache
    URI.
  affected_package: org.apache.solr:solr
  vulnerable_versions:
  - "<5.3.1"
  package_manager: maven
  cve:
  - CVE-2015-8797
  credit:
  - OSSIndex
  references:
  - http://www-01.ibm.com/support/docview.wss?uid=swg21975544
  - https://issues.apache.org/jira/browse/SOLR-7949
  source_url: https://ossindex.net/resource/package/7015343899/vulnerabilities
- id: ossindex:maven:org.apache.solr:solr:2016-02-15
  title: '[CVE-2015-8796]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in webapp/web/js/scripts/schema-browser.js
    in the Admin UI in Apache Solr before 5.3 allows remote attackers to inject arbitrary
    web script or HTML via a crafted schema-browse URL.
  affected_package: org.apache.solr:solr
  vulnerable_versions:
  - "<5.3.0"
  package_manager: maven
  cve:
  - CVE-2015-8796
  credit:
  - OSSIndex
  references:
  - https://issues.apache.org/jira/browse/SOLR-7920
  source_url: https://ossindex.net/resource/package/7015343899/vulnerabilities
- id: ossindex:maven:org.apache.solr:solr:2016-02-15
  title: '[CVE-2015-8795]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Multiple cross-site scripting (XSS) vulnerabilities in the Admin UI
    in Apache Solr before 5.1 allow remote attackers to inject arbitrary web script
    or HTML via crafted fields that are mishandled during the rendering of the (1)
    Analysis page, related to webapp/web/js/scripts/analysis.js or (2) Schema-Browser
    page, related to webapp/web/js/scripts/schema-browser.js.
  affected_package: org.apache.solr:solr
  vulnerable_versions:
  - "<5.1.0"
  package_manager: maven
  cve:
  - CVE-2015-8795
  credit:
  - OSSIndex
  references:
  - https://issues.apache.org/jira/browse/SOLR-7346
  source_url: https://ossindex.net/resource/package/7015343899/vulnerabilities
- id: ossindex:maven:org.apache.solr:solr:2017-07-07
  title: "[CVE-2017-7660]  Improper Authentication"
  description: Apache Solr uses a PKI based mechanism to secure inter-node communication
    when security is enabled. It is possible to create a specially crafted node name
    that does not exist as part of the cluster and point it to a malicious node. This
    can trick the nodes in cluster to believe that the malicious node is a member
    of the cluster. So, if Solr users have enabled BasicAuth authentication mechanism
    using the BasicAuthPlugin or if the user has implemented a custom Authentication
    plugin, which does not implement either "HttpClientInterceptorPlugin" or "HttpClientBuilderPlugin",
    his/her servers are vulnerable to this attack. Users who only use SSL without
    basic authentication or those who use Kerberos are not affected.
  affected_package: org.apache.solr:solr
  vulnerable_versions:
  - 5.3.0
  - 5.3.1
  - 5.3.2
  - 5.4.0
  - 5.4.1
  - 5.5.0
  - 5.5.1
  - 5.5.2
  - 5.5.3
  - 5.5.4
  - 6.0.0
  - 6.0.1
  - 6.1.0
  - 6.2.0
  - 6.2.1
  - 6.3.0
  - 6.4.0
  - 6.4.1
  - 6.4.2
  - 6.5.0
  - 6.5.1
  package_manager: maven
  cve:
  - CVE-2017-7660
  credit:
  - OSSIndex
  references:
  - http://mail-archives.us.apache.org/mod_mbox/www-announce/201707.mbox/%3CCAOOKt53EgrybaD%2BiSn-nBbvFdse-szhg%3DhMoDZuvUvyMme-Z%3Dg%40mail.gmail.com%3E
  - http://www.securityfocus.com/bid/99485
  source_url: https://ossindex.net/resource/package/7015343899/vulnerabilities
- id: snykio:maven:org.apache.solr:solr:2015-02-11
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.apache.solr:solr`][1] Cross-site Scripting (XSS) vulnerability in
    the Admin UI Plugin / Stats page in Apache Solr 4.x before 4.10.3 allows
    remote attackers to inject arbitrary web script or HTML via the
    fieldvaluecache object.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22solr%22
    \n[`org.apache.solr:solr`][1] Cross-site Scripting (XSS) vulnerability in
    the Admin UI Plugin / Stats page in Apache Solr 4.x before 4.10.3 allows
    remote attackers to inject arbitrary web script or HTML via the
    fieldvaluecache object.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22solr%22
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.apache.solr:solr
  vulnerable_versions:
  - ">= 4 < 4.10.3"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-3628
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-3628
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESOLR-30734
- id: snykio:maven:org.apache.solr:solr:2016-06-22
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.apache.solr:solr`][1] Multiple cross-site scripting (XSS)
    vulnerabilities in the Admin UI in Apache Solr before 5.1 allow remote
    attackers to inject arbitrary web script or HTML via crafted fields that
    are mishandled during the rendering of the (1) Analysis page, related to
    webapp/web/js/scripts/analysis.js or (2) Schema-Browser page, related to
    webapp/web/js/scripts/schema-browser.js.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22solr%22
    \n[`org.apache.solr:solr`][1] Multiple cross-site scripting (XSS)
    vulnerabilities in the Admin UI in Apache Solr before 5.1 allow remote
    attackers to inject arbitrary web script or HTML via crafted fields that
    are mishandled during the rendering of the (1) Analysis page, related to
    webapp/web/js/scripts/analysis.js or (2) Schema-Browser page, related to
    webapp/web/js/scripts/schema-browser.js.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22solr%22
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.apache.solr:solr
  vulnerable_versions:
  - "< 5.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2015-8795
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-8795
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESOLR-30735
- id: snykio:maven:org.apache.solr:solr:2016-06-22
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.apache.solr:solr`][1] Cross-site Scripting (XSS) vulnerability in
    webapp/web/js/scripts/schema-browser.js in the Admin UI in Apache Solr
    before 5.3 allows remote attackers to inject arbitrary web script or
    HTML via a crafted schema-browse URL.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22solr%22
    \n[`org.apache.solr:solr`][1] Cross-site Scripting (XSS) vulnerability in
    webapp/web/js/scripts/schema-browser.js in the Admin UI in Apache Solr
    before 5.3 allows remote attackers to inject arbitrary web script or
    HTML via a crafted schema-browse URL.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22solr%22
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.apache.solr:solr
  vulnerable_versions:
  - "<= 5.3"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2015-8796
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-8796
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESOLR-30736
- id: snykio:maven:org.apache.solr:solr:2016-06-22
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.apache.solr:solr`][1] Cross-site Scripting (XSS) vulnerability in
    webapp/web/js/scripts/plugins.js in the stats page in the Admin UI in
    Apache Solr before 5.3.1 allows remote attackers to inject arbitrary web
    script or HTML via the entry parameter to a plugins/cache URI.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22solr%22
    \n[`org.apache.solr:solr`][1] Cross-site Scripting (XSS) vulnerability in
    webapp/web/js/scripts/plugins.js in the stats page in the Admin UI in
    Apache Solr before 5.3.1 allows remote attackers to inject arbitrary web
    script or HTML via the entry parameter to a plugins/cache URI.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22solr%22
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.apache.solr:solr
  vulnerable_versions:
  - "< 5.3.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2015-8797
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-8797
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESOLR-30737
