---
- id: ossindex:maven:org.apache.wicket:wicket:2012-09-19
  title: '[CVE-2012-3373]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in Apache Wicket 1.4.x before
    1.4.21 and 1.5.x before 1.5.8 allows remote attackers to inject arbitrary web
    script or HTML via vectors involving a %00 sequence in an Ajax link URL associated
    with a Wicket app.
  affected_package: org.apache.wicket:wicket
  vulnerable_versions:
  - 1.4.1
  - 1.4.10
  - 1.4.11
  - 1.4.12
  - 1.4.13
  - 1.4.14
  - 1.4.15
  - 1.4.16
  - 1.4.17
  - 1.4.18
  - 1.4.19
  - 1.4.2
  - 1.4.20
  - 1.4.3
  - 1.4.4
  - 1.4.5
  - 1.4.6
  - 1.4.7
  - 1.4.8
  - 1.4.9
  - 1.5.0
  - 1.5.1
  - 1.5.2
  - 1.5.3
  - 1.5.4
  - 1.5.5
  - 1.5.6
  - 1.5.7
  package_manager: maven
  cve:
  - CVE-2012-3373
  credit:
  - OSSIndex
  references:
  - http://osvdb.org/85249
  - http://secunia.com/advisories/50555
  - http://wicket.apache.org/2012/09/06/cve-2012-3373.html
  - http://www.securityfocus.com/bid/55445
  - http://www.securitytracker.com/id?1027508
  - http://xforce.iss.net/xforce/xfdb/78321
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/78321
  source_url: https://ossindex.net/resource/package/7015339175/vulnerabilities
- id: ossindex:maven:org.apache.wicket:wicket:2016-04-12
  title: '[CVE-2015-5347]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in the getWindowOpenJavaScript
    function in org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow in
    Apache Wicket 1.5.x before 1.5.15, 6.x before 6.22.0, and 7.x before 7.2.0 might
    allow remote attackers to inject arbitrary web script or HTML via a ModalWindow
    title.
  affected_package: org.apache.wicket:wicket
  vulnerable_versions:
  - ">=1.5.0 <1.5.15"
  - ">=6.0.0 <6.22.0"
  - ">=7.0.0 <7.2.0"
  package_manager: maven
  cve:
  - CVE-2015-5347
  credit:
  - OSSIndex
  references:
  - http://wicket.apache.org/news/2016/03/01/cve-2015-5347.html
  - http://www.securitytracker.com/id/1035165
  - https://issues.apache.org/jira/browse/WICKET-6037
  source_url: https://ossindex.net/resource/package/7015339175/vulnerabilities
- id: ossindex:maven:org.apache.wicket:wicket:2016-04-12
  title: '[CVE-2015-7520]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Multiple cross-site scripting (XSS) vulnerabilities in the (1) RadioGroup
    and (2) CheckBoxMultipleChoice classes in Apache Wicket 1.5.x before 1.5.15, 6.x
    before 6.22.0, and 7.x before 7.2.0 allow remote attackers to inject arbitrary
    web script or HTML via a crafted "value" attribute in a <input> element.
  affected_package: org.apache.wicket:wicket
  vulnerable_versions:
  - ">=1.5.0 <1.5.15"
  - ">=6.0.0 <6.22.0"
  - ">=7.0.0 <7.2.0"
  package_manager: maven
  cve:
  - CVE-2015-7520
  credit:
  - OSSIndex
  references:
  - http://wicket.apache.org/news/2016/03/02/cve-2015-7520.html
  - http://www.securitytracker.com/id/1035166
  source_url: https://ossindex.net/resource/package/7015339175/vulnerabilities
- id: ossindex:maven:org.apache.wicket:wicket:2014-02-10
  title: "[CVE-2013-2055] Unspecified vulnerability in Apache Wicket 1.4.x before
    1.4.23, 1.5.x before 1.5..."
  description: Unspecified vulnerability in Apache Wicket 1.4.x before 1.4.23, 1.5.x
    before 1.5.11, and 6.x before 6.8.0 allows remote attackers to obtain sensitive
    information via vectors that cause raw HTML templates to be rendered without being
    processed and reading the information that is outside of wicket:panel markup.
  affected_package: org.apache.wicket:wicket
  vulnerable_versions:
  - 1.4.0
  - 1.4.1
  - 1.4.10
  - 1.4.11
  - 1.4.12
  - 1.4.13
  - 1.4.14
  - 1.4.15
  - 1.4.16
  - 1.4.17
  - 1.4.18
  - 1.4.19
  - 1.4.20
  - 1.4.21
  - 1.4.22
  - 1.5.0
  - 1.5.1
  - 1.5.10
  - 1.5.2
  - 1.5.3
  - 1.5.4
  - 1.5.5
  - 1.5.6
  - 1.5.7
  - 1.5.8
  - 1.5.9
  - 6.1.0
  - 6.1.1
  - 6.2.0
  - 6.3.0
  - 6.4.0
  - 6.5.0
  - 6.6.0
  - 6.7.0
  - 6.8.0
  package_manager: maven
  cve:
  - CVE-2013-2055
  credit:
  - OSSIndex
  references:
  - http://osvdb.org/102955
  - http://seclists.org/fulldisclosure/2014/Feb/38
  - http://www.securityfocus.com/bid/65431
  - https://wicket.apache.org/2013/05/17/wicket-6.8.0-released.html
  - https://wicket.apache.org/2014/02/06/cve-2013-2055.html
  source_url: https://ossindex.net/resource/package/7015339175/vulnerabilities
- id: ossindex:maven:org.apache.wicket:wicket:2012-03-23
  title: '[CVE-2012-1089]  Improper Limitation of a Pathname to a Restricted Directory
    ("Path Traversal")'
  description: Directory traversal vulnerability in Apache Wicket 1.4.x before 1.4.20
    and 1.5.x before 1.5.5 allows remote attackers to read arbitrary web-application
    files via a relative pathname in a URL for a Wicket resource that corresponds
    to a null package.
  affected_package: org.apache.wicket:wicket
  vulnerable_versions:
  - 1.4.0
  - 1.4.1
  - 1.4.10
  - 1.4.11
  - 1.4.12
  - 1.4.13
  - 1.4.14
  - 1.4.15
  - 1.4.16
  - 1.4.17
  - 1.4.18
  - 1.4.19
  - 1.4.2
  - 1.4.3
  - 1.4.4
  - 1.4.5
  - 1.4.6
  - 1.4.7
  - 1.4.8
  - 1.4.9
  - 1.5.0
  - 1.5.1
  - 1.5.2
  - 1.5.3
  - 1.5.4
  package_manager: maven
  cve:
  - CVE-2012-1089
  credit:
  - OSSIndex
  references:
  - http://osvdb.org/80301
  - http://wicket.apache.org/2012/03/22/wicket-cve-2012-1089.html
  - http://www.securityfocus.com/bid/52679
  - http://xforce.iss.net/xforce/xfdb/74276
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/74276
  source_url: https://ossindex.net/resource/package/7015339175/vulnerabilities
- id: ossindex:maven:org.apache.wicket:wicket:2012-03-23
  title: '[CVE-2012-0047]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in Apache Wicket 1.4.x before
    1.4.20 allows remote attackers to inject arbitrary web script or HTML via the
    wicket:pageMapName parameter.
  affected_package: org.apache.wicket:wicket
  vulnerable_versions:
  - 1.4.0
  - 1.4.1
  - 1.4.10
  - 1.4.11
  - 1.4.12
  - 1.4.13
  - 1.4.14
  - 1.4.15
  - 1.4.16
  - 1.4.17
  - 1.4.18
  - 1.4.19
  - 1.4.2
  - 1.4.3
  - 1.4.4
  - 1.4.5
  - 1.4.6
  - 1.4.7
  - 1.4.8
  - 1.4.9
  package_manager: maven
  cve:
  - CVE-2012-0047
  credit:
  - OSSIndex
  references:
  - http://archives.neohapsis.com/archives/bugtraq/2012-03/0112.html
  - http://osvdb.org/80300
  - http://wicket.apache.org/2012/03/22/wicket-cve-2012-0047.html
  - http://www.securitytracker.com/id?1026839
  - http://xforce.iss.net/xforce/xfdb/74273
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/74273
  source_url: https://ossindex.net/resource/package/7015339175/vulnerabilities
- id: ossindex:maven:org.apache.wicket:wicket:2011-08-29
  title: '[CVE-2011-2712]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in Apache Wicket 1.4.x before
    1.4.18, when setAutomaticMultiWindowSupport is enabled, allows remote attackers
    to inject arbitrary web script or HTML via unspecified parameters.
  affected_package: org.apache.wicket:wicket
  vulnerable_versions:
  - 1.4.0
  - 1.4.1
  - 1.4.10
  - 1.4.11
  - 1.4.12
  - 1.4.13
  - 1.4.14
  - 1.4.15
  - 1.4.16
  - 1.4.17
  - 1.4.2
  - 1.4.3
  - 1.4.4
  - 1.4.5
  - 1.4.6
  - 1.4.7
  - 1.4.8
  - 1.4.9
  package_manager: maven
  cve:
  - CVE-2011-2712
  credit:
  - OSSIndex
  references:
  - http://secunia.com/advisories/45727
  - http://securityreason.com/securityalert/8357
  - http://wicket.apache.org/2011/08/23/cve-2011-2712.html
  - http://www.securityfocus.com/archive/1/archive/1/519398/100/0/threaded
  - http://www.securityfocus.com/bid/49290
  - http://www.securitytracker.com/id?1025976
  - http://xforce.iss.net/xforce/xfdb/69394
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/69394
  source_url: https://ossindex.net/resource/package/7015339175/vulnerabilities
- id: snykio:maven:org.apache.wicket:wicket:2015-10-19
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.apache.wicket:wicket`][1] Affected versions of the package are
    vulnerable to Cross-site Scripting (XSS). It is possible for JavaScript
    statements to break out of a `<script>` tag in the rendered response.
    This might pose a security threat if the written JavaScript contains
    user provided data.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22wicket%22
    \n[`org.apache.wicket:wicket`][1] Affected versions of the package are
    vulnerable to Cross-site Scripting (XSS). It is possible for JavaScript
    statements to break out of a `<script>` tag in the rendered response.
    This might pose a security threat if the written JavaScript contains
    user provided data.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22wicket%22
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.apache.wicket:wicket
  vulnerable_versions:
  - ">= 1.4 < 1.4.22"
  - ">= 1.5 < 1.5.10"
  - ">= 1.6 < 6.4.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2012-5636
  cwe:
  - CWE-79
  credit:
  - Michael Riedel
  references:
  - https://wicket.apache.org/news/2013/03/03/cve-2012-5636.html
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEWICKET-31010
- id: snykio:maven:org.apache.wicket:wicket:2014-06-17
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.apache.wicket:wicket`][1] Cross-site Scripting (XSS) vulnerability
    in Apache Wicket 1.4.x before 1.4.21 and 1.5.x before 1.5.8 allows
    remote attackers to inject arbitrary web script or HTML via vectors
    involving a %00 sequence in an Ajax link URL associated with a Wicket
    app.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22wicket%22
    \n[`org.apache.wicket:wicket`][1] Cross-site Scripting (XSS) vulnerability
    in Apache Wicket 1.4.x before 1.4.21 and 1.5.x before 1.5.8 allows
    remote attackers to inject arbitrary web script or HTML via vectors
    involving a %00 sequence in an Ajax link URL associated with a Wicket
    app.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22wicket%22
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.apache.wicket:wicket
  vulnerable_versions:
  - ">= 1.4 < 1.4.21"
  - ">= 1.5 < 1.5.8"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2012-3373
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-3373
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEWICKET-31009
- id: snykio:maven:org.apache.wicket:wicket:2014-06-08
  title: Information Disclosure
  description: |
    [`org.apache.wicket:wicket`][1] Unspecified vulnerability in Apache
    Wicket 1.4.x before 1.4.23, 1.5.x before 1.5.11, and 6.x before 6.8.0
    allows remote attackers to obtain sensitive information via vectors that
    cause raw HTML templates to be rendered without being processed and
    reading the information that is outside of wicket:panel markup.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22wicket%22
    \n[`org.apache.wicket:wicket`][1] Unspecified vulnerability in Apache
    Wicket 1.4.x before 1.4.23, 1.5.x before 1.5.11, and 6.x before 6.8.0
    allows remote attackers to obtain sensitive information via vectors that
    cause raw HTML templates to be rendered without being processed and
    reading the information that is outside of wicket:panel markup.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22wicket%22
  affected_package: org.apache.wicket:wicket
  vulnerable_versions:
  - ">= 1.4 < 1.4.23"
  - ">= 1.5 < 1.5.11"
  - ">= 6 < 6.8.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-2055
  cwe:
  - CWE-200
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-2055
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEWICKET-31011
- id: snykio:maven:org.apache.wicket:wicket:2014-01-09
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.apache.wicket:wicket`][1] Cross-site Scripting (XSS) vulnerability
    in Apache Wicket 1.4.x before 1.4.18, when
    setAutomaticMultiWindowSupport is enabled, allows remote attackers to
    inject arbitrary web script or HTML via unspecified parameters.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22wicket%22
    \n[`org.apache.wicket:wicket`][1] Cross-site Scripting (XSS) vulnerability
    in Apache Wicket 1.4.x before 1.4.18, when
    setAutomaticMultiWindowSupport is enabled, allows remote attackers to
    inject arbitrary web script or HTML via unspecified parameters.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22wicket%22
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.apache.wicket:wicket
  vulnerable_versions:
  - ">= 1.4 < 1.4.18"
  severity: low
  package_manager: maven
  cve:
  - CVE-2011-2712
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-2712
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEWICKET-31007
- id: snykio:maven:org.apache.wicket:wicket:2014-01-09
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.apache.wicket:wicket`][1] Cross-site Scripting (XSS) vulnerability
    in Apache Wicket 1.4.x before 1.4.20 allows remote attackers to inject
    arbitrary web script or HTML via the wicket:pageMapName parameter.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22wicket%22
    \n[`org.apache.wicket:wicket`][1] Cross-site Scripting (XSS) vulnerability
    in Apache Wicket 1.4.x before 1.4.20 allows remote attackers to inject
    arbitrary web script or HTML via the wicket:pageMapName parameter.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22wicket%22
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.apache.wicket:wicket
  vulnerable_versions:
  - ">= 1.4.0 < 1.4.20"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2012-0047
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-0047
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEWICKET-31008
