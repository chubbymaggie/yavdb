---
- id: snykio:maven:org.apache.spark:spark-core_2.11:CVE-2017-12612
  title: Deserialization of Untrusted Data
  description: "[org.apache.spark:spark-core\\_2.11][1] is a general cluster computing\nsystem
    for Big Data.\n\nAffected versions of this package are vulnerable to Deserialization
    of\nUntrusted Data. The launcher API performs unsafe deserialization of data\nreceived
    by its socket. This makes applications launched\nprogrammatically using the launcher
    API potentially vulnerable to\narbitrary code execution by an attacker with access
    to any user account\non the local machine.\n\n\n\n[1]: https://github.com/apache/spark\n\\nSerialization
    is a process of converting an object into a sequence of\nbytes which can be persisted
    to a disk or database or can be sent\nthrough streams. The reverse process of
    creating object from sequence of\nbytes is called deserialization. Serialization
    is commonly used for\ncommunication (sharing objects between multiple hosts) and
    persistence\n(store the object state in a file or a database). It is an integral
    part\nof popular protocols like *Remote Method Invocation (RMI)*, *Java\nManagement
    Extension (JMX)*, *Java Messaging System (JMS)*, *Action\nMessage Format (AMF)*,
    *Java Server Faces (JSF) ViewState*, etc.\n\n*Deserialization of untrusted data*
    ([CWE-502][1]), is when the\napplication deserializes untrusted data without sufficiently
    verifying\nthat the resulting data will be valid, letting the attacker to control\nthe
    state or the flow of the execution.\n\nJava deserialization issues have been known
    for years. However, interest\nin the issue intensified greatly in 2015, when classes
    that could be\nabused to achieve remote code execution were found in a [popular
    library\n(Apache Commons Collection)][2]. These classes were used in zero-days\naffecting
    IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs
    to identify a piece of software that has both a\nvulnerable class on its path,
    and performs deserialization on untrusted\ndata. Then all they need to do is send
    the payload into the\ndeserializer, getting the command executed.\n\n> Developers
    put too much trust in Java Object Serialization. Some even\n> de-serialize objects
    pre-authentication. When deserializing an Object\n> in Java you typically cast
    it to an expected type, and therefore\n> Java\\'s strict type system will ensure
    you only get valid object\n> trees. Unfortunately, by the time the type checking
    happens, platform\n> code has already created and executed significant logic.
    So, before\n> the final type is checked a lot of code is executed from the\n>
    readObject() methods of various objects, all of which is out of the\n> developer\\'s
    control. By combining the readObject() methods of various\n> classes which are
    available on the classpath of the vulnerable\n> application an attacker can execute
    functions (including calling\n> Runtime.exec() to execute local OS commands).\n>
    \n> * Apache Blog\n\nThe vulnerability, also know as *Mad Gadget*\n\n> Mad Gadget
    is one of the most pernicious vulnerabilities we’ve seen.\n> By merely existing
    on the Java classpath, seven “gadget” classes in\n> Apache Commons Collections
    (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0)\n> make object deserialization for the
    entire JVM process Turing complete\n> with an exec function. Since many business
    applications use object\n> deserialization to send messages across the network,
    it would be like\n> hiring a bank teller who was trained to hand over all the
    money in the\n> vault if asked to do so politely, and then entrusting that teller
    with\n> the key. The only thing that would keep a bank safe in such a\n> circumstance
    is that most people wouldn’t consider asking such a\n> question.\n> \n> * Google\n\n\n\n[1]:
    https://cwe.mitre.org/data/definitions/502.html\n[2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078\n"
  affected_package: org.apache.spark:spark-core_2.11
  vulnerable_versions:
  - ">= 1.6.0 < 2.1.2"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-12612
  cwe:
  - CWE-502
  disclosed_date: 2018-07-11
  created_date: 2018-07-19
  last_modified_date: 2018-07-19
  credit:
  - Aditya Sharad
  references:
  - https://spark.apache.org/security.html#CVE-2017-12612
  - https://issues.apache.org/jira/browse/SPARK-20922
  - https://github.com/apache/spark/pull/18166
  - https://github.com/apache/spark/pull/18178
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESPARK-31575
- id: snykio:maven:org.apache.spark:spark-core_2.11:CVE-2017-7678
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.apache.spark:spark-core_2.11`][1] is a fast and general cluster
    computing system for Big Data.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks.

    In Apache Spark before 2.2.0, it is possible for an attacker to take
    advantage of a user\'s trust in the server to trick them into visiting a
    link that points to a shared Spark cluster and submits data including
    MHTML to the Spark master, or history server. This data, which could
    contain a script, would then be reflected back to the user and could be
    evaluated and executed by MS Windows-based clients. It is not an attack
    on Spark itself, but on the user, who may then execute the script
    inadvertently when viewing elements of the Spark web UIs.



    [1]: https://spark.apache.org
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.apache.spark:spark-core_2.11
  vulnerable_versions:
  - "< 2.2.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-7678
  cwe:
  - CWE-79
  disclosed_date: 2017-07-11
  created_date: 2017-08-31
  last_modified_date: 2017-08-31
  credit:
  - Mike Kasper
  - Nicholas Marion
  references:
  - http://www.openwall.com/lists/oss-security/2017/07/12/2
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESPARK-31463
- id: snykio:maven:org.apache.spark:spark-core_2.11:CVE-2018-1334
  title: Privilege Escalation
  description: |
    [org.apache.spark:spark-core\_2.11][1] is a general cluster computing
    system for Big Data.

    Affected versions of this package are vulnerable to Privilege
    Escalation. When using `PySpark` or `SparkR`, it was possible for a
    different local user to connect to the Spark application and impersonate
    the user running the Spark application.



    [1]: https://github.com/apache/spark
  affected_package: org.apache.spark:spark-core_2.11
  vulnerable_versions:
  - "< 2.1.3"
  - ">= 2.2.0 < 2.2.2"
  - ">= 2.3.0 < 2.3.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1334
  cwe:
  - CWE-265
  disclosed_date: 2018-07-11
  created_date: 2018-07-19
  last_modified_date: 2018-07-19
  credit:
  - Nehmé Tohmé
  references:
  - https://lists.apache.org/thread.html/4d6d210e319a501b740293daaeeeadb51927111fb8261a3e4cd60060@%3Cdev.spark.apache.org%3E
  - https://spark.apache.org/security.html#CVE-2018-1334
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESPARK-31695
