---
- id: snykio:maven:jline:jline:2013-05-02
  title: Arbitrary Code Injection
  description: |
    [`jline:jline`][1] is a Java library for handling console input.

    Affected versions of this package are vulnerable to Arbitrary Code
    Injection. Race condition in
    `hawtjni-runtime/src/main/java/org/fusesource/hawtjni/runtime/Library.java`
    in `HawtJNI` before 1.8, when a custom library path is not specified,
    allows local users to execute arbitrary Java code by overwriting a
    temporary JAR file with a predictable name in /tmp.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jline%22
    \n[`jline:jline`][1] is a Java library for handling console input.

    Affected versions of this package are vulnerable to Arbitrary Code
    Injection. Race condition in
    `hawtjni-runtime/src/main/java/org/fusesource/hawtjni/runtime/Library.java`
    in `HawtJNI` before 1.8, when a custom library path is not specified,
    allows local users to execute arbitrary Java code by overwriting a
    temporary JAR file with a predictable name in /tmp.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jline%22
    \n[`jline:jline`][1] is a Java library for handling console input.

    Affected versions of this package are vulnerable to Arbitrary Code
    Injection. Race condition in
    `hawtjni-runtime/src/main/java/org/fusesource/hawtjni/runtime/Library.java`
    in `HawtJNI` before 1.8, when a custom library path is not specified,
    allows local users to execute arbitrary Java code by overwriting a
    temporary JAR file with a predictable name in /tmp.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jline%22
  affected_package: jline:jline
  vulnerable_versions:
  - "<= 2.11"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-2035
  cwe:
  - CWE-94
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/CVE-2013-2035
  - https://github.com/jline/jline2/issues/85
  source_url: https://snyk.io/vuln/SNYK-JAVA-JLINE-30131
- id: snykio:maven:jline:jline:2010-04-27
  title: Cross-site Scripting (XSS)
  description: |+
    [`jline:jline`][1] The regular expression engine in JRuby before 1.4.1,
    when $KCODE is set to \'u\', does not properly handle characters
    immediately after a UTF-8 character, which allows remote attackers to
    conduct cross-site scripting (XSS) attacks via a crafted string.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jline%22
    \n[`jline:jline`][1] The regular expression engine in JRuby before 1.4.1,
    when $KCODE is set to \'u\', does not properly handle characters
    immediately after a UTF-8 character, which allows remote attackers to
    conduct cross-site scripting (XSS) attacks via a crafted string.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jline%22
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: jline:jline
  vulnerable_versions:
  - ">= 0.9.93"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2010-1330
  cwe:
  - CWE-79
  credit:
  - Jörn Hartmann
  references:
  - http://www.jruby.org/2010/04/26/jruby-1-4-1-xss-vulnerability.html
  - https://bugs.gentoo.org/show_bug.cgi?id=317435
  source_url: https://snyk.io/vuln/SNYK-JAVA-JLINE-30130
- id: victims:maven:jline:jline:date
  title: 'jruby: XSS in the regular expression engine when processing invalid UTF-8
    byte sequences'
  description: 'A cross-site scripting (XSS) flaw was found in the way the regular
    expression engine of the JRuby, Java implementation of the Ruby programming language,  processed
    certain invalid UTF-8 byte sequences. A remote attacker could use  this flaw to
    execute arbitrary HTML or web script via specially-crafted input  provided to
    an JRuby application.

'
  affected_package: jline:jline
  vulnerable_versions:
  - "==0.9.93"
  severity: medium
  package_manager: maven
  cve:
  - 2010-1330
  credit:
  - Victims CVE Database
  references:
  - http://www.jruby.org/2010/04/26/jruby-1-4-1-xss-vulnerability.html
  - https://bugs.gentoo.org/show_bug.cgi?id=317435
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2010/1330.yaml
- id: victims:maven:jline:jline:date
  title: 'HawtJNI: predictable temporary file name leading to local arbitrary code
    execution'
  description: '"The HawtJNI Library class wrote native libraries to a predictable
    file name  in /tmp when the native libraries were bundled in a JAR file, and no
    custom  library path was specified. A local attacker could overwrite these native  libraries
    with malicious versions during the window between when HawtJNI  writes them, and
    when they are executed."

'
  affected_package: jline:jline
  vulnerable_versions:
  - "<=2.10"
  patched_versions:
  - ">=2.11"
  severity: low
  package_manager: maven
  cve:
  - 2013-2035
  credit:
  - Victims CVE Database
  references:
  - https://bugzilla.redhat.com/CVE-2013-2035
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2013/2035.yaml
