---
- id: snykio:maven:org.springframework.integration:spring-integration-zip:2018-05-15
  title: Arbitrary File Write via Archive Extraction (Zip Slip)
  description: |
    [org.springframework.integration:spring-integration-zip][1] provides Zip
    (un-) compression support.

    Affected versions of this package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It is exploited using a specially crafted zip archive, that holds path
    traversal filenames. When exploited, a filename in a malicious archive
    is concatenated to the target extraction directory, which results in the
    final path ending up outside of the target folder. For instance, a zip
    may hold a file with a \"../../file.exe\" location and thus break out of
    the target folder. If an executable or a configuration file is
    overwritten with a file containing malicious code, the problem can turn
    into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +2018-04-15 22:04:29 .....           19           19  good.txt
        +2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys

    This vulnerability is due to a partial fix in [CVE-2018-1261][2]



    [1]: https://github.com/spring-projects/spring-integration-extensions/tree/master/spring-integration-zip
    [2]: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKINTEGRATION-31675
    \n[org.springframework.integration:spring-integration-zip][1] provides Zip
    (un-) compression support.

    Affected versions of this package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It is exploited using a specially crafted zip archive, that holds path
    traversal filenames. When exploited, a filename in a malicious archive
    is concatenated to the target extraction directory, which results in the
    final path ending up outside of the target folder. For instance, a zip
    may hold a file with a \"../../file.exe\" location and thus break out of
    the target folder. If an executable or a configuration file is
    overwritten with a file containing malicious code, the problem can turn
    into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +2018-04-15 22:04:29 .....           19           19  good.txt
        +2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys

    This vulnerability is due to a partial fix in [CVE-2018-1261][2]



    [1]: https://github.com/spring-projects/spring-integration-extensions/tree/master/spring-integration-zip
    [2]: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKINTEGRATION-31675
    \n[org.springframework.integration:spring-integration-zip][1] provides Zip
    (un-) compression support.

    Affected versions of this package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It is exploited using a specially crafted zip archive, that holds path
    traversal filenames. When exploited, a filename in a malicious archive
    is concatenated to the target extraction directory, which results in the
    final path ending up outside of the target folder. For instance, a zip
    may hold a file with a \"../../file.exe\" location and thus break out of
    the target folder. If an executable or a configuration file is
    overwritten with a file containing malicious code, the problem can turn
    into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +2018-04-15 22:04:29 .....           19           19  good.txt
        +2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys

    This vulnerability is due to a partial fix in [CVE-2018-1261][2]



    [1]: https://github.com/spring-projects/spring-integration-extensions/tree/master/spring-integration-zip
    [2]: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKINTEGRATION-31675
    \n[org.springframework.integration:spring-integration-zip][1] provides Zip
    (un-) compression support.

    Affected versions of this package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It is exploited using a specially crafted zip archive, that holds path
    traversal filenames. When exploited, a filename in a malicious archive
    is concatenated to the target extraction directory, which results in the
    final path ending up outside of the target folder. For instance, a zip
    may hold a file with a \"../../file.exe\" location and thus break out of
    the target folder. If an executable or a configuration file is
    overwritten with a file containing malicious code, the problem can turn
    into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +2018-04-15 22:04:29 .....           19           19  good.txt
        +2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys

    This vulnerability is due to a partial fix in [CVE-2018-1261][2]



    [1]: https://github.com/spring-projects/spring-integration-extensions/tree/master/spring-integration-zip
    [2]: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKINTEGRATION-31675
    \n[org.springframework.integration:spring-integration-zip][1] provides Zip
    (un-) compression support.

    Affected versions of this package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It is exploited using a specially crafted zip archive, that holds path
    traversal filenames. When exploited, a filename in a malicious archive
    is concatenated to the target extraction directory, which results in the
    final path ending up outside of the target folder. For instance, a zip
    may hold a file with a \"../../file.exe\" location and thus break out of
    the target folder. If an executable or a configuration file is
    overwritten with a file containing malicious code, the problem can turn
    into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +2018-04-15 22:04:29 .....           19           19  good.txt
        +2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys

    This vulnerability is due to a partial fix in [CVE-2018-1261][2]



    [1]: https://github.com/spring-projects/spring-integration-extensions/tree/master/spring-integration-zip
    [2]: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKINTEGRATION-31675
    \n[org.springframework.integration:spring-integration-zip][1] provides Zip
    (un-) compression support.

    Affected versions of this package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It is exploited using a specially crafted zip archive, that holds path
    traversal filenames. When exploited, a filename in a malicious archive
    is concatenated to the target extraction directory, which results in the
    final path ending up outside of the target folder. For instance, a zip
    may hold a file with a \"../../file.exe\" location and thus break out of
    the target folder. If an executable or a configuration file is
    overwritten with a file containing malicious code, the problem can turn
    into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +2018-04-15 22:04:29 .....           19           19  good.txt
        +2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys

    This vulnerability is due to a partial fix in [CVE-2018-1261][2]



    [1]: https://github.com/spring-projects/spring-integration-extensions/tree/master/spring-integration-zip
    [2]: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKINTEGRATION-31675
    \n[org.springframework.integration:spring-integration-zip][1] provides Zip
    (un-) compression support.

    Affected versions of this package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It is exploited using a specially crafted zip archive, that holds path
    traversal filenames. When exploited, a filename in a malicious archive
    is concatenated to the target extraction directory, which results in the
    final path ending up outside of the target folder. For instance, a zip
    may hold a file with a \"../../file.exe\" location and thus break out of
    the target folder. If an executable or a configuration file is
    overwritten with a file containing malicious code, the problem can turn
    into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +2018-04-15 22:04:29 .....           19           19  good.txt
        +2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys

    This vulnerability is due to a partial fix in [CVE-2018-1261][2]



    [1]: https://github.com/spring-projects/spring-integration-extensions/tree/master/spring-integration-zip
    [2]: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKINTEGRATION-31675
  affected_package: org.springframework.integration:spring-integration-zip
  vulnerable_versions:
  - "< 1.0.2"
  severity: high
  package_manager: maven
  cve:
  - CVE-2018-1263
  cwe:
  - CWE-22
  credit:
  - Snyk Security Research Team
  - Abago Forgans
  references:
  - https://pivotal.io/security/cve-2018-1263
  - https://nvd.nist.gov/vuln/detail/CVE-2018-1263
  - https://snyk.io/research/zip-slip-vulnerability
  - https://github.com/snyk/zip-slip-vulnerability
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKINTEGRATION-32275
- id: snykio:maven:org.springframework.integration:spring-integration-zip:2018-05-08
  title: Arbitrary File Write via Archive Extraction (Zip Slip)
  description: |
    [`org.springframework.integration:spring-integration-zip`][1] provides
    Zip (un-) compression support.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It is exploited using a specially crafted zip archive, that holds path
    traversal filenames. When exploited, a filename in a malicious archive
    is concatenated to the target extraction directory, which results in the
    final path ending up outside of the target folder. For instance, a zip
    may hold a file with a \"../../file.exe\" location and thus break out of
    the target folder. If an executable or a configuration file is
    overwritten with a file containing malicious code, the problem can turn
    into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +2018-04-15 22:04:29 .....           19           19  good.txt
        +2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://github.com/spring-projects/spring-integration-extensions/tree/master/spring-integration-zip
    \n[`org.springframework.integration:spring-integration-zip`][1] provides
    Zip (un-) compression support.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It is exploited using a specially crafted zip archive, that holds path
    traversal filenames. When exploited, a filename in a malicious archive
    is concatenated to the target extraction directory, which results in the
    final path ending up outside of the target folder. For instance, a zip
    may hold a file with a \"../../file.exe\" location and thus break out of
    the target folder. If an executable or a configuration file is
    overwritten with a file containing malicious code, the problem can turn
    into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +2018-04-15 22:04:29 .....           19           19  good.txt
        +2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://github.com/spring-projects/spring-integration-extensions/tree/master/spring-integration-zip
    \n[`org.springframework.integration:spring-integration-zip`][1] provides
    Zip (un-) compression support.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It is exploited using a specially crafted zip archive, that holds path
    traversal filenames. When exploited, a filename in a malicious archive
    is concatenated to the target extraction directory, which results in the
    final path ending up outside of the target folder. For instance, a zip
    may hold a file with a \"../../file.exe\" location and thus break out of
    the target folder. If an executable or a configuration file is
    overwritten with a file containing malicious code, the problem can turn
    into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +2018-04-15 22:04:29 .....           19           19  good.txt
        +2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://github.com/spring-projects/spring-integration-extensions/tree/master/spring-integration-zip
    \n[`org.springframework.integration:spring-integration-zip`][1] provides
    Zip (un-) compression support.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It is exploited using a specially crafted zip archive, that holds path
    traversal filenames. When exploited, a filename in a malicious archive
    is concatenated to the target extraction directory, which results in the
    final path ending up outside of the target folder. For instance, a zip
    may hold a file with a \"../../file.exe\" location and thus break out of
    the target folder. If an executable or a configuration file is
    overwritten with a file containing malicious code, the problem can turn
    into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +2018-04-15 22:04:29 .....           19           19  good.txt
        +2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://github.com/spring-projects/spring-integration-extensions/tree/master/spring-integration-zip
    \n[`org.springframework.integration:spring-integration-zip`][1] provides
    Zip (un-) compression support.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It is exploited using a specially crafted zip archive, that holds path
    traversal filenames. When exploited, a filename in a malicious archive
    is concatenated to the target extraction directory, which results in the
    final path ending up outside of the target folder. For instance, a zip
    may hold a file with a \"../../file.exe\" location and thus break out of
    the target folder. If an executable or a configuration file is
    overwritten with a file containing malicious code, the problem can turn
    into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +2018-04-15 22:04:29 .....           19           19  good.txt
        +2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://github.com/spring-projects/spring-integration-extensions/tree/master/spring-integration-zip
    \n[`org.springframework.integration:spring-integration-zip`][1] provides
    Zip (un-) compression support.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It is exploited using a specially crafted zip archive, that holds path
    traversal filenames. When exploited, a filename in a malicious archive
    is concatenated to the target extraction directory, which results in the
    final path ending up outside of the target folder. For instance, a zip
    may hold a file with a \"../../file.exe\" location and thus break out of
    the target folder. If an executable or a configuration file is
    overwritten with a file containing malicious code, the problem can turn
    into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +2018-04-15 22:04:29 .....           19           19  good.txt
        +2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://github.com/spring-projects/spring-integration-extensions/tree/master/spring-integration-zip
  affected_package: org.springframework.integration:spring-integration-zip
  vulnerable_versions:
  - "< 1.0.1"
  severity: high
  package_manager: maven
  cve:
  - CVE-2018-1261
  cwe:
  - CWE-22
  credit:
  - Snyk Security Research Team
  references:
  - https://pivotal.io/security/cve-2018-1261
  - https://github.com/spring-projects/spring-integration-extensions/commit/a5573eb232ff85199ff9bb28993df715d9a19a25
  - https://snyk.io/research/zip-slip-vulnerability
  - https://github.com/snyk/zip-slip-vulnerability
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKINTEGRATION-31675
