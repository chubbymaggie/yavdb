---
- id: snykio:maven:org.restlet.osgi:org.restlet:31525
  title: XML External Entity (XXE) Injection
  description: |+
    [`org.restlet.osgi:org.restlet`][1] is a RESTful Web API framework for
    Java.

    Affected versions of the package are vulnerable to XML External Entity
    (XXE) Injection. Restlet Framework 2.1.x before 2.1.7 and 2.x.x before
    2.2 RC1, when using `XMLRepresentation` or XML serializers, allows
    attackers to cause a denial of service via an XML Entity Expansion (XEE)
    attack.



    [1]: https://osgi.restlet.org
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: org.restlet.osgi:org.restlet
  vulnerable_versions:
  - "< 2.1.7"
  - ">= 2.2-alpha <= 2.2-RC1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-1868
  cwe:
  - CWE-611
  disclosed_date: 2014-02-13
  created_date: 2017-10-04
  last_modified_date: 2017-10-04
  credit:
  - Alvaro Munoz
  references:
  - https://github.com/restlet/restlet-framework-java/wiki/XEE-security-enhancements#vulnerability-cve-2014-1868
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGRESTLETOSGI-31525
- id: snykio:maven:org.restlet.osgi:org.restlet:31526
  title: XML External Entity (XXE) Injection
  description: |+
    [`org.restlet.osgi:org.restlet`][1] is a RESTful Web API framework for
    Java.

    Affected versions of the package are vulnerable to XML External Entity
    (XXE) Injection due to bundling the vulnerable [`simple-xml`][2]
    framework.

    > The XML External Entity (XXE) vulnerabilities abuse the XML
    > specification to force an XML parser to either fetch sensitive data
    > from the system, or carry out denial of services (DoS) or server-side
    > request forgery (SSRF) attacks. The main problem is that the XML
    > standard allows an XML document to define entities, which are like
    > variables that can refer to resources outside of the XML document.
    > Let\'s consider the following XML document:

        <?xml version="1.0" encoding="ISO-8859-1"?>
         <!DOCTYPE foo [
          <!ELEMENT foo ANY >
          <!ENTITY abc SYSTEM "file:///etc/passwd" >]>
        <foo>&abc;</foo>
    {: .language-xml}

    > This document defines an external entity named abc, that refers to the
    > content of the file `/etc/passwd`. When the XML document is parsed,
    > the entity `&abc;` will be replaced by the content of `/etc/passwd`.
    > Now if an application is parsing XML data from an untrusted source,
    > then by defining an external entity that points to a sensitive file,
    > the attacker will be able to force the application to include
    > sensitive data in the parsed XML document. If the attacker can then
    > retrieve the content of the parsed document, they will be able to view
    > the content of /etc/passwd.

    * LGTM Blog



    [1]: https://osgi.restlet.org
    [2]: https://snyk.io/vuln/SNYK-JAVA-ORGSIMPLEFRAMEWORK-31528
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: org.restlet.osgi:org.restlet
  vulnerable_versions:
  - "< 2.3.11"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-14868
  cwe:
  - CWE-611
  disclosed_date: 2017-09-29
  created_date: 2017-10-04
  last_modified_date: 2017-10-04
  credit:
  - LGTM Security Team
  - Man Yue Mo
  references:
  - https://github.com/restlet/restlet-framework-java/commit/7c2636718c284598da0eed0839ef69bfccf48071
  - https://github.com/restlet/restlet-framework-java/issues/1286
  - https://github.com/restlet/restlet-framework-java/pull/1287
  - https://github.com/restlet/restlet-framework-java/wiki/XEE-security-enhancements#vulnerability-cve-2017-14868
  - https://lgtm.com/blog/restlet_CVE-2017-14868
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGRESTLETOSGI-31526
- id: snykio:maven:org.restlet.osgi:org.restlet:31527
  title: XML External Entity (XXE) Injection
  description: |+
    [`org.restlet.osgi:org.restlet`][1] is a RESTful Web API framework for
    Java.

    Affected versions of the package are vulnerable to XML External Entity
    (XXE) Injection. Multiple classes used the `expandingEntityRefs`
    attribute, originally introduced when handling
    [CVE-2014-1868](SNYK-JAVA-ORGRESTLETOSGI-31525). The attribute was set
    to `false`, which did not properly prevent the expansion of external
    entities.



    [1]: https://osgi.restlet.org
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: org.restlet.osgi:org.restlet
  vulnerable_versions:
  - ">= 2.1.7 < 2.3.12"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-14949
  cwe:
  - CWE-611
  disclosed_date: 2017-10-01
  created_date: 2017-10-04
  last_modified_date: 2017-10-04
  credit:
  - Man Yue Mo
  references:
  - https://github.com/restlet/restlet-framework-java/commit/fe75aff3af23b879b984db7a2b6824cee0ef0fc5
  - https://github.com/restlet/restlet-framework-java/wiki/XEE-security-enhancements#vulnerability-cve-2017-14949
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGRESTLETOSGI-31527
