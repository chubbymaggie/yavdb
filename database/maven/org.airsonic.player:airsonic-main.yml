---
- id: snykio:maven:org.airsonic.player:airsonic-main:174112
  title: XML External Entity (XXE) Injection
  description: |+
    [org.airsonic.player:airsonic-main][1] is a media server that can be
    used to stream multiple players simultaneously.

    Affected versions of this package are vulnerable to XML External Entity
    (XXE) Injection when receiving XML data from untrusted sources and using
    `SAXBuilder()` function to perform this operation.



    [1]: https://github.com/airsonic/airsonic
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: org.airsonic.player:airsonic-main
  vulnerable_versions:
  - "< 10.2.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-20222
  cwe:
  - CWE-611
  disclosed_date: 2019-04-04
  created_date: 2019-04-05
  last_modified_date: 2019-04-05
  credit:
  - Unknown
  references:
  - https://github.com/airsonic/airsonic/blob/master/CHANGELOG.md
  - https://github.com/airsonic/airsonic/commit/1a88f46c18066f61e11c6a95dccd3801ec4aec55
  - https://github.com/airsonic/airsonic/releases/tag/v10.2.1
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAIRSONICPLAYER-174112
- id: snykio:maven:org.airsonic.player:airsonic-main:174135
  title: Information Exposure
  description: |
    [org.airsonic.player:airsonic-main][1] is a media server that can be
    used to stream multiple players simultaneously.

    Affected versions of this package are vulnerable to Information
    Exposure. The code uses default remember-me mechanism based on MD5, with
    a fixed key of airsonic in `GlobalSecurityConfig.java`. An attacker able
    to capture cookies might be able to trivially brute-force offline the
    passwords of associated users.



    [1]: https://github.com/airsonic/airsonic
  affected_package: org.airsonic.player:airsonic-main
  vulnerable_versions:
  - ">= 10.1.0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2019-10907
  cwe:
  - CWE-200
  disclosed_date: 2019-04-07
  created_date: 2019-04-09
  last_modified_date: 2019-04-09
  credit:
  - Unknown
  references:
  - https://github.com/airsonic/airsonic/commit/3e07ea52885f88d3fbec444dfd592f27bfb65647
  - https://github.com/airsonic/airsonic/pull/951
  - https://github.com/airsonic/airsonic/pull/951/commits/268dc6e13dd1d84f309db3a4bd7d0d864c4b5bf1
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAIRSONICPLAYER-174135
- id: snykio:maven:org.airsonic.player:airsonic-main:174142
  title: Insecure Randomness
  description: |
    [org.airsonic.player:airsonic-main][1] is a media server that can be
    used to stream multiple players simultaneously.

    Affected versions of this package are vulnerable to Insecure Randomness
    which can lead to privilege escalation attacks. `RecoverController.java`
    generates passwords via the `org.apache.commons.lang.RandomStringUtils`
    class, which uses the `java.util.Random` PRNG function. This function
    uses a 48-bit seed that is susceptible to brute force attacks.



    [1]: https://github.com/airsonic/airsonic
  affected_package: org.airsonic.player:airsonic-main
  vulnerable_versions:
  - "< 10.2.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2019-10908
  cwe:
  - CWE-330
  disclosed_date: 2019-04-07
  created_date: 2019-04-09
  last_modified_date: 2019-04-09
  credit:
  - Unknown
  references:
  - https://github.com/airsonic/airsonic/commit/61c842923a6d60d4aedd126445a8437b53b752c8
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAIRSONICPLAYER-174142
- id: snykio:maven:org.airsonic.player:airsonic-main:450219
  title: Cross-site Scripting (XSS)
  description: |+
    [org.airsonic.player:airsonic-main][1] is a media server that can be
    used to stream multiple players simultaneously.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) due to not escaping avatar names within `avatarUploadResult.jsp`.



    [1]: https://github.com/airsonic/airsonic
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.airsonic.player:airsonic-main
  vulnerable_versions:
  - "< 10.3.0"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-79
  disclosed_date: 2019-03-28
  created_date: 2019-06-20
  last_modified_date: 2019-06-20
  credit:
  - jvoisin
  references:
  - https://github.com/airsonic/airsonic/pull/938
  - https://github.com/airsonic/airsonic/pull/938/commits/2f9046d6b4cfbfd0cef624ca301c321a1dc7825a
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAIRSONICPLAYER-450219
