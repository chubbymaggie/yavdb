---
- id: ossindex:maven:org.apache.hadoop:hadoop-hdfs:2017-07-31
  title: Information Disclosure
  description: "> This is an information disclosure vulnerability in the short-circuit
    reads feature of HDFS. A local user on an HDFS DataNode may be able to craft a
    block token that grants unauthorized read access to random files by guessing certain
    \nfields in the token.\n> \n> -- [seclists.org](http://seclists.org/oss-sec/2016/q4/698)"
  affected_package: org.apache.hadoop:hadoop-hdfs
  vulnerable_versions:
  - "<=2.6.3"
  - 2.7.1
  package_manager: maven
  credit:
  - OSSIndex
  references:
  - http://seclists.org/oss-sec/2016/q4/698
  source_url: https://ossindex.net/resource/package/7015476488/vulnerabilities
- id: ossindex:maven:org.apache.hadoop:hadoop-hdfs:2017-04-26
  title: '[CVE-2017-3161]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: The HDFS web UI in Apache Hadoop before 2.7.0 is vulnerable to a cross-site
    scripting (XSS) attack through an unescaped query parameter.
  affected_package: org.apache.hadoop:hadoop-hdfs
  vulnerable_versions:
  - "<2.7.0"
  package_manager: maven
  cve:
  - CVE-2017-3161
  credit:
  - OSSIndex
  references:
  - http://www.securityfocus.com/bid/98025
  - https://s.apache.org/4MQm
  source_url: https://ossindex.net/resource/package/7015476488/vulnerabilities
- id: ossindex:maven:org.apache.hadoop:hadoop-hdfs:2017-04-26
  title: "[CVE-2017-3162]  Improper Input Validation"
  description: HDFS clients interact with a servlet on the DataNode to browse the
    HDFS namespace. The NameNode is provided as a query parameter that is not validated
    in Apache Hadoop before 2.7.0.
  affected_package: org.apache.hadoop:hadoop-hdfs
  vulnerable_versions:
  - "<2.7.0"
  package_manager: maven
  cve:
  - CVE-2017-3162
  credit:
  - OSSIndex
  references:
  - http://www.securityfocus.com/bid/98017
  - https://s.apache.org/k2ss
  source_url: https://ossindex.net/resource/package/7015476488/vulnerabilities
- id: ossindex:maven:org.apache.hadoop:hadoop-hdfs:2012-07-12
  title: "[CVE-2012-3376]  Cryptographic Issues"
  description: DataNodes in Apache Hadoop 2.0.0 alpha does not check the BlockTokens
    of clients when Kerberos is enabled and the DataNode has checked out the same
    BlockPool twice from a NodeName, which might allow remote clients to read arbitrary
    blocks, write to blocks to which they only have read access, and have other unspecified
    impacts.
  affected_package: org.apache.hadoop:hadoop-hdfs
  vulnerable_versions:
  - 2.0.0-alpha
  package_manager: maven
  cve:
  - CVE-2012-3376
  credit:
  - OSSIndex
  references:
  - http://archives.neohapsis.com/archives/bugtraq/2012-07/0049.html
  - http://www.securityfocus.com/bid/54358
  - https://www.cloudera.com/documentation/other/security-bulletins/topics/csb_topic_1.html
  source_url: https://ossindex.net/resource/package/7015476488/vulnerabilities
- id: snykio:maven:org.apache.hadoop:hadoop-hdfs:2016-04-11
  title: Information Exposure
  description: |
    [http://hadoop.apache.org/][1] is the primary distributed storage used
    by Hadoop applications.

    Affected versions of this package are vulnerable to Information
    Exposure. An attacker may retrive information about paths that they do
    not have permissions to see.



    [1]: https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/HdfsUserGuide.html
    \n[http://hadoop.apache.org/][1] is the primary distributed storage used
    by Hadoop applications.

    Affected versions of this package are vulnerable to Information
    Exposure. An attacker may retrive information about paths that they do
    not have permissions to see.



    [1]: https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/HdfsUserGuide.html
    \n[http://hadoop.apache.org/][1] is the primary distributed storage used
    by Hadoop applications.

    Affected versions of this package are vulnerable to Information
    Exposure. An attacker may retrive information about paths that they do
    not have permissions to see.



    [1]: https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/HdfsUserGuide.html
  affected_package: org.apache.hadoop:hadoop-hdfs
  vulnerable_versions:
  - "< 2.7.4"
  severity: high
  package_manager: maven
  cwe:
  - CWE-200
  credit:
  - kevincox
  references:
  - https://issues.apache.org/jira/browse/HDFS-10276
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEHADOOP-32124
- id: snykio:maven:org.apache.hadoop:hadoop-hdfs:2017-04-27
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.apache.hadoop:hadoop-hdfs`][1] is a framework that allows for the
    distributed processing of large data sets across clusters of computers
    using simple programming models.

    The HDFS web UI in Apache Hadoop before 2.7.0 is vulnerable to a
    cross-site scripting (XSS) attack through an unescaped query parameter.



    [1]: https://hadoop.apache.org
    \n[`org.apache.hadoop:hadoop-hdfs`][1] is a framework that allows for the
    distributed processing of large data sets across clusters of computers
    using simple programming models.

    The HDFS web UI in Apache Hadoop before 2.7.0 is vulnerable to a
    cross-site scripting (XSS) attack through an unescaped query parameter.



    [1]: https://hadoop.apache.org
    \n[`org.apache.hadoop:hadoop-hdfs`][1] is a framework that allows for the
    distributed processing of large data sets across clusters of computers
    using simple programming models.

    The HDFS web UI in Apache Hadoop before 2.7.0 is vulnerable to a
    cross-site scripting (XSS) attack through an unescaped query parameter.



    [1]: https://hadoop.apache.org
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.apache.hadoop:hadoop-hdfs
  vulnerable_versions:
  - "< 2.7.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-3161
  cwe:
  - CWE-79
  credit:
  - Sunil Yadav
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-3161
  - http://www.securityfocus.com/bid/98025,https://s.apache.org/4MQm
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEHADOOP-31414
- id: snykio:maven:org.apache.hadoop:hadoop-hdfs:2017-04-27
  title: Improper Input Validation
  description: |
    [`org.apache.hadoop:hadoop-hdfs`][1] is a framework that allows for the
    distributed processing of large data sets across clusters of computers
    using simple programming models.

    HDFS clients interact with a servlet on the DataNode to browse the HDFS
    namespace. The NameNode is provided as a query parameter that is not
    validated in Apache Hadoop before 2.7.0.



    [1]: https://hadoop.apache.org
    \n[`org.apache.hadoop:hadoop-hdfs`][1] is a framework that allows for the
    distributed processing of large data sets across clusters of computers
    using simple programming models.

    HDFS clients interact with a servlet on the DataNode to browse the HDFS
    namespace. The NameNode is provided as a query parameter that is not
    validated in Apache Hadoop before 2.7.0.



    [1]: https://hadoop.apache.org
    \n[`org.apache.hadoop:hadoop-hdfs`][1] is a framework that allows for the
    distributed processing of large data sets across clusters of computers
    using simple programming models.

    HDFS clients interact with a servlet on the DataNode to browse the HDFS
    namespace. The NameNode is provided as a query parameter that is not
    validated in Apache Hadoop before 2.7.0.



    [1]: https://hadoop.apache.org
  affected_package: org.apache.hadoop:hadoop-hdfs
  vulnerable_versions:
  - "< 2.7.0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-3162
  cwe:
  - CWE-20
  credit:
  - Sunil Yadav
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-3162
  - https://s.apache.org/k2ss
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEHADOOP-31400
- id: snykio:maven:org.apache.hadoop:hadoop-hdfs:2016-12-19
  title: Information Exposure
  description: |
    [`org.apache.hadoop:hadoop-hdfs`][1] is a framework that allows for the
    distributed processing of large data sets across clusters of computers
    using simple programming models.

    Affected versions of the package are vulnerable to Information Exposure
    via the short-circuit reads feature of HDFS. A local user on an HDFS
    DataNode may be able to craft a block token that grants unauthorized
    read access to random files by guessing certain fields in the token.



    [1]: https://hadoop.apache.org
    \n[`org.apache.hadoop:hadoop-hdfs`][1] is a framework that allows for the
    distributed processing of large data sets across clusters of computers
    using simple programming models.

    Affected versions of the package are vulnerable to Information Exposure
    via the short-circuit reads feature of HDFS. A local user on an HDFS
    DataNode may be able to craft a block token that grants unauthorized
    read access to random files by guessing certain fields in the token.



    [1]: https://hadoop.apache.org
    \n[`org.apache.hadoop:hadoop-hdfs`][1] is a framework that allows for the
    distributed processing of large data sets across clusters of computers
    using simple programming models.

    Affected versions of the package are vulnerable to Information Exposure
    via the short-circuit reads feature of HDFS. A local user on an HDFS
    DataNode may be able to craft a block token that grants unauthorized
    read access to random files by guessing certain fields in the token.



    [1]: https://hadoop.apache.org
  affected_package: org.apache.hadoop:hadoop-hdfs
  vulnerable_versions:
  - "< 2.6.4"
  - ">= 2.7 < 2.7.2"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-5001
  cwe:
  - CWE-200
  credit:
  - Kihwal Lee
  references:
  - http://www.openwall.com/lists/oss-security/2016/12/16/6
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEHADOOP-30631
- id: snykio:maven:org.apache.hadoop:hadoop-hdfs:2014-06-17
  title: Cryptographic Issues
  description: |
    [`org.apache.hadoop:hadoop-hdfs`][1] is a framework that allows for the
    distributed processing of large data sets across clusters of computers
    using simple programming models.

    DataNodes in Apache Hadoop 2.0.0 alpha does not check the BlockTokens of
    clients when Kerberos is enabled and the DataNode has checked out the
    same BlockPool twice from a NodeName, which might allow remote clients
    to read arbitrary blocks, write to blocks to which they only have read
    access, and have other unspecified impacts.



    [1]: https://hadoop.apache.org
    \n[`org.apache.hadoop:hadoop-hdfs`][1] is a framework that allows for the
    distributed processing of large data sets across clusters of computers
    using simple programming models.

    DataNodes in Apache Hadoop 2.0.0 alpha does not check the BlockTokens of
    clients when Kerberos is enabled and the DataNode has checked out the
    same BlockPool twice from a NodeName, which might allow remote clients
    to read arbitrary blocks, write to blocks to which they only have read
    access, and have other unspecified impacts.



    [1]: https://hadoop.apache.org
    \n[`org.apache.hadoop:hadoop-hdfs`][1] is a framework that allows for the
    distributed processing of large data sets across clusters of computers
    using simple programming models.

    DataNodes in Apache Hadoop 2.0.0 alpha does not check the BlockTokens of
    clients when Kerberos is enabled and the DataNode has checked out the
    same BlockPool twice from a NodeName, which might allow remote clients
    to read arbitrary blocks, write to blocks to which they only have read
    access, and have other unspecified impacts.



    [1]: https://hadoop.apache.org
  affected_package: org.apache.hadoop:hadoop-hdfs
  vulnerable_versions:
  - ">= 2.0.0.alpha"
  severity: high
  package_manager: maven
  cve:
  - CVE-2012-3376
  cwe:
  - CWE-310
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-3376
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEHADOOP-30630
- id: victims:maven:org.apache.hadoop:hadoop-hdfs:date
  title: Apache Hadoop DataNode web UI vulnerability
  description: 'HDFS clients interact with a servlet on the DataNode to browse the
    HDFS namespace. The NameNode is provided as a query parameter that is not validated
    in Apache Hadoop before 2.7.0.

'
  affected_package: org.apache.hadoop:hadoop-hdfs
  vulnerable_versions:
  - "<=2.6.5"
  patched_versions:
  - ">=2.7.0"
  severity: medium
  package_manager: maven
  cve:
  - 2017-3162
  credit:
  - Victims CVE Database
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1448373
  - http://openwall.com/lists/oss-security/2017/04/26/1
  - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-3162
  - http://seclists.org/oss-sec/2017/q2/126
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2017/3162.yaml
- id: victims:maven:org.apache.hadoop:hadoop-hdfs:date
  title: Apache Hadoop NameNode XSS vulnerability
  description: 'The HDFS web UI is vulnerable to a cross-site scripting (XSS) attack
    through an unescaped query parameter.

'
  affected_package: org.apache.hadoop:hadoop-hdfs
  vulnerable_versions:
  - "<=2.6.5"
  patched_versions:
  - ">=2.7.0"
  severity: medium
  package_manager: maven
  cve:
  - 2017-3161
  credit:
  - Victims CVE Database
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1448373
  - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-3161
  - http://seclists.org/oss-sec/2017/q2/127
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2017/3161.yaml
