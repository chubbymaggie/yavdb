---
- id: snykio:maven:org.apache.jspwiki:jspwiki-builder:174023
  title: Cross-site Scripting (XSS)
  description: |+
    [org.apache.jspwiki:jspwiki-builder][1] is a WikiWiki clone, written in
    Java and JSP.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). a carefully crafted URL can execute javascript on another user\'s
    session. No information can be saved on the server or jspwiki database,
    nor is an attacker able to execute code on someone else\'s browser; only
    on its own browser.



    [1]: https://jspwiki-wiki.apache.org/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.apache.jspwiki:jspwiki-builder
  vulnerable_versions:
  - "< 2.11.0.M3"
  severity: low
  package_manager: maven
  cve:
  - CVE-2019-0224
  cwe:
  - CWE-79
  disclosed_date: 2019-03-28
  created_date: 2019-03-28
  last_modified_date: 2019-03-28
  credit:
  - from ZOHOCRM Security Team
  - Muthukumar Marikani
  references:
  - https://issues.apache.org/jira/browse/JSPWIKI-1093
  - https://jspwiki-wiki.apache.org/Wiki.jsp?page=CVE-2019-0224
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEJSPWIKI-174023
- id: snykio:maven:org.apache.jspwiki:jspwiki-builder:174026
  title: Directory Traversal
  description: |
    [org.apache.jspwiki:jspwiki-builder][1] is a WikiWiki clone, written in
    Java and JSP.

    Affected versions of this package are vulnerable to Directory Traversal.
    A specially crafted url can be used to access files under the `ROOT`
    directory of the application, which can be used by an attacker to obtain
    registered users\' details.



    [1]: https://jspwiki-wiki.apache.org/
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.apache.jspwiki:jspwiki-builder
  vulnerable_versions:
  - ">= 2.9.0 < 2.11.0.M3"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2019-0225
  cwe:
  - CWE-22
  disclosed_date: 2019-03-28
  created_date: 2019-03-28
  last_modified_date: 2019-03-28
  credit:
  - from ZOHOCRM Security Team
  - Muthukumar Marikani
  references:
  - https://jspwiki-wiki.apache.org/Wiki.jsp?page=CVE-2019-0225
  - https://lists.apache.org/thread.html/4f19fdbd8b9c4caf6137a459d723f4ec60379b033ed69277eb4e0af9@%3Cuser.jspwiki.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEJSPWIKI-174026
