---
- id: ossindex:maven:org.apache.myfaces.core:myfaces-core-project:CVE-2010-2057
  title: "[CVE-2010-2057]  Cryptographic Issues"
  description: shared/util/StateUtils.java in Apache MyFaces 1.1.x before 1.1.8, 1.2.x
    before 1.2.9, and 2.0.x before 2.0.1 uses an encrypted View State without a Message
    Authentication Code (MAC), which makes it easier for remote attackers to perform
    successful modifications of the View State via a padding oracle attack.
  affected_package: org.apache.myfaces.core:myfaces-core-project
  vulnerable_versions:
  - 1.1.0
  - 1.1.1
  - 1.1.2
  - 1.1.3
  - 1.1.4
  - 1.1.5
  - 1.1.6
  - 1.1.7
  - 1.2.2
  - 1.2.3
  - 1.2.4
  - 1.2.5
  - 1.2.6
  - 1.2.7
  - 1.2.8
  - 2.0.0
  package_manager: maven
  cve:
  - CVE-2010-2057
  disclosed_date: 2010-10-20
  created_date: 2010-10-20
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://svn.apache.org/viewvc/myfaces/shared/trunk/core/src/main/java/org/apache/myfaces/shared/util/StateUtils.java?r1=943327&r2=951801
  - https://bugzilla.redhat.com/show_bug.cgi?id=623799
  - https://issues.apache.org/jira/browse/MYFACES-2749
  source_url: https://ossindex.net/resource/package/7015354953/vulnerabilities
- id: ossindex:maven:org.apache.myfaces.core:myfaces-core-project:CVE-2010-2086
  title: '[CVE-2010-2086]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Apache MyFaces 1.1.7 and 1.2.8, as used in IBM WebSphere Application
    Server and other applications, does not properly handle an unencrypted view state,
    which allows remote attackers to conduct cross-site scripting (XSS) attacks or
    execute arbitrary Expression Language (EL) statements via vectors that involve
    modifying the serialized view object.
  affected_package: org.apache.myfaces.core:myfaces-core-project
  vulnerable_versions:
  - 1.1.7
  - 1.2.8
  package_manager: maven
  cve:
  - CVE-2010-2086
  disclosed_date: 2010-05-27
  created_date: 2010-05-27
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://www.blackhat.com/presentations/bh-dc-10/Byrne_David/BlackHat-DC-2010-Byrne-SGUI-slides.pdf
  - https://www.trustwave.com/spiderlabs/advisories/TWSL2010-001.txt
  source_url: https://ossindex.net/resource/package/7015354953/vulnerabilities
- id: ossindex:maven:org.apache.myfaces.core:myfaces-core-project:CVE-2011-4367
  title: '[CVE-2011-4367]  Improper Limitation of a Pathname to a Restricted Directory
    ("Path Traversal")'
  description: Multiple directory traversal vulnerabilities in MyFaces JavaServer
    Faces (JSF) in Apache MyFaces Core 2.0.x before 2.0.12 and 2.1.x before 2.1.6
    allow remote attackers to read arbitrary files via a .. (dot dot) in the (1) ln
    parameter to faces/javax.faces.resource/web.xml or (2) the PATH_INFO to faces/javax.faces.resource/.
  affected_package: org.apache.myfaces.core:myfaces-core-project
  vulnerable_versions:
  - 2.0.0
  - 2.0.1
  - 2.0.10
  - 2.0.11
  - 2.0.2
  - 2.0.3
  - 2.0.4
  - 2.0.5
  - 2.0.6
  - 2.0.7
  - 2.0.8
  - 2.0.9
  - 2.1.0
  - 2.1.1
  - 2.1.2
  - 2.1.3
  - 2.1.4
  - 2.1.5
  package_manager: maven
  cve:
  - CVE-2011-4367
  disclosed_date: 2014-06-19
  created_date: 2014-06-19
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://mail-archives.apache.org/mod_mbox/myfaces-announce/201202.mbox/%3C4F33ED1F.4070007%40apache.org%3E
  - http://mail-archives.apache.org/mod_mbox/myfaces-announce/201202.mbox/%3C4F33ED1F.4070007@apache.org%3E
  - http://osvdb.org/show/osvdb/79002
  - http://seclists.org/fulldisclosure/2012/Feb/150
  - http://secunia.com/advisories/47973
  - http://www.securityfocus.com/bid/51939
  - http://xforce.iss.net/xforce/xfdb/73100
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/73100
  source_url: https://ossindex.net/resource/package/7015354953/vulnerabilities
- id: ossindex:maven:org.apache.myfaces.core:myfaces-core-project:CVE-2016-5019
  title: "[CVE-2016-5019]  Deserialization of Untrusted Data"
  description: CoreResponseStateManager in Apache MyFaces Trinidad 1.0.0 through 1.0.13,
    1.2.x before 1.2.15, 2.0.x before 2.0.2, and 2.1.x before 2.1.2 might allow attackers
    to conduct deserialization attacks via a crafted serialized view state string.
  affected_package: org.apache.myfaces.core:myfaces-core-project
  vulnerable_versions:
  - ">=1.0.0 <=1.0.13"
  - ">=1.2.0 <1.2.15"
  - ">=2.0.0 <2.0.2"
  - ">=2.1.0 <2.1.2"
  package_manager: maven
  cve:
  - CVE-2016-5019
  disclosed_date: 2016-10-03
  created_date: 2016-10-03
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://mail-archives.apache.org/mod_mbox/myfaces-users/201609.mbox/%3CCAM1yOjYM%2BEW3mLUfX0pNAVLfUFRAw-Bhvkp3UE5%3DEQzR8Yxsfw%40mail.gmail.com%3E
  - http://packetstormsecurity.com/files/138920/Apache-MyFaces-Trinidad-Information-Disclosure.html
  - http://www.oracle.com/technetwork/security-advisory/cpujul2016-2881720.html
  - http://www.oracle.com/technetwork/security-advisory/cpujul2017-3236622.html
  - http://www.oracle.com/technetwork/security-advisory/cpuoct2017-3236626.html
  - http://www.securityfocus.com/bid/93236
  - http://www.securitytracker.com/id/1037633
  - https://issues.apache.org/jira/browse/TRINIDAD-2542
  source_url: https://ossindex.net/resource/package/7015354953/vulnerabilities
- id: snykio:maven:org.apache.myfaces.core:myfaces-core-project:30680
  title: Deserialization of Untrusted Data
  description: "Affected versions of [`org.apache.myfaces.core:myfaces-core-project`][1]\nare
    vulnerable to Deserialization of Untrusted Data.\n\n\n\n[1]: https://core.myfaces.apache.org\n\\nSerialization
    is a process of converting an object into a sequence of\nbytes which can be persisted
    to a disk or database or can be sent\nthrough streams. The reverse process of
    creating object from sequence of\nbytes is called deserialization. Serialization
    is commonly used for\ncommunication (sharing objects between multiple hosts) and
    persistence\n(store the object state in a file or a database). It is an integral
    part\nof popular protocols like *Remote Method Invocation (RMI)*, *Java\nManagement
    Extension (JMX)*, *Java Messaging System (JMS)*, *Action\nMessage Format (AMF)*,
    *Java Server Faces (JSF) ViewState*, etc.\n\n*Deserialization of untrusted data*
    ([CWE-502][1]), is when the\napplication deserializes untrusted data without sufficiently
    verifying\nthat the resulting data will be valid, letting the attacker to control\nthe
    state or the flow of the execution.\n\nJava deserialization issues have been known
    for years. However, interest\nin the issue intensified greatly in 2015, when classes
    that could be\nabused to achieve remote code execution were found in a [popular
    library\n(Apache Commons Collection)][2]. These classes were used in zero-days\naffecting
    IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs
    to identify a piece of software that has both a\nvulnerable class on its path,
    and performs deserialization on untrusted\ndata. Then all they need to do is send
    the payload into the\ndeserializer, getting the command executed.\n\n> Developers
    put too much trust in Java Object Serialization. Some even\n> de-serialize objects
    pre-authentication. When deserializing an Object\n> in Java you typically cast
    it to an expected type, and therefore\n> Java\\'s strict type system will ensure
    you only get valid object\n> trees. Unfortunately, by the time the type checking
    happens, platform\n> code has already created and executed significant logic.
    So, before\n> the final type is checked a lot of code is executed from the\n>
    readObject() methods of various objects, all of which is out of the\n> developer\\'s
    control. By combining the readObject() methods of various\n> classes which are
    available on the classpath of the vulnerable\n> application an attacker can execute
    functions (including calling\n> Runtime.exec() to execute local OS commands).\n>
    \n> * Apache Blog\n\nThe vulnerability, also know as *Mad Gadget*\n\n> Mad Gadget
    is one of the most pernicious vulnerabilities we’ve seen.\n> By merely existing
    on the Java classpath, seven “gadget” classes in\n> Apache Commons Collections
    (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0)\n> make object deserialization for the
    entire JVM process Turing complete\n> with an exec function. Since many business
    applications use object\n> deserialization to send messages across the network,
    it would be like\n> hiring a bank teller who was trained to hand over all the
    money in the\n> vault if asked to do so politely, and then entrusting that teller
    with\n> the key. The only thing that would keep a bank safe in such a\n> circumstance
    is that most people wouldn’t consider asking such a\n> question.\n> \n> * Google\n\n\n\n[1]:
    https://cwe.mitre.org/data/definitions/502.html\n[2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078\n"
  affected_package: org.apache.myfaces.core:myfaces-core-project
  vulnerable_versions:
  - "< 2.3.0"
  severity: high
  package_manager: maven
  cwe:
  - CWE-502
  disclosed_date: 2017-08-15
  created_date: 2017-10-30
  last_modified_date: 2017-10-30
  credit:
  - Peter Stöckli
  references:
  - https://issues.apache.org/jira/browse/MYFACES-4133
  - https://www.alphabot.com/security/blog/2017/java/Misconfigured-JSF-ViewStates-can-lead-to-severe-RCE-vulnerabilities.html
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEMYFACESCORE-30680
- id: snykio:maven:org.apache.myfaces.core:myfaces-core-project:CVE-2010-2086
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.apache.myfaces.core:myfaces-core-project`][1] Apache MyFaces 1.1.7
    and 1.2.8, as used in IBM WebSphere Application Server and other
    applications, does not properly handle an unencrypted view state, which
    allows remote attackers to conduct cross-site scripting (XSS) attacks or
    execute arbitrary Expression Language (EL) statements via vectors that
    involve modifying the serialized view object.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22myfaces-core-project%22
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.apache.myfaces.core:myfaces-core-project
  vulnerable_versions:
  - ">= 1.1.7"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2010-2086
  cwe:
  - CWE-79
  disclosed_date: 2014-01-10
  created_date: 2014-01-10
  last_modified_date: 2014-01-10
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-2086
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEMYFACESCORE-30672
- id: snykio:maven:org.apache.myfaces.core:myfaces-core-project:CVE-2011-4367
  title: Directory Traversal
  description: |
    [`org.apache.myfaces.core:myfaces-core-project`][1] Multiple directory
    traversal vulnerabilities in MyFaces JavaServer Faces (JSF) in Apache
    MyFaces Core 2.0.x before 2.0.12 and 2.1.x before 2.1.6 allow remote
    attackers to read arbitrary files via a .. (dot dot) in the (1) ln
    parameter to faces/javax.faces.resource/web.xml or (2) the PATH\_INFO to
    faces/javax.faces.resource/.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22myfaces-core-project%22
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.apache.myfaces.core:myfaces-core-project
  vulnerable_versions:
  - ">= 2.0.0 <= 2.0.11"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2011-4367
  cwe:
  - CWE-22
  disclosed_date: 2015-04-13
  created_date: 2015-04-13
  last_modified_date: 2015-04-13
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-4367
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEMYFACESCORE-30673
