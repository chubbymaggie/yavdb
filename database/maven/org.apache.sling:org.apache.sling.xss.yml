---
- id: snykio:maven:org.apache.sling:org.apache.sling.xss:CVE-2016-5394
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.apache.sling:org.apache.sling.xss`][1] is a framework for RESTful
    web-applications based on an extensible content tree.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. In the XSS Protection API module before 1.0.12 in Apache
    Sling, the encoding done by the `XSSAPI.encodeForJSString()` method is
    not restrictive enough and for some input patterns allows script tags to
    pass through unencoded, leading to potential XSS vulnerabilities.



    [1]: https://sling.apache.org/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.apache.sling:org.apache.sling.xss
  vulnerable_versions:
  - "< 1.0.12"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-5394
  cwe:
  - CWE-79
  disclosed_date: 2016-08-03
  created_date: 2017-08-31
  last_modified_date: 2017-08-31
  credit:
  - Unknown
  references:
  - http://www.openwall.com/lists/oss-security/2017/07/18/3
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESLING-31465
- id: snykio:maven:org.apache.sling:org.apache.sling.xss:CVE-2016-6798
  title: XML External Entity (XXE) Injection
  description: |+
    [`org.apache.sling:org.apache.sling.xss`][1] is a framework for RESTful
    web-applications based on an extensible content tree.

    Affected versions of the package are vulnerable to XML External Entity
    (XXE) Injection. In the XSS Protection API module before 1.0.12 in
    Apache Sling, the method `XSS.getValidXML()` uses an insecure SAX parser
    to validate the input string, which allows for XXE attacks in all
    scripts which use this method to validate user input, potentially
    allowing an attacker to read sensitive data on the filesystem, perform
    same-site-request-forgery (SSRF), port-scanning behind the firewall or
    DoS the application.



    [1]: https://sling.apache.org/
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: org.apache.sling:org.apache.sling.xss
  vulnerable_versions:
  - "< 1.0.12"
  severity: high
  package_manager: maven
  cve:
  - CVE-2016-6798
  cwe:
  - CWE-611
  disclosed_date: 2016-08-09
  created_date: 2017-08-31
  last_modified_date: 2017-08-31
  credit:
  - Unknown
  references:
  - http://www.openwall.com/lists/oss-security/2017/07/18/2
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESLING-31466
- id: snykio:maven:org.apache.sling:org.apache.sling.xss:CVE-2017-15717
  title: Cross-site Scripting (XSS)
  description: |+
    [org.apache.sling:org.apache.sling.xss][1] is a framework for RESTful
    web-applications based on an extensible content tree.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). A flaw in the way URLs are escaped and encoded allows special
    crafted URLs to pass as valid, although they carry XSS payloads.



    [1]: https://sling.apache.org/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.apache.sling:org.apache.sling.xss
  vulnerable_versions:
  - "< 2.0.4"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-15717
  cwe:
  - CWE-79
  disclosed_date: 2018-01-10
  created_date: 2018-02-06
  last_modified_date: 2018-02-06
  credit:
  - Unknown
  references:
  - https://s.apache.org/CVE-2017-15717
  - https://nvd.nist.gov/vuln/detail/CVE-2017-15717
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESLING-32064
