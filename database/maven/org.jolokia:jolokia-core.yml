---
- id: ossindex:maven:org.jolokia:jolokia-core:2014-10-06
  title: "[CVE-2014-0168]  Cross-Site Request Forgery (CSRF)"
  description: Cross-site request forgery (CSRF) vulnerability in Jolokia before 1.2.1
    allows remote attackers to hijack the authentication of users for requests that
    execute MBeans methods via a crafted web page.
  affected_package: org.jolokia:jolokia-core
  vulnerable_versions:
  - 1.0.0
  - 1.0.1
  - 1.0.2
  - 1.0.3
  - 1.0.4
  - 1.0.5
  - 1.0.6
  - 1.1.0
  - 1.1.1
  - 1.1.2
  - 1.1.3
  - 1.1.4
  - 1.1.5
  - 1.2.0
  package_manager: maven
  cve:
  - CVE-2014-0168
  credit:
  - OSSIndex
  references:
  - http://rhn.redhat.com/errata/RHSA-2014-1351.html
  - https://github.com/rhuss/jolokia/commit/2d9b168cfbbf5a6d16fa6e8a5b34503e3dc42364
  source_url: https://ossindex.net/resource/package/7015269447/vulnerabilities
- id: snykio:maven:org.jolokia:jolokia-core:2018-01-23
  title: Arbitrary Code Execution
  description: |
    [org.jolokia:jolokia-core][1] is a fresh way to access JMX MBeans
    remotely.

    Affected versions oft his package are vulnerable to Arbitrary Code
    Execution in the proxy mode. It allows a remote attacker to run
    arbitrary Java code on the server.



    [1]: https://github.com/rhuss/jolokia
    \n[org.jolokia:jolokia-core][1] is a fresh way to access JMX MBeans
    remotely.

    Affected versions oft his package are vulnerable to Arbitrary Code
    Execution in the proxy mode. It allows a remote attacker to run
    arbitrary Java code on the server.



    [1]: https://github.com/rhuss/jolokia
    \n[org.jolokia:jolokia-core][1] is a fresh way to access JMX MBeans
    remotely.

    Affected versions oft his package are vulnerable to Arbitrary Code
    Execution in the proxy mode. It allows a remote attacker to run
    arbitrary Java code on the server.



    [1]: https://github.com/rhuss/jolokia
  affected_package: org.jolokia:jolokia-core
  vulnerable_versions:
  - "< 1.5.0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2018-1000130
  cwe:
  - CWE-94
  credit:
  - Unknown
  references:
  - https://jolokia.org/#Security_fixes_with_1.5.0
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJOLOKIA-32137
- id: snykio:maven:org.jolokia:jolokia-core:2018-01-24
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jolokia:jolokia-core][1] is a fresh way to access JMX MBeans
    remotely.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in the HTTP servlet. It allows an attacker to execute malicious
    javascript in the victim\'s browser.



    [1]: https://github.com/rhuss/jolokia
    \n[org.jolokia:jolokia-core][1] is a fresh way to access JMX MBeans
    remotely.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in the HTTP servlet. It allows an attacker to execute malicious
    javascript in the victim\'s browser.



    [1]: https://github.com/rhuss/jolokia
    \n[org.jolokia:jolokia-core][1] is a fresh way to access JMX MBeans
    remotely.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in the HTTP servlet. It allows an attacker to execute malicious
    javascript in the victim\'s browser.



    [1]: https://github.com/rhuss/jolokia
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.jolokia:jolokia-core
  vulnerable_versions:
  - "< 1.5.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1000129
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://jolokia.org/#Security_fixes_with_1.5.0
  - https://github.com/rhuss/jolokia/commit/5895d5c137c335e6b473e9dcb9baf748851bbc5f#diff-f19898247eddb55de6400489bff748ad
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJOLOKIA-32136
- id: snykio:maven:org.jolokia:jolokia-core:2015-02-10
  title: Cross-site Request Forgery (CSRF)
  description: |
    [`org.jolokia:jolokia-core`][1] Cross-site request forgery (CSRF)
    vulnerability in Jolokia before 1.2.1 allows remote attackers to hijack
    the authentication of users for requests that execute MBeans methods via
    a crafted web page.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jolokia-core%22
    \n[`org.jolokia:jolokia-core`][1] Cross-site request forgery (CSRF)
    vulnerability in Jolokia before 1.2.1 allows remote attackers to hijack
    the authentication of users for requests that execute MBeans methods via
    a crafted web page.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jolokia-core%22
  affected_package: org.jolokia:jolokia-core
  vulnerable_versions:
  - "< 1.2.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-0168
  cwe:
  - CWE-352
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0168
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJOLOKIA-31213
