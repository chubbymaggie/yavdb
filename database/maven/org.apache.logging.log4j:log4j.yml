---
- id: snykio:maven:org.apache.logging.log4j:log4j:31456
  title: Deserialization of Untrusted Data
  description: "[`org.apache.logging.log4j:log4j`][1] is a logging server.\n\nIn Apache
    Log4j 2.x before 2.8.2, when using the TCP socket server or\nUDP socket server
    to receive serialized log events from another\napplication, a specially crafted
    binary payload can be sent that, when\ndeserialized, can execute arbitrary code.\n\n#
    Details   {#details}\n\nSerialization is a process of converting an object into
    a sequence of\nbytes which can be persisted to a disk or database or can be sent\nthrough
    streams. The reverse process of creating object from sequence of\nbytes is called
    deserialization. Serialization is commonly used for\ncommunication (sharing objects
    between multiple hosts) and persistence\n(store the object state in a file or
    a database). It is an integral part\nof popular protocols like *Remote Method
    Invocation (RMI)*, *Java\nManagement Extension (JMX)*, *Java Messaging System
    (JMS)*, *Action\nMessage Format (AMF)*, *Java Server Faces (JSF) ViewState*, etc.\n\n*Deserialization
    of untrusted data* ([CWE-502][2]), is when the\napplication deserializes untrusted
    data without sufficiently verifying\nthat the resulting data will be valid, letting
    the attacker to control\nthe state or the flow of the execution.\n\nJava deserialization
    issues have been known for years. However, interest\nin the issue intensified
    greatly in 2015, when classes that could be\nabused to achieve remote code execution
    were found in a [popular library\n(Apache Commons Collection)][3]. These classes
    were used in zero-days\naffecting IBM WebSphere, Oracle WebLogic and many other
    products.\n\nAn attacker just needs to identify a piece of software that has both
    a\nvulnerable class on its path, and performs deserialization on untrusted\ndata.
    Then all they need to do is send the payload into the\ndeserializer, getting the
    command executed.\n\n> Developers put too much trust in Java Object Serialization.
    Some even\n> de-serialize objects pre-authentication. When deserializing an Object\n>
    in Java you typically cast it to an expected type, and therefore\n> Java\\'s strict
    type system will ensure you only get valid object\n> trees. Unfortunately, by
    the time the type checking happens, platform\n> code has already created and executed
    significant logic. So, before\n> the final type is checked a lot of code is executed
    from the\n> readObject() methods of various objects, all of which is out of the\n>
    developer\\'s control. By combining the readObject() methods of various\n> classes
    which are available on the classpath of the vulnerable\n> application an attacker
    can execute functions (including calling\n> Runtime.exec() to execute local OS
    commands).\n> \n> * Apache Blog\n\n\n\n[1]: https://logging.apache.org/log4j/2.x/\n[2]:
    https://cwe.mitre.org/data/definitions/502.html\n[3]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078\n"
  affected_package: org.apache.logging.log4j:log4j
  vulnerable_versions:
  - ">= 2.0 < 2.8.2"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-5645
  cwe:
  - CWE-502
  disclosed_date: 2017-04-01
  created_date: 2017-08-13
  last_modified_date: 2017-08-13
  credit:
  - Marcio Almeida de Macedo
  references:
  - https://issues.apache.org/jira/browse/LOG4J2-1863
  - https://nvd.nist.gov/vuln/detail/CVE-2017-5645
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHELOGGINGLOG4J-31456
- id: victims:maven:org.apache.logging.log4j:log4j:2017-5645
  title: Apache Log4j socket receiver deserialization vulnerability
  description: 'When using the TCP socket server or UDP socket server to receive serialized
    log events from another application, a specially crafted binary payload can be
    sent that, when deserialized, can execute arbitrary code.

'
  affected_package: org.apache.logging.log4j:log4j
  vulnerable_versions:
  - "<=2.8.1"
  patched_versions:
  - ">=2.8.2"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-5645
  cvss_v2_score: 7.5
  credit:
  - Victims CVE Database
  references:
  - https://issues.apache.org/jira/browse/LOG4J2-1863
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2017/5645.yaml
