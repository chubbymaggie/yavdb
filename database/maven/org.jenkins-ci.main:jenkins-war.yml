---
- id: snykio:maven:org.jenkins-ci.main:jenkins-war:CVE-2017-1000392
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jenkins-ci.main:jenkins-war][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. Autocompletion suggestions for text fields were not
    escaped, resulting in a persisted cross-site scripting vulnerability if
    the source for the suggestions allowed specifying text that includes
    HTML metacharacters like less-than and greater-than characters.



    [1]: https://github.com/jenkinsci/jenkins
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.jenkins-ci.main:jenkins-war
  vulnerable_versions:
  - "< 2.73.3"
  - ">= 2.80 < 2.89"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-1000392
  cwe:
  - CWE-79
  disclosed_date: 2017-10-24
  created_date: 2018-04-09
  last_modified_date: 2018-04-09
  credit:
  - Viktor Gazdag
  references:
  - https://jenkins.io/security/advisory/2017-11-08/
  - https://nvd.nist.gov/vuln/detail/CVE-2017-1000392
  - https://github.com/jenkinsci/jenkins/commit/f67068170b55633571e5462e52b6124b23d7cb84
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32190
- id: snykio:maven:org.jenkins-ci.main:jenkins-war:CVE-2017-2610
  title: Cross-site Scripting (XSS)
  description: |+
    [org.jenkins-ci.main:jenkins-war][1] is an open-source automation
    server.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks due to improperly escaping users with less-than and
    greater-than characters in their names.



    [1]: https://github.com/jenkinsci/jenkins
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.jenkins-ci.main:jenkins-war
  vulnerable_versions:
  - "< 2.32.2"
  - ">= 2.40 < 2.44"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-2610
  cwe:
  - CWE-79
  disclosed_date: 2017-02-01
  created_date: 2018-05-21
  last_modified_date: 2018-05-21
  credit:
  - Jean Marsault
  references:
  - https://jenkins.io/security/advisory/2017-02-01/
  - https://github.com/jenkinsci/jenkins/commit/307ed31caba68a46426b8c73a787a05add2c7489
  - https://nvd.nist.gov/vuln/detail/CVE-2017-2610
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGJENKINSCIMAIN-32284
