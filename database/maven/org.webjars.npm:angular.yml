---
- id: ossindex:maven:org.webjars.npm:angular:8398799712
  title: Cross Site Scripting (XSS) in ng-srcset
  description: |-
    There is a security issue with ng-srcset; URIs aren't sanitized.

    The behavior is correct for ng-src but not for ng-srcset. The problem is with src/ng/compile.js that it ignores srcset.
  affected_package: org.webjars.npm:angular
  vulnerable_versions:
  - "<1.3.0-rc.3"
  package_manager: maven
  disclosed_date: 2016-04-29
  created_date: 2016-04-29
  last_modified_date: 2016-04-29
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/angular/angular.js/pull/8975
  source_url: https://ossindex.net/resource/package/7107643840/vulnerabilities
- id: ossindex:maven:org.webjars.npm:angular:8398878757
  title: Cross Site Scripting (XSS) in JSONP
  description: JSONP allows untrusted resource URLs, which provides a vector for attack
    by malicious actors.
  affected_package: org.webjars.npm:angular
  vulnerable_versions:
  - "<1.6.0-rc.0"
  package_manager: maven
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 2017-04-27
  credit:
  - OSSIndex
  references:
  - https://github.com/angular/angular.js/commit/6476af83cd0418c84e034a955b12a842794385c4
  - https://github.com/angular/angular.js/issues/11352
  source_url: https://ossindex.net/resource/package/7107643840/vulnerabilities
- id: ossindex:maven:org.webjars.npm:angular:8399952428
  title: Injection Attack
  description: AngularJS offers frontend developers a scope object that attempts to
    isolate global variables from the templating work-flow and keep things lean and
    "Angular-only". This makes sense - and to be fair, the AngularJS documentation
    explicitly states that the scope object is not considered to be a sandbox. And
    indeed it is none. With a simple JavaScript trick one can break out of this "non-sandbox"
    and execute arbitrary code in window and other host objects.
  affected_package: org.webjars.npm:angular
  vulnerable_versions:
  - "<1.2.0"
  package_manager: maven
  disclosed_date: 2016-07-28
  created_date: 2016-07-28
  last_modified_date: 2016-07-28
  credit:
  - OSSIndex
  references:
  - https://code.google.com/p/mustache-security/wiki/AngularJS
  source_url: https://ossindex.net/resource/package/7107643840/vulnerabilities
- id: ossindex:maven:org.webjars.npm:angular:8399952430
  title: AngularJS Sandbox Bypass
  description: "The AngularJS sandbox can be bypassed, allowing the execution of arbitrary
    JavaScript from within the Angular scope.\n\n"
  affected_package: org.webjars.npm:angular
  vulnerable_versions:
  - ">=1.2.19 <1.2.24"
  package_manager: maven
  disclosed_date: 2016-07-28
  created_date: 2016-07-28
  last_modified_date: 2016-07-28
  credit:
  - OSSIndex
  references:
  - http://avlidienbrunn.se/angular.txt
  source_url: https://ossindex.net/resource/package/7107643840/vulnerabilities
- id: ossindex:maven:org.webjars.npm:angular:8399952527
  title: Code injection
  description: "There is a possible code injection made possible by allowing the passing
    of functions to Array.sort\n\n"
  affected_package: org.webjars.npm:angular
  vulnerable_versions:
  - ">1.3.0-beta.1 <1.3.0-rc.1"
  - ">=1.2.19 <1.2.19"
  package_manager: maven
  disclosed_date: 2016-07-28
  created_date: 2016-07-28
  last_modified_date: 2017-03-05
  credit:
  - OSSIndex
  references:
  - https://github.com/angular/angular.js/commit/b39e1d47b9a1b39a9fe34c847a81f589fba522f8
  source_url: https://ossindex.net/resource/package/7107643840/vulnerabilities
- id: ossindex:maven:org.webjars.npm:angular:8399952528
  title: Arbitrary code execution
  description: Arbitrary code execution was possible under very specific conditions.
  affected_package: org.webjars.npm:angular
  vulnerable_versions:
  - ">1.3.0-beta.1 <1.3.0-beta.14"
  package_manager: maven
  disclosed_date: 2016-07-28
  created_date: 2016-07-28
  last_modified_date: 2016-07-28
  credit:
  - OSSIndex
  references:
  - https://github.com/angular/angular.js/blob/b3b5015cb7919708ce179dc3d6f0d7d7f43ef621/CHANGELOG.md#1
  source_url: https://ossindex.net/resource/package/7107643840/vulnerabilities
- id: ossindex:maven:org.webjars.npm:angular:8399952529
  title: Angular Js Sandbox Bypass
  description: The AngularJS sandbox can be bypassed, allowing the execution of arbitrary
    JavaScript from within the Angular scope.
  affected_package: org.webjars.npm:angular
  vulnerable_versions:
  - ">1.3.0-beta.1 <1.3.0-rc.1"
  package_manager: maven
  disclosed_date: 2016-07-28
  created_date: 2016-07-28
  last_modified_date: 2016-07-28
  credit:
  - OSSIndex
  references:
  - http://avlidienbrunn.se/angular.txt#1
  source_url: https://ossindex.net/resource/package/7107643840/vulnerabilities
- id: ossindex:maven:org.webjars.npm:angular:8399952530
  title: "[Duplicate] Code injection"
  description: |-
    See https://ossindex.net/resource/vulnerability/8399952527

    There is a possible code injection made possible by allowing the passing of functions to Array.sort
  affected_package: org.webjars.npm:angular
  vulnerable_versions:
  - ">1.3.0-beta.1 <1.3.0-rc.1"
  package_manager: maven
  disclosed_date: 2016-07-28
  created_date: 2016-07-28
  last_modified_date: 2017-03-05
  credit:
  - OSSIndex
  references:
  - https://github.com/angular/angular.js/commit/b39e1d47b9a1b39a9fe34c847a81f589fba522f8#1
  source_url: https://ossindex.net/resource/package/7107643840/vulnerabilities
- id: ossindex:maven:org.webjars.npm:angular:8399952531
  title: Expression sandbox bypass
  description: 'These issues affect only applications with known server-side XSS holes
    that are also using CSP to secure their client-side code. '
  affected_package: org.webjars.npm:angular
  vulnerable_versions:
  - "<1.3.2"
  package_manager: maven
  disclosed_date: 2016-07-28
  created_date: 2016-07-28
  last_modified_date: 2016-07-28
  credit:
  - OSSIndex
  references:
  - https://github.com/angular/angular.js/blob/master/CHANGELOG.md
  source_url: https://ossindex.net/resource/package/7107643840/vulnerabilities
- id: ossindex:maven:org.webjars.npm:angular:8399952532
  title: Possible security hold with usemap attribute
  description: The attribute usemap has been blacklisted as it can be used as a security
    exploit.
  affected_package: org.webjars.npm:angular
  vulnerable_versions:
  - "<1.5.0-rc.2"
  package_manager: maven
  disclosed_date: 2016-07-28
  created_date: 2016-07-28
  last_modified_date: 2016-07-28
  credit:
  - OSSIndex
  references:
  - https://github.com/angular/angular.js/blob/master/CHANGELOG.md#1
  source_url: https://ossindex.net/resource/package/7107643840/vulnerabilities
- id: ossindex:maven:org.webjars.npm:angular:8399952533
  title: UI Redress Attack Through Improper Sanitization Of SVG Elements
  description: 'angular is susceptible to UI redress attacks. The vulnerability is
    due to the lack of proper sanitisation of an html input string by stripping all
    potentially dangerous tokens. So, an attacker can place svg elements outside of
    the containing element, leading to rendering it over other elements on the page
    (example: a login link).'
  affected_package: org.webjars.npm:angular
  vulnerable_versions:
  - "<1.5.0-beta.2"
  package_manager: maven
  disclosed_date: 2016-07-28
  created_date: 2016-07-28
  last_modified_date: 2016-07-28
  credit:
  - OSSIndex
  references:
  - https://github.com/angular/angular.js/commit/181fc567d873df065f1e84af7225deb70a8d2eb9
  - https://github.com/angular/angular.js/pull/12524
  - https://srcclr.com/security/ui-redress-attack-through-improper/javascript/s-2252
  source_url: https://ossindex.net/resource/package/7107643840/vulnerabilities
- id: ossindex:maven:org.webjars.npm:angular:8399952534
  title: Arbitrary Code Execution
  description: SVG animations tags are not being sanitized properly, resulting in
    possible arbitrary code execution.
  affected_package: org.webjars.npm:angular
  vulnerable_versions:
  - "<1.5.0-beta.2"
  package_manager: maven
  disclosed_date: 2016-07-28
  created_date: 2016-07-28
  last_modified_date: 2017-02-05
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/78.html
  - https://github.com/angular/angular.js/commit/67688d5ca00f6de4c7fe6084e2fa762a00d25610
  - https://github.com/angular/angular.js/pull/11290
  - https://srcclr.com/security/arbitrary-code-execution-through-svg/javascript/s-2253
  source_url: https://ossindex.net/resource/package/7107643840/vulnerabilities
- id: ossindex:maven:org.webjars.npm:angular:8401421233
  title: Cross Site Scripting (XSS)
  description: The linky filter is vulnerable to XSS due to its usage of the unsafeHTML
    filter.
  affected_package: org.webjars.npm:angular
  vulnerable_versions:
  - "<0.9.1"
  package_manager: maven
  disclosed_date: 2016-11-13
  created_date: 2016-11-13
  last_modified_date: 2016-11-13
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/angular/angular.js/issues/34
  source_url: https://ossindex.net/resource/package/7107643840/vulnerabilities
- id: ossindex:maven:org.webjars.npm:angular:8402281289
  title: Cross Site Scripting (XSS) when loaded from an extension
  description: "> Extension URIs (`resource://...`) bypass Content-Security-Policy
    in Chrome and Firefox and can always be loaded. Now if a site already has a XSS
    bug, and uses CSP to protect itself, but the user has an extension installed that
    uses Angular, an attacke[r] can load Angular from the extension, and Angular's
    auto-bootstrapping can be used to bypass the victim site's CSP protection.\n>
    \n> -- [github.com](https://github.com/angular/angular.js/pull/15346)"
  affected_package: org.webjars.npm:angular
  vulnerable_versions:
  - ">=1.5.0 <1.5.9"
  package_manager: maven
  disclosed_date: 2016-12-30
  created_date: 2016-12-30
  last_modified_date: 2017-02-01
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/angular/angular.js/commit/0ff10e1b56c6b7c4ac465e35c96a5886e294bac5
  - https://github.com/angular/angular.js/issues/15346
  - https://github.com/angular/angular.js/pull/15346
  source_url: https://ossindex.net/resource/package/7107643840/vulnerabilities
- id: ossindex:maven:org.webjars.npm:angular:8402281303
  title: Cross Site Scripting (XSS) through use elements referencing external SVG
  description: "> The use element can reference external svg's (same origin) and can
    include\nxlink javascript urls or foreign object that can execute xss.\n> \n>
    -- [github.com](https://github.com/angular/angular.js/pull/13453)"
  affected_package: org.webjars.npm:angular
  vulnerable_versions:
  - "<1.5.0"
  package_manager: maven
  disclosed_date: 2016-12-30
  created_date: 2016-12-30
  last_modified_date: 2016-12-30
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/angular/angular.js/issues/13453
  source_url: https://ossindex.net/resource/package/7107643840/vulnerabilities
- id: ossindex:maven:org.webjars.npm:angular:8402281308
  title: Cross Site Scripting (XSS) in server rendered templates
  description: "> When rendering Angular templates with a server-side templating engine
    like ERB or Haml it is easy to introduce XSS vulnerabilities. These vulnerabilities
    are enabled by AngularJS evaluating user-provided strings containing interpolation
    symbols (default symbols are {{ and }}).\n> \n> -- [github.com](https://github.com/angular/angular.js/issues/5601)\n"
  affected_package: org.webjars.npm:angular
  vulnerable_versions:
  - "<1.3.0-beta.10"
  package_manager: maven
  disclosed_date: 2016-12-30
  created_date: 2016-12-30
  last_modified_date: 2017-02-22
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/angular/angular.js/commit/e3f78c17d3b5d3a714402d7314094aabe7f6512a
  - https://github.com/angular/angular.js/issues/5601
  - https://github.com/angular/angular.js/issues/7496
  - https://github.com/angular/angular.js/pull/7517
  source_url: https://ossindex.net/resource/package/7107643840/vulnerabilities
- id: snykio:maven:org.webjars.npm:angular:471881
  title: Cross-site Scripting (XSS)
  description: |+
    [org.webjars.npm:angular][1] is a WebJar for angular.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The `$http` function within Angular does not perform any security
    checks using `$sce.RESOURCE_URL` on the URLs that it receives. This
    could be leveraged by an attacker to conduct XSS attacks through JSONP
    callbacks.



    [1]: https://mvnrepository.com/artifact/org.webjars.bower/angular
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.webjars.npm:angular
  vulnerable_versions:
  - "< 1.6.0-rc.2"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-79
  disclosed_date: 2015-03-17
  created_date: 2019-10-04
  last_modified_date: 2019-10-04
  credit:
  - Chirayu Krishnappa
  references:
  - https://github.com/angular/angular.js/commit/6476af83cd0418c84e034a955b12a842794385c4
  - https://github.com/angular/angular.js/issues/11352
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-471881
- id: snykio:maven:org.webjars.npm:angular:471884
  title: Cross-site Scripting (XSS)
  description: |+
    [org.webjars.npm:angular][1] is a WebJar for angular.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It is possible to conduct XSS attacks within Mozilla FireFox and
    Apple Safari browsers due to inert document created via
    `document.implementation.createHTMLDocument()`.



    [1]: https://mvnrepository.com/artifact/org.webjars.bower/angular
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.webjars.npm:angular
  vulnerable_versions:
  - "< 1.6.5"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-79
  disclosed_date: 2015-05-25
  created_date: 2019-10-04
  last_modified_date: 2019-10-04
  credit:
  - Cure53
  references:
  - https://github.com/angular/angular.js/commit/8f31f1ff43b673a24f84422d5c13d6312b2c4d94
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-471884
- id: snykio:maven:org.webjars.npm:angular:471887
  title: Denial of Service (DoS)
  description: |+
    [org.webjars.npm:angular][1] is a WebJar for angular.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). The `$sanitize` sanitizer is unable to traverse the HTML when one
    or more of the elements in the HTML have been \"clobbered\". This could
    be leveraged by an attacker to cause a Denial Of Service attack on a
    victim\'s browser.



    [1]: https://mvnrepository.com/artifact/org.webjars.bower/angular
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: org.webjars.npm:angular
  vulnerable_versions:
  - "< 1.6.3"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-400
  disclosed_date: 2017-02-10
  created_date: 2019-10-04
  last_modified_date: 2019-10-04
  credit:
  - Unknown
  references:
  - https://github.com/angular/angular.js/commit/3bb1dd5d7f7dcde6fea5a3148f8f10e92f451e9d
  - https://github.com/angular/angular.js/pull/15699
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGWEBJARSNPM-471887
