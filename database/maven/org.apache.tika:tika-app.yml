---
- id: snykio:maven:org.apache.tika:tika-app:2018-09-19
  title: Arbitrary File Write via Archive Extraction (Zip Slip)
  description: |
    [org.apache.tika:tika-app][1] is a toolkit for detecting and extracting
    metadata and structured text content from various documents using
    existing parser libraries.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It is exploited using a specially crafted zip archive, that holds path
    traversal filenames. When exploited, a filename in a malicious archive
    is concatenated to the target extraction directory, which results in the
    final path ending up outside of the target folder. For instance, a zip
    may hold a file with a \"../../file.exe\" location and thus break out of
    the target folder. If an executable or a configuration file is
    overwritten with a file containing malicious code, the problem can turn
    into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +2018-04-15 22:04:29 .....           19           19  good.txt
        +2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://github.com/apache/tika
    \n[org.apache.tika:tika-app][1] is a toolkit for detecting and extracting
    metadata and structured text content from various documents using
    existing parser libraries.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It is exploited using a specially crafted zip archive, that holds path
    traversal filenames. When exploited, a filename in a malicious archive
    is concatenated to the target extraction directory, which results in the
    final path ending up outside of the target folder. For instance, a zip
    may hold a file with a \"../../file.exe\" location and thus break out of
    the target folder. If an executable or a configuration file is
    overwritten with a file containing malicious code, the problem can turn
    into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +2018-04-15 22:04:29 .....           19           19  good.txt
        +2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://github.com/apache/tika
    \n[org.apache.tika:tika-app][1] is a toolkit for detecting and extracting
    metadata and structured text content from various documents using
    existing parser libraries.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It is exploited using a specially crafted zip archive, that holds path
    traversal filenames. When exploited, a filename in a malicious archive
    is concatenated to the target extraction directory, which results in the
    final path ending up outside of the target folder. For instance, a zip
    may hold a file with a \"../../file.exe\" location and thus break out of
    the target folder. If an executable or a configuration file is
    overwritten with a file containing malicious code, the problem can turn
    into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +2018-04-15 22:04:29 .....           19           19  good.txt
        +2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://github.com/apache/tika
    \n[org.apache.tika:tika-app][1] is a toolkit for detecting and extracting
    metadata and structured text content from various documents using
    existing parser libraries.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It is exploited using a specially crafted zip archive, that holds path
    traversal filenames. When exploited, a filename in a malicious archive
    is concatenated to the target extraction directory, which results in the
    final path ending up outside of the target folder. For instance, a zip
    may hold a file with a \"../../file.exe\" location and thus break out of
    the target folder. If an executable or a configuration file is
    overwritten with a file containing malicious code, the problem can turn
    into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +2018-04-15 22:04:29 .....           19           19  good.txt
        +2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://github.com/apache/tika
    \n[org.apache.tika:tika-app][1] is a toolkit for detecting and extracting
    metadata and structured text content from various documents using
    existing parser libraries.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It is exploited using a specially crafted zip archive, that holds path
    traversal filenames. When exploited, a filename in a malicious archive
    is concatenated to the target extraction directory, which results in the
    final path ending up outside of the target folder. For instance, a zip
    may hold a file with a \"../../file.exe\" location and thus break out of
    the target folder. If an executable or a configuration file is
    overwritten with a file containing malicious code, the problem can turn
    into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +2018-04-15 22:04:29 .....           19           19  good.txt
        +2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://github.com/apache/tika
    \n[org.apache.tika:tika-app][1] is a toolkit for detecting and extracting
    metadata and structured text content from various documents using
    existing parser libraries.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It is exploited using a specially crafted zip archive, that holds path
    traversal filenames. When exploited, a filename in a malicious archive
    is concatenated to the target extraction directory, which results in the
    final path ending up outside of the target folder. For instance, a zip
    may hold a file with a \"../../file.exe\" location and thus break out of
    the target folder. If an executable or a configuration file is
    overwritten with a file containing malicious code, the problem can turn
    into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +2018-04-15 22:04:29 .....           19           19  good.txt
        +2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://github.com/apache/tika
  affected_package: org.apache.tika:tika-app
  vulnerable_versions:
  - ">= 0.9 < 1.19"
  severity: high
  package_manager: maven
  cve:
  - CVE-2018-11762
  cwe:
  - CWE-29
  credit:
  - Tim Allison
  references:
  - https://snyk.io/research/zip-slip-vulnerability
  - https://lists.apache.org/thread.html/ab2e1af38975f5fc462ba89b517971ef892ec3d06bee12ea2258895b@%3Cdev.tika.apache.org%3E
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETIKA-72393
