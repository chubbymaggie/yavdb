---
- id: snykio:maven:org.cloudfoundry.identity:cloudfoundry-identity-server:2016-07-04
  title: SQL Injection
  description: |
    [`org.cloudfoundry.identity:cloudfoundry-identity-server`][1] Affected
    versions of the package are vulnerable to SQL Injection.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22cloudfoundry-identity-server%22
    \n[`org.cloudfoundry.identity:cloudfoundry-identity-server`][1] Affected
    versions of the package are vulnerable to SQL Injection.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22cloudfoundry-identity-server%22
  affected_package: org.cloudfoundry.identity:cloudfoundry-identity-server
  vulnerable_versions:
  - ">= 3.0.0 < 3.3.0.2"
  - ">= 3.4 < 3.4.1"
  severity: high
  package_manager: maven
  cve:
  - CVE-2016-4468
  cwe:
  - CWE-89
  credit:
  - Graham Viski
  references:
  - http://pivotal.io/security/cve-2016-4468
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGCLOUDFOUNDRYIDENTITY-31068
- id: snykio:maven:org.cloudfoundry.identity:cloudfoundry-identity-server:2016-09-27
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.cloudfoundry.identity:cloudfoundry-identity-server`][1] Affected
    versions of the package are vulnerable to Cross-site Scripting (XSS).



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22cloudfoundry-identity-server%22
    \n[`org.cloudfoundry.identity:cloudfoundry-identity-server`][1] Affected
    versions of the package are vulnerable to Cross-site Scripting (XSS).



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22cloudfoundry-identity-server%22
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.cloudfoundry.identity:cloudfoundry-identity-server
  vulnerable_versions:
  - ">= 3 < 3.2.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-0781
  cwe:
  - CWE-79
  credit:
  - GE Digital Security Team
  references:
  - https://pivotal.io/security/cve-2016-0781
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGCLOUDFOUNDRYIDENTITY-31066
- id: snykio:maven:org.cloudfoundry.identity:cloudfoundry-identity-server:2016-09-28
  title: Privilege Escalation
  description: |
    [`org.cloudfoundry.identity:cloudfoundry-identity-server`][1] Affected
    versions of the package are vulnerable to Privilege Escalation.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22cloudfoundry-identity-server%22
    \n[`org.cloudfoundry.identity:cloudfoundry-identity-server`][1] Affected
    versions of the package are vulnerable to Privilege Escalation.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22cloudfoundry-identity-server%22
  affected_package: org.cloudfoundry.identity:cloudfoundry-identity-server
  vulnerable_versions:
  - ">= 3 < 3.0.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-0732
  cwe:
  - CWE-264
  credit:
  - GE Digital Security Team
  references:
  - https://pivotal.io/security/cve-2016-0732
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGCLOUDFOUNDRYIDENTITY-31065
- id: snykio:maven:org.cloudfoundry.identity:cloudfoundry-identity-server:2016-09-28
  title: Improper Validation of Certificate Expiration
  description: |
    [`org.cloudfoundry.identity:cloudfoundry-identity-server`][1] Affected
    versions of the package do not check for certificate expiration dates by
    default.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22cloudfoundry-identity-server%22
    \n[`org.cloudfoundry.identity:cloudfoundry-identity-server`][1] Affected
    versions of the package do not check for certificate expiration dates by
    default.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22cloudfoundry-identity-server%22
  affected_package: org.cloudfoundry.identity:cloudfoundry-identity-server
  vulnerable_versions:
  - ">= 3.0.0 < 3.3.0.3"
  - ">= 3.4 < 3.4.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-5016
  cwe:
  - CWE-298
  credit:
  - Hristo Ivanov Dobtchev
  references:
  - https://pivotal.io/security/cve-2016-5016
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGCLOUDFOUNDRYIDENTITY-31070
- id: snykio:maven:org.cloudfoundry.identity:cloudfoundry-identity-server:2016-09-28
  title: Brute Force
  description: |
    [`org.cloudfoundry.identity:cloudfoundry-identity-server`][1] Affected
    versions of the package are vulnerable to Brute Force attacks via the
    reset password flow.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22cloudfoundry-identity-server%22
    \n[`org.cloudfoundry.identity:cloudfoundry-identity-server`][1] Affected
    versions of the package are vulnerable to Brute Force attacks via the
    reset password flow.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22cloudfoundry-identity-server%22
  affected_package: org.cloudfoundry.identity:cloudfoundry-identity-server
  vulnerable_versions:
  - "< 3.3.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-3084
  cwe:
  - CWE-307
  credit:
  - GE Digital Inc
  references:
  - https://pivotal.io/security/cve-2016-3084
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGCLOUDFOUNDRYIDENTITY-31067
- id: snykio:maven:org.cloudfoundry.identity:cloudfoundry-identity-server:2016-09-28
  title: Cross-site Request Forgery (CSRF)
  description: |
    [`org.cloudfoundry.identity:cloudfoundry-identity-server`][1] Multiple
    cross-site request forgery (CSRF) vulnerabilities in Pivotal Cloud
    Foundry (PCF) before 242; UAA 2.x before 2.7.4.7, 3.x before 3.3.0.5,
    and 3.4.x before 3.4.4; UAA BOSH before 11.5 and 12.x before 12.5;
    Elastic Runtime before 1.6.40, 1.7.x before 1.7.21, and 1.8.x before
    1.8.2; and Ops Manager 1.7.x before 1.7.13 and 1.8.x before 1.8.1 allow
    remote attackers to hijack the authentication of unspecified victims for
    requests that approve or deny a scope via a profile or authorize
    approval page.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22cloudfoundry-identity-server%22
    \n[`org.cloudfoundry.identity:cloudfoundry-identity-server`][1] Multiple
    cross-site request forgery (CSRF) vulnerabilities in Pivotal Cloud
    Foundry (PCF) before 242; UAA 2.x before 2.7.4.7, 3.x before 3.3.0.5,
    and 3.4.x before 3.4.4; UAA BOSH before 11.5 and 12.x before 12.5;
    Elastic Runtime before 1.6.40, 1.7.x before 1.7.21, and 1.8.x before
    1.8.2; and Ops Manager 1.7.x before 1.7.13 and 1.8.x before 1.8.1 allow
    remote attackers to hijack the authentication of unspecified victims for
    requests that approve or deny a scope via a profile or authorize
    approval page.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22cloudfoundry-identity-server%22
  affected_package: org.cloudfoundry.identity:cloudfoundry-identity-server
  vulnerable_versions:
  - ">= 3 < 3.3.0.5"
  - ">= 3.4 < 3.4.4"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-6637
  cwe:
  - CWE-352
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-6637
  - https://pivotal.io/security/cve-2016-6637
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGCLOUDFOUNDRYIDENTITY-31072
- id: snykio:maven:org.cloudfoundry.identity:cloudfoundry-identity-server:2016-09-28
  title: Open Redirect
  description: |
    [`org.cloudfoundry.identity:cloudfoundry-identity-server`][1] The OAuth
    authorization implementation in Pivotal Cloud Foundry (PCF) before 242;
    UAA 2.x before 2.7.4.7, 3.x before 3.3.0.5, and 3.4.x before 3.4.4; UAA
    BOSH before 11.5 and 12.x before 12.5; Elastic Runtime before 1.6.40,
    1.7.x before 1.7.21, and 1.8.x before 1.8.1; and Ops Manager 1.7.x
    before 1.7.13 and 1.8.x before 1.8.1 mishandles redirect\_uri
    subdomains, which allows remote attackers to obtain implicit access
    tokens via a modified subdomain.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22cloudfoundry-identity-server%22
    \n[`org.cloudfoundry.identity:cloudfoundry-identity-server`][1] The OAuth
    authorization implementation in Pivotal Cloud Foundry (PCF) before 242;
    UAA 2.x before 2.7.4.7, 3.x before 3.3.0.5, and 3.4.x before 3.4.4; UAA
    BOSH before 11.5 and 12.x before 12.5; Elastic Runtime before 1.6.40,
    1.7.x before 1.7.21, and 1.8.x before 1.8.1; and Ops Manager 1.7.x
    before 1.7.13 and 1.8.x before 1.8.1 mishandles redirect\_uri
    subdomains, which allows remote attackers to obtain implicit access
    tokens via a modified subdomain.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22cloudfoundry-identity-server%22
  affected_package: org.cloudfoundry.identity:cloudfoundry-identity-server
  vulnerable_versions:
  - ">= 3 < 3.3.0.5"
  - ">= 3.4 < 3.4.4"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-6636
  cwe:
  - CWE-601
  credit:
  - Unknown
  references:
  - https://pivotal.io/security/cve-2016-6636
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-6636
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGCLOUDFOUNDRYIDENTITY-31071
- id: snykio:maven:org.cloudfoundry.identity:cloudfoundry-identity-server:2016-09-28
  title: Remote Privilege Escalation
  description: |
    [`org.cloudfoundry.identity:cloudfoundry-identity-server`][1] The UAA
    /oauth/token endpoint in Pivotal Cloud Foundry (PCF) before 243; UAA 2.x
    before 2.7.4.8, 3.x before 3.3.0.6, and 3.4.x before 3.4.5; UAA BOSH
    before 11.7 and 12.x before 12.6; Elastic Runtime before 1.6.40, 1.7.x
    before 1.7.21, and 1.8.x before 1.8.2; and Ops Manager 1.7.x before
    1.7.13 and 1.8.x before 1.8.1 allows remote authenticated users to gain
    privileges by leveraging possession of a token.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22cloudfoundry-identity-server%22
    \n[`org.cloudfoundry.identity:cloudfoundry-identity-server`][1] The UAA
    /oauth/token endpoint in Pivotal Cloud Foundry (PCF) before 243; UAA 2.x
    before 2.7.4.8, 3.x before 3.3.0.6, and 3.4.x before 3.4.5; UAA BOSH
    before 11.7 and 12.x before 12.6; Elastic Runtime before 1.6.40, 1.7.x
    before 1.7.21, and 1.8.x before 1.8.2; and Ops Manager 1.7.x before
    1.7.13 and 1.8.x before 1.8.1 allows remote authenticated users to gain
    privileges by leveraging possession of a token.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22cloudfoundry-identity-server%22
  affected_package: org.cloudfoundry.identity:cloudfoundry-identity-server
  vulnerable_versions:
  - ">= 3.0.0 < 3.3.0.6"
  - ">= 3.4.0 < 3.4.5"
  - ">= 3.5.0 < 3.7.3"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-6651
  cwe:
  - CWE-264
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-6651
  - http://www.securityfocus.com/bid/93241
  - https://pivotal.io/security/cve-2016-6651
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGCLOUDFOUNDRYIDENTITY-31073
- id: snykio:maven:org.cloudfoundry.identity:cloudfoundry-identity-server:2017-03-31
  title: Denial of Service (DoS)
  description: |+
    [`org.cloudfoundry.identity:cloudfoundry-identity-server`][1] An issue
    was discovered in Cloud Foundry release v247 through v252, UAA
    stand-alone release v3.9.0 through v3.11.0, and UAA Bosh Release v21
    through v26. There is a potential to subject the UAA OAuth clients to a
    denial of service attack.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22cloudfoundry-identity-server%22
    \n[`org.cloudfoundry.identity:cloudfoundry-identity-server`][1] An issue
    was discovered in Cloud Foundry release v247 through v252, UAA
    stand-alone release v3.9.0 through v3.11.0, and UAA Bosh Release v21
    through v26. There is a potential to subject the UAA OAuth clients to a
    denial of service attack.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22cloudfoundry-identity-server%22
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: org.cloudfoundry.identity:cloudfoundry-identity-server
  vulnerable_versions:
  - ">= 3.9 < 3.11.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-4960
  cwe:
  - CWE-400
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-4960
  - https://www.cloudfoundry.org/cve-2017-4960/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGCLOUDFOUNDRYIDENTITY-31436
- id: snykio:maven:org.cloudfoundry.identity:cloudfoundry-identity-server:2017-03-31
  title: Session Fixation
  description: |
    [`org.cloudfoundry.identity:cloudfoundry-identity-server`][1] Affected
    versions of this package are vulnerable to session fixation attacks via
    the User Account and Authentication (UAA). When UAA is configured to
    authenticate against external SAML or OpenID Connect based identity
    providers.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22cloudfoundry-identity-server%22
    \n[`org.cloudfoundry.identity:cloudfoundry-identity-server`][1] Affected
    versions of this package are vulnerable to session fixation attacks via
    the User Account and Authentication (UAA). When UAA is configured to
    authenticate against external SAML or OpenID Connect based identity
    providers.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22cloudfoundry-identity-server%22
  affected_package: org.cloudfoundry.identity:cloudfoundry-identity-server
  vulnerable_versions:
  - ">= 3 <= 3.9.1"
  severity: low
  package_manager: maven
  cve:
  - CVE-2017-4963
  cwe:
  - CWE-384
  credit:
  - GE Digital Security Team
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-4963
  - https://www.cloudfoundry.org/cve-2017-4963/
  - https://pivotal.io/security/cve-2017-4963
  - https://github.com/cloudfoundry/uaa/releases/tag/2.7.4.13
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGCLOUDFOUNDRYIDENTITY-31412
- id: snykio:maven:org.cloudfoundry.identity:cloudfoundry-identity-server:2017-04-21
  title: Blind SQL Injection
  description: |
    [`org.cloudfoundry.identity:cloudfoundry-identity-server`][1] Affected
    versions of this package are vulnerable to Blind SQL Injection attacks
    via the User Account and Authentication (UAA). The `client_id` string
    was not properly validated.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22cloudfoundry-identity-server%22
    \n[`org.cloudfoundry.identity:cloudfoundry-identity-server`][1] Affected
    versions of this package are vulnerable to Blind SQL Injection attacks
    via the User Account and Authentication (UAA). The `client_id` string
    was not properly validated.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22cloudfoundry-identity-server%22
  affected_package: org.cloudfoundry.identity:cloudfoundry-identity-server
  vulnerable_versions:
  - ">= 3. <= 3.9.1"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-4972
  cwe:
  - CWE-89
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-4972
  - https://www.cloudfoundry.org/CVE-2017-4972
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGCLOUDFOUNDRYIDENTITY-31419
- id: snykio:maven:org.cloudfoundry.identity:cloudfoundry-identity-server:2017-04-22
  title: Privilege Escalation
  description: |
    [`org.cloudfoundry.identity:cloudfoundry-identity-server`][1] Affected
    versions of this package are vulnerable to Privilege Escalations via the
    User Account and Authentication (UAA). Any user could pass a malicious
    token to a group endpoint, causing an elevation of privileges.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22cloudfoundry-identity-server%22
    \n[`org.cloudfoundry.identity:cloudfoundry-identity-server`][1] Affected
    versions of this package are vulnerable to Privilege Escalations via the
    User Account and Authentication (UAA). Any user could pass a malicious
    token to a group endpoint, causing an elevation of privileges.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22cloudfoundry-identity-server%22
  affected_package: org.cloudfoundry.identity:cloudfoundry-identity-server
  vulnerable_versions:
  - ">= 3 <= 3.9.1"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-4973
  cwe:
  - CWE-265
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-4973
  - https://www.cloudfoundry.org/CVE-2017-4973
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGCLOUDFOUNDRYIDENTITY-31417
- id: snykio:maven:org.cloudfoundry.identity:cloudfoundry-identity-server:2017-05-02
  title: Blind SQL Injection
  description: |
    [`org.cloudfoundry.identity:cloudfoundry-identity-server`][1] Affected
    versions of this package are vulnerable to Blind SQL Injection attacks
    via the User Account and Authentication (UAA).



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22cloudfoundry-identity-server%22
    \n[`org.cloudfoundry.identity:cloudfoundry-identity-server`][1] Affected
    versions of this package are vulnerable to Blind SQL Injection attacks
    via the User Account and Authentication (UAA).



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22cloudfoundry-identity-server%22
  affected_package: org.cloudfoundry.identity:cloudfoundry-identity-server
  vulnerable_versions:
  - ">= 3 <= 3.9.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-4974
  cwe:
  - CWE-89
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-4974
  - https://www.cloudfoundry.org/CVE-2017-4974
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGCLOUDFOUNDRYIDENTITY-31445
