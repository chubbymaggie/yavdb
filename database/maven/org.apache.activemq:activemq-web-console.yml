---
- id: ossindex:maven:org.apache.activemq:activemq-web-console:2015-02-12
  title: '[CVE-2014-8110]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Multiple cross-site scripting (XSS) vulnerabilities in the web based
    administration console in Apache ActiveMQ 5.x before 5.10.1 allow remote attackers
    to inject arbitrary web script or HTML via unspecified vectors.
  affected_package: org.apache.activemq:activemq-web-console
  vulnerable_versions:
  - ">=5.0.0 <=5.10.0"
  package_manager: maven
  cve:
  - CVE-2014-8110
  credit:
  - OSSIndex
  references:
  - http://activemq.apache.org/security-advisories.data/CVE-2014-8110-announcement.txt
  - http://seclists.org/oss-sec/2015/q1/427
  - http://www.securityfocus.com/bid/72511
  - http://xforce.iss.net/xforce/xfdb/100724
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/100724
  source_url: https://ossindex.net/resource/package/7015390440/vulnerabilities
- id: ossindex:maven:org.apache.activemq:activemq-web-console:2016-04-07
  title: "[CVE-2016-0734] The web-based administration console in Apache ActiveMQ
    5.x before 5.13.2 does n..."
  description: The web-based administration console in Apache ActiveMQ 5.x before
    5.13.2 does not send an X-Frame-Options HTTP header, which makes it easier for
    remote attackers to conduct clickjacking attacks via a crafted web page that contains
    a (1) FRAME or (2) IFRAME element.
  affected_package: org.apache.activemq:activemq-web-console
  vulnerable_versions:
  - ">=5.0.0 <=5.13.1"
  package_manager: maven
  cve:
  - CVE-2016-0734
  credit:
  - OSSIndex
  references:
  - http://activemq.apache.org/security-advisories.data/CVE-2016-0734-announcement.txt
  - http://www.openwall.com/lists/oss-security/2016/03/10/11
  - http://www.securityfocus.com/bid/84321
  - http://www.securitytracker.com/id/1035327
  - https://access.redhat.com/errata/RHSA-2016:1424
  source_url: https://ossindex.net/resource/package/7015390440/vulnerabilities
- id: ossindex:maven:org.apache.activemq:activemq-web-console:2016-08-05
  title: '[CVE-2016-0782]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: The administration web console in Apache ActiveMQ 5.x before 5.11.4,
    5.12.x before 5.12.3, and 5.13.x before 5.13.2 allows remote authenticated users
    to conduct cross-site scripting (XSS) attacks and consequently obtain sensitive
    information from a Java memory dump via vectors related to creating a queue.
  affected_package: org.apache.activemq:activemq-web-console
  vulnerable_versions:
  - ">=5.0.0 <=5.11.3"
  package_manager: maven
  cve:
  - CVE-2016-0782
  credit:
  - OSSIndex
  references:
  - http://activemq.apache.org/security-advisories.data/CVE-2016-0782-announcement.txt
  - http://packetstormsecurity.com/files/136215/Apache-ActiveMQ-5.13.0-Cross-Site-Scripting.html
  - http://www.securityfocus.com/archive/1/archive/1/537760/100/0/threaded
  - http://www.securitytracker.com/id/1035328
  - https://access.redhat.com/errata/RHSA-2016:1424
  - https://bugzilla.redhat.com/show_bug.cgi?id=1317516
  source_url: https://ossindex.net/resource/package/7015390440/vulnerabilities
- id: snykio:maven:org.apache.activemq:activemq-web-console:2016-06-14
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.apache.activemq:activemq-web-console`][1] is an open source
    messaging and Integration Patterns server.

    Multiple cross-site scripting (XSS) vulnerabilities in the web based
    administration console in Apache ActiveMQ 5.x before 5.10.1 allow remote
    attackers to inject arbitrary web script or HTML via unspecified
    vectors.



    [1]: http://activemq.apache.org/
    \n[`org.apache.activemq:activemq-web-console`][1] is an open source
    messaging and Integration Patterns server.

    Multiple cross-site scripting (XSS) vulnerabilities in the web based
    administration console in Apache ActiveMQ 5.x before 5.10.1 allow remote
    attackers to inject arbitrary web script or HTML via unspecified
    vectors.



    [1]: http://activemq.apache.org/
    \n[`org.apache.activemq:activemq-web-console`][1] is an open source
    messaging and Integration Patterns server.

    Multiple cross-site scripting (XSS) vulnerabilities in the web based
    administration console in Apache ActiveMQ 5.x before 5.10.1 allow remote
    attackers to inject arbitrary web script or HTML via unspecified
    vectors.



    [1]: http://activemq.apache.org/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.apache.activemq:activemq-web-console
  vulnerable_versions:
  - ">= 5.0.0 <= 5.10.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-8110
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-8110
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEACTIVEMQ-30500
- id: snykio:maven:org.apache.activemq:activemq-web-console:2016-06-14
  title: Clickjacking
  description: |
    [`org.apache.activemq:activemq-web-console`][1] is an open source
    messaging and Integration Patterns server.

    The web-based administration console in Apache ActiveMQ 5.x before
    5.13.2 does not send an X-Frame-Options HTTP header, which makes it
    easier for remote attackers to conduct clickjacking attacks via a
    crafted web page that contains a (1) FRAME or (2) IFRAME element.



    [1]: http://activemq.apache.org/
    \n[`org.apache.activemq:activemq-web-console`][1] is an open source
    messaging and Integration Patterns server.

    The web-based administration console in Apache ActiveMQ 5.x before
    5.13.2 does not send an X-Frame-Options HTTP header, which makes it
    easier for remote attackers to conduct clickjacking attacks via a
    crafted web page that contains a (1) FRAME or (2) IFRAME element.



    [1]: http://activemq.apache.org/
    \n[`org.apache.activemq:activemq-web-console`][1] is an open source
    messaging and Integration Patterns server.

    The web-based administration console in Apache ActiveMQ 5.x before
    5.13.2 does not send an X-Frame-Options HTTP header, which makes it
    easier for remote attackers to conduct clickjacking attacks via a
    crafted web page that contains a (1) FRAME or (2) IFRAME element.



    [1]: http://activemq.apache.org/
  affected_package: org.apache.activemq:activemq-web-console
  vulnerable_versions:
  - ">= 5.0.0 <= 5.13.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-0734
  cwe:
  - CWE-254
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-0734
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEACTIVEMQ-30501
- id: snykio:maven:org.apache.activemq:activemq-web-console:2016-08-19
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.apache.activemq:activemq-web-console`][1] is an open source
    messaging and Integration Patterns server.

    The administration web console in Apache ActiveMQ 5.x before 5.11.4,
    5.12.x before 5.12.3, and 5.13.x before 5.13.2 allows remote
    authenticated users to conduct cross-site scripting (XSS) attacks and
    consequently obtain sensitive information from a Java memory dump via
    vectors related to creating a queue.



    [1]: http://activemq.apache.org/
    \n[`org.apache.activemq:activemq-web-console`][1] is an open source
    messaging and Integration Patterns server.

    The administration web console in Apache ActiveMQ 5.x before 5.11.4,
    5.12.x before 5.12.3, and 5.13.x before 5.13.2 allows remote
    authenticated users to conduct cross-site scripting (XSS) attacks and
    consequently obtain sensitive information from a Java memory dump via
    vectors related to creating a queue.



    [1]: http://activemq.apache.org/
    \n[`org.apache.activemq:activemq-web-console`][1] is an open source
    messaging and Integration Patterns server.

    The administration web console in Apache ActiveMQ 5.x before 5.11.4,
    5.12.x before 5.12.3, and 5.13.x before 5.13.2 allows remote
    authenticated users to conduct cross-site scripting (XSS) attacks and
    consequently obtain sensitive information from a Java memory dump via
    vectors related to creating a queue.



    [1]: http://activemq.apache.org/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.apache.activemq:activemq-web-console
  vulnerable_versions:
  - ">= 5.0.0 <= 5.11.3"
  severity: low
  package_manager: maven
  cve:
  - CVE-2016-0782
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-0782
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEACTIVEMQ-30502
- id: snykio:maven:org.apache.activemq:activemq-web-console:2016-12-12
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.apache.activemq:activemq-web-console`][1] is an open source
    messaging and Integration Patterns server.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS) via the web based administration console. The root cause of this
    issue is improper user data output validation.



    [1]: http://activemq.apache.org/
    \n[`org.apache.activemq:activemq-web-console`][1] is an open source
    messaging and Integration Patterns server.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS) via the web based administration console. The root cause of this
    issue is improper user data output validation.



    [1]: http://activemq.apache.org/
    \n[`org.apache.activemq:activemq-web-console`][1] is an open source
    messaging and Integration Patterns server.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS) via the web based administration console. The root cause of this
    issue is improper user data output validation.



    [1]: http://activemq.apache.org/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.apache.activemq:activemq-web-console
  vulnerable_versions:
  - ">= 5 < 5.14.2"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-6810
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - http://seclists.org/oss-sec/2016/q4/648
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEACTIVEMQ-30503
- id: snykio:maven:org.apache.activemq:activemq-web-console:2018-08-24
  title: Cross-site Scripting (XSS)
  description: |+
    [org.apache.activemq:activemq-web-console][1] is a high performance
    Apache 2.0 licensed Message Broker and JMS 1.1 implementation.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks via the `QueueFilter` parameter.



    [1]: https://github.com/apache/activemq
    \n[org.apache.activemq:activemq-web-console][1] is a high performance
    Apache 2.0 licensed Message Broker and JMS 1.1 implementation.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks via the `QueueFilter` parameter.



    [1]: https://github.com/apache/activemq
    \n[org.apache.activemq:activemq-web-console][1] is a high performance
    Apache 2.0 licensed Message Broker and JMS 1.1 implementation.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks via the `QueueFilter` parameter.



    [1]: https://github.com/apache/activemq
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.apache.activemq:activemq-web-console
  vulnerable_versions:
  - "< 5.15.5"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-8006
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1622774
  - https://github.com/apache/activemq/commit/d8c80a98212ee5d73a281483a2f8b3f517465f62
  - https://issues.apache.org/jira/browse/AMQ-6954
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEACTIVEMQ-32491
