---
- id: ossindex:maven:org.springframework.security3:spring-security-core:2017-01-06
  title: "[CVE-2016-9879] An issue was discovered in Pivotal Spring Security before
    3.2.10, 4.1.x before 4..."
  description: An issue was discovered in Pivotal Spring Security before 3.2.10, 4.1.x
    before 4.1.4, and 4.2.x before 4.2.1. Spring Security does not consider URL path
    parameters when processing security constraints. By adding a URL path parameter
    with an encoded "/" to a request, an attacker may be able to bypass a security
    constraint. The root cause of this issue is a lack of clarity regarding the handling
    of path parameters in the Servlet Specification. Some Servlet containers include
    path parameters in the value returned for getPathInfo() and some do not. Spring
    Security uses the value returned by getPathInfo() as part of the process of mapping
    requests to security constraints. The unexpected presence of path parameters can
    cause a constraint to be bypassed. Users of Apache Tomcat (all current versions)
    are not affected by this vulnerability since Tomcat follows the guidance previously
    provided by the Servlet Expert group and strips path parameters from the value
    returned by getContextPath(), getServletPath(), and getPathInfo(). Users of other
    Servlet containers based on Apache Tomcat may or may not be affected depending
    on whether or not the handling of path parameters has been modified. Users of
    IBM WebSphere Application Server 8.5.x are known to be affected. Users of other
    containers that implement the Servlet specification may be affected.
  affected_package: org.springframework.security3:spring-security-core
  vulnerable_versions:
  - 3.2.0
  - 3.2.1
  - 3.2.2
  - 3.2.3
  - 3.2.4
  - 3.2.5
  - 3.2.6
  - 3.2.7
  - 3.2.8
  - 3.2.9
  - 4.1.0
  - 4.1.1
  - 4.1.2
  - 4.1.3
  - 4.2.0
  package_manager: maven
  cve:
  - CVE-2016-9879
  credit:
  - OSSIndex
  references:
  - http://www.securityfocus.com/bid/95142
  - https://access.redhat.com/errata/RHSA-2017:1832
  - https://pivotal.io/security/cve-2016-9879
  source_url: https://ossindex.net/resource/package/8159904509/vulnerabilities
- id: ossindex:maven:org.springframework.security3:spring-security-core:2017-01-30
  title: Cross Site Scripting in sample apps
  description: There is an exploitable XSS in some provided sample applications.
  affected_package: org.springframework.security3:spring-security-core
  vulnerable_versions:
  - "<1.0.4"
  package_manager: maven
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/SpringSource/spring-security/issues/709
  source_url: https://ossindex.net/resource/package/8159904509/vulnerabilities
- id: ossindex:maven:org.springframework.security3:spring-security-core:2017-01-30
  title: "[Unconfirmed] Possible Cross-site request forgery (CSRF) in SwitchUserFilter"
  description: "> It seems the `SwitchUserFilter` responds to all HTTP methods, making
    it vulnerable to CSRF attacks. \n> \n> -- [github.com](https://github.com/spring-projects/spring-security/issues/4183)"
  affected_package: org.springframework.security3:spring-security-core
  vulnerable_versions:
  - ">=3.2"
  package_manager: maven
  credit:
  - OSSIndex
  references:
  - https://github.com/spring-projects/spring-security/issues/4183
  source_url: https://ossindex.net/resource/package/8159904509/vulnerabilities
- id: ossindex:maven:org.springframework.security3:spring-security-core:2017-01-30
  title: BREACH attack possible in CSRF tokens
  description: "> The CSRF tokens generated by Spring are vulnerable to a BREACH attack.\n>
    \n> ...\n> \n> This only occurs when you turn on CSRF protection in Spring and
    also have HTTP compression enabled somewhere in your web server stack.\n> \n>
    -- [github.com](https://github.com/spring-projects/spring-security/issues/4001)"
  affected_package: org.springframework.security3:spring-security-core
  vulnerable_versions:
  - "<5.0.0"
  package_manager: maven
  credit:
  - OSSIndex
  references:
  - http://breachattack.com
  - https://github.com/spring-projects/spring-security/issues/4001
  - https://github.com/spring-projects/spring-security/pull/4042
  source_url: https://ossindex.net/resource/package/8159904509/vulnerabilities
- id: ossindex:maven:org.springframework.security3:spring-security-core:2017-02-12
  title: "[CVE-2012-5055] DaoAuthenticationProvider can reveal which usernames are
    valid"
  description: "> Spring Security's DaoAuthenticationProvider authenticates users
    by utilizing the PasswordEncoder interface to compare the submitted password with
    the actual password. If a user is not found, the comparison is skipped which,
    depending on the PasswordEncoder implementation, can result in a significant difference
    in the amount of time required to attempt to authenticate an actual user versus
    a user that does not exist. This opens up the possibility of a side channel attack
    that would enable a malicious user to determine if a username is valid.\n> \n>
    -- [jira.spring.io](https://jira.spring.io/browse/SEC-2056)"
  affected_package: org.springframework.security3:spring-security-core
  vulnerable_versions:
  - ">=2.0.0 <2.0.8"
  - ">=3.0.0.RELEASE <3.0.8"
  - ">=3.1.0.RELEASE <3.1.3"
  package_manager: maven
  credit:
  - OSSIndex
  references:
  - https://github.com/spring-projects/spring-security/issues/2280
  - https://github.com/victims/victims-cve-db/blob/master/database/java/2012/5055.yaml
  - https://jira.spring.io/browse/SEC-2056
  source_url: https://ossindex.net/resource/package/8159904509/vulnerabilities
- id: ossindex:maven:org.springframework.security3:spring-security-core:2017-05-25
  title: "[CVE-2016-5007]  Permissions, Privileges, and Access Controls"
  description: Both Spring Security 3.2.x, 4.0.x, 4.1.0 and the Spring Framework 3.2.x,
    4.0.x, 4.1.x, 4.2.x rely on URL pattern mappings for authorization and for mapping
    requests to controllers respectively. Differences in the strictness of the pattern
    matching mechanisms, for example with regards to space trimming in path segments,
    can lead Spring Security to not recognize certain paths as not protected that
    are in fact mapped to Spring MVC controllers that should be protected. The problem
    is compounded by the fact that the Spring Framework provides richer features with
    regards to pattern matching as well as by the fact that pattern matching in each
    Spring Security and the Spring Framework can easily be customized creating additional
    differences.
  affected_package: org.springframework.security3:spring-security-core
  vulnerable_versions:
  - 3.2.0
  - 3.2.1
  - 3.2.10
  - 3.2.2
  - 3.2.3
  - 3.2.4
  - 3.2.5
  - 3.2.6
  - 3.2.7
  - 3.2.8
  - 3.2.9
  - 4.0.0
  - 4.0.1
  - 4.0.2
  - 4.0.3
  - 4.0.4
  - 4.1.0
  package_manager: maven
  cve:
  - CVE-2016-5007
  credit:
  - OSSIndex
  references:
  - http://www.securityfocus.com/bid/91687
  - https://pivotal.io/security/cve-2016-5007
  source_url: https://ossindex.net/resource/package/8159904509/vulnerabilities
- id: ossindex:maven:org.springframework.security3:spring-security-core:2017-05-25
  title: "[CVE-2014-3527]  Improper Authentication"
  description: When using the CAS Proxy ticket authentication from Spring Security
    3.1 to 3.2.4 a malicious CAS Service could trick another CAS Service into authenticating
    a proxy ticket that was not associated. This is due to the fact that the proxy
    ticket authentication uses the information from the HttpServletRequest which is
    populated based upon untrusted information within the HTTP request. This means
    if there are access control restrictions on which CAS services can authenticate
    to one another, those restrictions can be bypassed. If users are not using CAS
    Proxy tickets and not basing access control decisions based upon the CAS Service,
    then there is no impact to users.
  affected_package: org.springframework.security3:spring-security-core
  vulnerable_versions:
  - 3.1.0
  - 3.1.1
  - 3.1.2
  - 3.1.3
  - 3.1.4
  - 3.2.0
  - 3.2.1
  - 3.2.2
  - 3.2.3
  - 3.2.4
  package_manager: maven
  cve:
  - CVE-2014-3527
  credit:
  - OSSIndex
  references:
  - https://pivotal.io/security/cve-2014-3527
  source_url: https://ossindex.net/resource/package/8159904509/vulnerabilities
- id: ossindex:maven:org.springframework.security3:spring-security-core:2017-05-25
  title: "[CVE-2014-0097]  Improper Authentication"
  description: The ActiveDirectoryLdapAuthenticator in Spring Security 3.2.0 to 3.2.1
    and 3.1.0 to 3.1.5 does not check the password length. If the directory allows
    anonymous binds then it may incorrectly authenticate a user who supplies an empty
    password.
  affected_package: org.springframework.security3:spring-security-core
  vulnerable_versions:
  - 3.1.0
  - 3.1.1
  - 3.1.2
  - 3.1.3
  - 3.1.4
  - 3.1.5
  - 3.2.0
  - 3.2.1
  package_manager: maven
  cve:
  - CVE-2014-0097
  credit:
  - OSSIndex
  references:
  - https://pivotal.io/security/cve-2014-0097
  source_url: https://ossindex.net/resource/package/8159904509/vulnerabilities
