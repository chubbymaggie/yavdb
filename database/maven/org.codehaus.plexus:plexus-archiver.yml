---
- id: snykio:maven:org.codehaus.plexus:plexus-archiver:2018-04-17
  title: Arbitrary File Write via Archive Extraction (Zip Slip)
  description: |
    [`org.codehaus.plexus:plexus-archiver`][1] is a Collection of Plexus
    components to create archives or extract files out of an archive to a
    directory with a unified Archiver/UnArchiver API whatever the archive
    format is.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        ++2018-04-15 22:04:29 .....           19           19  good.txt
        ++2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://github.com/codehaus-plexus/plexus-archiver
    \n[`org.codehaus.plexus:plexus-archiver`][1] is a Collection of Plexus
    components to create archives or extract files out of an archive to a
    directory with a unified Archiver/UnArchiver API whatever the archive
    format is.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        ++2018-04-15 22:04:29 .....           19           19  good.txt
        ++2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://github.com/codehaus-plexus/plexus-archiver
    \n[`org.codehaus.plexus:plexus-archiver`][1] is a Collection of Plexus
    components to create archives or extract files out of an archive to a
    directory with a unified Archiver/UnArchiver API whatever the archive
    format is.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        ++2018-04-15 22:04:29 .....           19           19  good.txt
        ++2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://github.com/codehaus-plexus/plexus-archiver
    \n[`org.codehaus.plexus:plexus-archiver`][1] is a Collection of Plexus
    components to create archives or extract files out of an archive to a
    directory with a unified Archiver/UnArchiver API whatever the archive
    format is.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        ++2018-04-15 22:04:29 .....           19           19  good.txt
        ++2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://github.com/codehaus-plexus/plexus-archiver
    \n[`org.codehaus.plexus:plexus-archiver`][1] is a Collection of Plexus
    components to create archives or extract files out of an archive to a
    directory with a unified Archiver/UnArchiver API whatever the archive
    format is.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        ++2018-04-15 22:04:29 .....           19           19  good.txt
        ++2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://github.com/codehaus-plexus/plexus-archiver
    \n[`org.codehaus.plexus:plexus-archiver`][1] is a Collection of Plexus
    components to create archives or extract files out of an archive to a
    directory with a unified Archiver/UnArchiver API whatever the archive
    format is.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        ++2018-04-15 22:04:29 .....           19           19  good.txt
        ++2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://github.com/codehaus-plexus/plexus-archiver
  affected_package: org.codehaus.plexus:plexus-archiver
  vulnerable_versions:
  - "< 3.6.0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2018-1002200
  cwe:
  - CWE-29
  credit:
  - Snyk Security research Team
  references:
  - https://github.com/codehaus-plexus/plexus-archiver/pull/87
  - https://github.com/codehaus-plexus/plexus-archiver/commit/f8f4233508193b70df33759ae9dc6154d69c2ea8
  - https://snyk.io/research/zip-slip-vulnerability
  - https://github.com/snyk/zip-slip-vulnerability
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGCODEHAUSPLEXUS-31680
