---
- id: ossindex:maven:com.rabbitmq.jms:rabbitmq-jms:2017-08-02
  title: Deserialization of untrusted data
  description: "> ObjectMessage#getObject currently would deserialize any value without
    performing input validation. \n> \n> -- [github.com](https://github.com/rabbitmq/rabbitmq-jms-client/issues/3)"
  affected_package: com.rabbitmq.jms:rabbitmq-jms
  vulnerable_versions:
  - "<1.5.0"
  package_manager: maven
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/502.html
  - https://github.com/rabbitmq/rabbitmq-jms-client/commit/95ae7401c0f007d5c8e6618ab009c171ce633916
  - https://github.com/rabbitmq/rabbitmq-jms-client/issues/3
  - https://github.com/rabbitmq/rabbitmq-jms-client/pull/4
  source_url: https://ossindex.net/resource/package/8400404510/vulnerabilities
- id: snykio:maven:com.rabbitmq.jms:rabbitmq-jms:2016-07-18
  title: Deserialization of untrusted data
  description: "[`com.rabbitmq.jms:rabbitmq-jms`][1] ObjectMessages in JMS can be
    used\nto transfer arbitrary Java objects which are then deserialized before or\nat
    the time of being passed on to message listeners. This opens message\nconsumers
    up to a range of attacks that exploit issues in Java object\nserialization. **Note:**
    An attacker must authenticate with RabbitMQ in\norder to carry out the attack.\n\n#
    Details   {#details}\n\nSerialization is a process of converting an object into
    a sequence of\nbytes which can be persisted to a disk or database or can be sent\nthrough
    streams. The reverse process of creating object from sequence of\nbytes is called
    deserialization. Serialization is commonly used for\ncommunication (sharing objects
    between multiple hosts) and persistence\n(store the object state in a file or
    a database). It is an integral part\nof popular protocols like *Remote Method
    Invocation (RMI)*, *Java\nManagement Extension (JMX)*, *Java Messaging System
    (JMS)*, *Action\nMessage Format (AMF)*, *Java Server Faces (JSF) ViewState*, etc.\n\n*Deserialization
    of untrusted data* ([CWE-502][2]), is when the\napplication deserializes untrusted
    data without sufficiently verifying\nthat the resulting data will be valid, letting
    the attacker to control\nthe state or the flow of the execution.\n\nJava deserialization
    issues have been known for years. However, interest\nin the issue intensified
    greatly in 2015, when classes that could be\nabused to achieve remote code execution
    were found in a [popular library\n(Apache Commons Collection)][3]. These classes
    were used in zero-days\naffecting IBM WebSphere, Oracle WebLogic and many other
    products.\n\nAn attacker just needs to identify a piece of software that has both
    a\nvulnerable class on its path, and performs deserialization on untrusted\ndata.
    Then all they need to do is send the payload into the\ndeserializer, getting the
    command executed.\n\n> Developers put too much trust in Java Object Serialization.
    Some even\n> de-serialize objects pre-authentication. When deserializing an Object\n>
    in Java you typically cast it to an expected type, and therefore\n> Java\\'s strict
    type system will ensure you only get valid object\n> trees. Unfortunately, by
    the time the type checking happens, platform\n> code has already created and executed
    significant logic. So, before\n> the final type is checked a lot of code is executed
    from the\n> readObject() methods of various objects, all of which is out of the\n>
    developer\\'s control. By combining the readObject() methods of various\n> classes
    which are available on the classpath of the vulnerable\n> application an attacker
    can execute functions (including calling\n> Runtime.exec() to execute local OS
    commands).\n> \n> * Apache Blog\n\n\n\n[1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22rabbitmq-jms%22\n[2]:
    https://cwe.mitre.org/data/definitions/502.html\n[3]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078\n\\n[`com.rabbitmq.jms:rabbitmq-jms`][1]
    ObjectMessages in JMS can be used\nto transfer arbitrary Java objects which are
    then deserialized before or\nat the time of being passed on to message listeners.
    This opens message\nconsumers up to a range of attacks that exploit issues in
    Java object\nserialization. **Note:** An attacker must authenticate with RabbitMQ
    in\norder to carry out the attack.\n\n# Details   {#details}\n\nSerialization
    is a process of converting an object into a sequence of\nbytes which can be persisted
    to a disk or database or can be sent\nthrough streams. The reverse process of
    creating object from sequence of\nbytes is called deserialization. Serialization
    is commonly used for\ncommunication (sharing objects between multiple hosts) and
    persistence\n(store the object state in a file or a database). It is an integral
    part\nof popular protocols like *Remote Method Invocation (RMI)*, *Java\nManagement
    Extension (JMX)*, *Java Messaging System (JMS)*, *Action\nMessage Format (AMF)*,
    *Java Server Faces (JSF) ViewState*, etc.\n\n*Deserialization of untrusted data*
    ([CWE-502][2]), is when the\napplication deserializes untrusted data without sufficiently
    verifying\nthat the resulting data will be valid, letting the attacker to control\nthe
    state or the flow of the execution.\n\nJava deserialization issues have been known
    for years. However, interest\nin the issue intensified greatly in 2015, when classes
    that could be\nabused to achieve remote code execution were found in a [popular
    library\n(Apache Commons Collection)][3]. These classes were used in zero-days\naffecting
    IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs
    to identify a piece of software that has both a\nvulnerable class on its path,
    and performs deserialization on untrusted\ndata. Then all they need to do is send
    the payload into the\ndeserializer, getting the command executed.\n\n> Developers
    put too much trust in Java Object Serialization. Some even\n> de-serialize objects
    pre-authentication. When deserializing an Object\n> in Java you typically cast
    it to an expected type, and therefore\n> Java\\'s strict type system will ensure
    you only get valid object\n> trees. Unfortunately, by the time the type checking
    happens, platform\n> code has already created and executed significant logic.
    So, before\n> the final type is checked a lot of code is executed from the\n>
    readObject() methods of various objects, all of which is out of the\n> developer\\'s
    control. By combining the readObject() methods of various\n> classes which are
    available on the classpath of the vulnerable\n> application an attacker can execute
    functions (including calling\n> Runtime.exec() to execute local OS commands).\n>
    \n> * Apache Blog\n\n\n\n[1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22rabbitmq-jms%22\n[2]:
    https://cwe.mitre.org/data/definitions/502.html\n[3]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078\n\\n[`com.rabbitmq.jms:rabbitmq-jms`][1]
    ObjectMessages in JMS can be used\nto transfer arbitrary Java objects which are
    then deserialized before or\nat the time of being passed on to message listeners.
    This opens message\nconsumers up to a range of attacks that exploit issues in
    Java object\nserialization. **Note:** An attacker must authenticate with RabbitMQ
    in\norder to carry out the attack.\n\n# Details   {#details}\n\nSerialization
    is a process of converting an object into a sequence of\nbytes which can be persisted
    to a disk or database or can be sent\nthrough streams. The reverse process of
    creating object from sequence of\nbytes is called deserialization. Serialization
    is commonly used for\ncommunication (sharing objects between multiple hosts) and
    persistence\n(store the object state in a file or a database). It is an integral
    part\nof popular protocols like *Remote Method Invocation (RMI)*, *Java\nManagement
    Extension (JMX)*, *Java Messaging System (JMS)*, *Action\nMessage Format (AMF)*,
    *Java Server Faces (JSF) ViewState*, etc.\n\n*Deserialization of untrusted data*
    ([CWE-502][2]), is when the\napplication deserializes untrusted data without sufficiently
    verifying\nthat the resulting data will be valid, letting the attacker to control\nthe
    state or the flow of the execution.\n\nJava deserialization issues have been known
    for years. However, interest\nin the issue intensified greatly in 2015, when classes
    that could be\nabused to achieve remote code execution were found in a [popular
    library\n(Apache Commons Collection)][3]. These classes were used in zero-days\naffecting
    IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs
    to identify a piece of software that has both a\nvulnerable class on its path,
    and performs deserialization on untrusted\ndata. Then all they need to do is send
    the payload into the\ndeserializer, getting the command executed.\n\n> Developers
    put too much trust in Java Object Serialization. Some even\n> de-serialize objects
    pre-authentication. When deserializing an Object\n> in Java you typically cast
    it to an expected type, and therefore\n> Java\\'s strict type system will ensure
    you only get valid object\n> trees. Unfortunately, by the time the type checking
    happens, platform\n> code has already created and executed significant logic.
    So, before\n> the final type is checked a lot of code is executed from the\n>
    readObject() methods of various objects, all of which is out of the\n> developer\\'s
    control. By combining the readObject() methods of various\n> classes which are
    available on the classpath of the vulnerable\n> application an attacker can execute
    functions (including calling\n> Runtime.exec() to execute local OS commands).\n>
    \n> * Apache Blog\n\n\n\n[1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22rabbitmq-jms%22\n[2]:
    https://cwe.mitre.org/data/definitions/502.html\n[3]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078\n\\n[`com.rabbitmq.jms:rabbitmq-jms`][1]
    ObjectMessages in JMS can be used\nto transfer arbitrary Java objects which are
    then deserialized before or\nat the time of being passed on to message listeners.
    This opens message\nconsumers up to a range of attacks that exploit issues in
    Java object\nserialization. **Note:** An attacker must authenticate with RabbitMQ
    in\norder to carry out the attack.\n\n# Details   {#details}\n\nSerialization
    is a process of converting an object into a sequence of\nbytes which can be persisted
    to a disk or database or can be sent\nthrough streams. The reverse process of
    creating object from sequence of\nbytes is called deserialization. Serialization
    is commonly used for\ncommunication (sharing objects between multiple hosts) and
    persistence\n(store the object state in a file or a database). It is an integral
    part\nof popular protocols like *Remote Method Invocation (RMI)*, *Java\nManagement
    Extension (JMX)*, *Java Messaging System (JMS)*, *Action\nMessage Format (AMF)*,
    *Java Server Faces (JSF) ViewState*, etc.\n\n*Deserialization of untrusted data*
    ([CWE-502][2]), is when the\napplication deserializes untrusted data without sufficiently
    verifying\nthat the resulting data will be valid, letting the attacker to control\nthe
    state or the flow of the execution.\n\nJava deserialization issues have been known
    for years. However, interest\nin the issue intensified greatly in 2015, when classes
    that could be\nabused to achieve remote code execution were found in a [popular
    library\n(Apache Commons Collection)][3]. These classes were used in zero-days\naffecting
    IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs
    to identify a piece of software that has both a\nvulnerable class on its path,
    and performs deserialization on untrusted\ndata. Then all they need to do is send
    the payload into the\ndeserializer, getting the command executed.\n\n> Developers
    put too much trust in Java Object Serialization. Some even\n> de-serialize objects
    pre-authentication. When deserializing an Object\n> in Java you typically cast
    it to an expected type, and therefore\n> Java\\'s strict type system will ensure
    you only get valid object\n> trees. Unfortunately, by the time the type checking
    happens, platform\n> code has already created and executed significant logic.
    So, before\n> the final type is checked a lot of code is executed from the\n>
    readObject() methods of various objects, all of which is out of the\n> developer\\'s
    control. By combining the readObject() methods of various\n> classes which are
    available on the classpath of the vulnerable\n> application an attacker can execute
    functions (including calling\n> Runtime.exec() to execute local OS commands).\n>
    \n> * Apache Blog\n\n\n\n[1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22rabbitmq-jms%22\n[2]:
    https://cwe.mitre.org/data/definitions/502.html\n[3]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078\n\\n[`com.rabbitmq.jms:rabbitmq-jms`][1]
    ObjectMessages in JMS can be used\nto transfer arbitrary Java objects which are
    then deserialized before or\nat the time of being passed on to message listeners.
    This opens message\nconsumers up to a range of attacks that exploit issues in
    Java object\nserialization. **Note:** An attacker must authenticate with RabbitMQ
    in\norder to carry out the attack.\n\n# Details   {#details}\n\nSerialization
    is a process of converting an object into a sequence of\nbytes which can be persisted
    to a disk or database or can be sent\nthrough streams. The reverse process of
    creating object from sequence of\nbytes is called deserialization. Serialization
    is commonly used for\ncommunication (sharing objects between multiple hosts) and
    persistence\n(store the object state in a file or a database). It is an integral
    part\nof popular protocols like *Remote Method Invocation (RMI)*, *Java\nManagement
    Extension (JMX)*, *Java Messaging System (JMS)*, *Action\nMessage Format (AMF)*,
    *Java Server Faces (JSF) ViewState*, etc.\n\n*Deserialization of untrusted data*
    ([CWE-502][2]), is when the\napplication deserializes untrusted data without sufficiently
    verifying\nthat the resulting data will be valid, letting the attacker to control\nthe
    state or the flow of the execution.\n\nJava deserialization issues have been known
    for years. However, interest\nin the issue intensified greatly in 2015, when classes
    that could be\nabused to achieve remote code execution were found in a [popular
    library\n(Apache Commons Collection)][3]. These classes were used in zero-days\naffecting
    IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs
    to identify a piece of software that has both a\nvulnerable class on its path,
    and performs deserialization on untrusted\ndata. Then all they need to do is send
    the payload into the\ndeserializer, getting the command executed.\n\n> Developers
    put too much trust in Java Object Serialization. Some even\n> de-serialize objects
    pre-authentication. When deserializing an Object\n> in Java you typically cast
    it to an expected type, and therefore\n> Java\\'s strict type system will ensure
    you only get valid object\n> trees. Unfortunately, by the time the type checking
    happens, platform\n> code has already created and executed significant logic.
    So, before\n> the final type is checked a lot of code is executed from the\n>
    readObject() methods of various objects, all of which is out of the\n> developer\\'s
    control. By combining the readObject() methods of various\n> classes which are
    available on the classpath of the vulnerable\n> application an attacker can execute
    functions (including calling\n> Runtime.exec() to execute local OS commands).\n>
    \n> * Apache Blog\n\n\n\n[1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22rabbitmq-jms%22\n[2]:
    https://cwe.mitre.org/data/definitions/502.html\n[3]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078\n\\n[`com.rabbitmq.jms:rabbitmq-jms`][1]
    ObjectMessages in JMS can be used\nto transfer arbitrary Java objects which are
    then deserialized before or\nat the time of being passed on to message listeners.
    This opens message\nconsumers up to a range of attacks that exploit issues in
    Java object\nserialization. **Note:** An attacker must authenticate with RabbitMQ
    in\norder to carry out the attack.\n\n# Details   {#details}\n\nSerialization
    is a process of converting an object into a sequence of\nbytes which can be persisted
    to a disk or database or can be sent\nthrough streams. The reverse process of
    creating object from sequence of\nbytes is called deserialization. Serialization
    is commonly used for\ncommunication (sharing objects between multiple hosts) and
    persistence\n(store the object state in a file or a database). It is an integral
    part\nof popular protocols like *Remote Method Invocation (RMI)*, *Java\nManagement
    Extension (JMX)*, *Java Messaging System (JMS)*, *Action\nMessage Format (AMF)*,
    *Java Server Faces (JSF) ViewState*, etc.\n\n*Deserialization of untrusted data*
    ([CWE-502][2]), is when the\napplication deserializes untrusted data without sufficiently
    verifying\nthat the resulting data will be valid, letting the attacker to control\nthe
    state or the flow of the execution.\n\nJava deserialization issues have been known
    for years. However, interest\nin the issue intensified greatly in 2015, when classes
    that could be\nabused to achieve remote code execution were found in a [popular
    library\n(Apache Commons Collection)][3]. These classes were used in zero-days\naffecting
    IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs
    to identify a piece of software that has both a\nvulnerable class on its path,
    and performs deserialization on untrusted\ndata. Then all they need to do is send
    the payload into the\ndeserializer, getting the command executed.\n\n> Developers
    put too much trust in Java Object Serialization. Some even\n> de-serialize objects
    pre-authentication. When deserializing an Object\n> in Java you typically cast
    it to an expected type, and therefore\n> Java\\'s strict type system will ensure
    you only get valid object\n> trees. Unfortunately, by the time the type checking
    happens, platform\n> code has already created and executed significant logic.
    So, before\n> the final type is checked a lot of code is executed from the\n>
    readObject() methods of various objects, all of which is out of the\n> developer\\'s
    control. By combining the readObject() methods of various\n> classes which are
    available on the classpath of the vulnerable\n> application an attacker can execute
    functions (including calling\n> Runtime.exec() to execute local OS commands).\n>
    \n> * Apache Blog\n\n\n\n[1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22rabbitmq-jms%22\n[2]:
    https://cwe.mitre.org/data/definitions/502.html\n[3]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078\n\\n[`com.rabbitmq.jms:rabbitmq-jms`][1]
    ObjectMessages in JMS can be used\nto transfer arbitrary Java objects which are
    then deserialized before or\nat the time of being passed on to message listeners.
    This opens message\nconsumers up to a range of attacks that exploit issues in
    Java object\nserialization. **Note:** An attacker must authenticate with RabbitMQ
    in\norder to carry out the attack.\n\n# Details   {#details}\n\nSerialization
    is a process of converting an object into a sequence of\nbytes which can be persisted
    to a disk or database or can be sent\nthrough streams. The reverse process of
    creating object from sequence of\nbytes is called deserialization. Serialization
    is commonly used for\ncommunication (sharing objects between multiple hosts) and
    persistence\n(store the object state in a file or a database). It is an integral
    part\nof popular protocols like *Remote Method Invocation (RMI)*, *Java\nManagement
    Extension (JMX)*, *Java Messaging System (JMS)*, *Action\nMessage Format (AMF)*,
    *Java Server Faces (JSF) ViewState*, etc.\n\n*Deserialization of untrusted data*
    ([CWE-502][2]), is when the\napplication deserializes untrusted data without sufficiently
    verifying\nthat the resulting data will be valid, letting the attacker to control\nthe
    state or the flow of the execution.\n\nJava deserialization issues have been known
    for years. However, interest\nin the issue intensified greatly in 2015, when classes
    that could be\nabused to achieve remote code execution were found in a [popular
    library\n(Apache Commons Collection)][3]. These classes were used in zero-days\naffecting
    IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs
    to identify a piece of software that has both a\nvulnerable class on its path,
    and performs deserialization on untrusted\ndata. Then all they need to do is send
    the payload into the\ndeserializer, getting the command executed.\n\n> Developers
    put too much trust in Java Object Serialization. Some even\n> de-serialize objects
    pre-authentication. When deserializing an Object\n> in Java you typically cast
    it to an expected type, and therefore\n> Java\\'s strict type system will ensure
    you only get valid object\n> trees. Unfortunately, by the time the type checking
    happens, platform\n> code has already created and executed significant logic.
    So, before\n> the final type is checked a lot of code is executed from the\n>
    readObject() methods of various objects, all of which is out of the\n> developer\\'s
    control. By combining the readObject() methods of various\n> classes which are
    available on the classpath of the vulnerable\n> application an attacker can execute
    functions (including calling\n> Runtime.exec() to execute local OS commands).\n>
    \n> * Apache Blog\n\n\n\n[1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22rabbitmq-jms%22\n[2]:
    https://cwe.mitre.org/data/definitions/502.html\n[3]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078\n\\n[`com.rabbitmq.jms:rabbitmq-jms`][1]
    ObjectMessages in JMS can be used\nto transfer arbitrary Java objects which are
    then deserialized before or\nat the time of being passed on to message listeners.
    This opens message\nconsumers up to a range of attacks that exploit issues in
    Java object\nserialization. **Note:** An attacker must authenticate with RabbitMQ
    in\norder to carry out the attack.\n\n# Details   {#details}\n\nSerialization
    is a process of converting an object into a sequence of\nbytes which can be persisted
    to a disk or database or can be sent\nthrough streams. The reverse process of
    creating object from sequence of\nbytes is called deserialization. Serialization
    is commonly used for\ncommunication (sharing objects between multiple hosts) and
    persistence\n(store the object state in a file or a database). It is an integral
    part\nof popular protocols like *Remote Method Invocation (RMI)*, *Java\nManagement
    Extension (JMX)*, *Java Messaging System (JMS)*, *Action\nMessage Format (AMF)*,
    *Java Server Faces (JSF) ViewState*, etc.\n\n*Deserialization of untrusted data*
    ([CWE-502][2]), is when the\napplication deserializes untrusted data without sufficiently
    verifying\nthat the resulting data will be valid, letting the attacker to control\nthe
    state or the flow of the execution.\n\nJava deserialization issues have been known
    for years. However, interest\nin the issue intensified greatly in 2015, when classes
    that could be\nabused to achieve remote code execution were found in a [popular
    library\n(Apache Commons Collection)][3]. These classes were used in zero-days\naffecting
    IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs
    to identify a piece of software that has both a\nvulnerable class on its path,
    and performs deserialization on untrusted\ndata. Then all they need to do is send
    the payload into the\ndeserializer, getting the command executed.\n\n> Developers
    put too much trust in Java Object Serialization. Some even\n> de-serialize objects
    pre-authentication. When deserializing an Object\n> in Java you typically cast
    it to an expected type, and therefore\n> Java\\'s strict type system will ensure
    you only get valid object\n> trees. Unfortunately, by the time the type checking
    happens, platform\n> code has already created and executed significant logic.
    So, before\n> the final type is checked a lot of code is executed from the\n>
    readObject() methods of various objects, all of which is out of the\n> developer\\'s
    control. By combining the readObject() methods of various\n> classes which are
    available on the classpath of the vulnerable\n> application an attacker can execute
    functions (including calling\n> Runtime.exec() to execute local OS commands).\n>
    \n> * Apache Blog\n\n\n\n[1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22rabbitmq-jms%22\n[2]:
    https://cwe.mitre.org/data/definitions/502.html\n[3]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078\n"
  affected_package: com.rabbitmq.jms:rabbitmq-jms
  vulnerable_versions:
  - "< 1.5.0"
  severity: low
  package_manager: maven
  cve:
  - CVE-2016-6194
  cwe:
  - CWE-502
  credit:
  - Michael Klishin
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-6194
  - https://github.com/rabbitmq/rabbitmq-jms-client/issues/3
  - https://github.com/rabbitmq/rabbitmq-jms-client/pull/4
  - https://github.com/rabbitmq/rabbitmq-jms-client/commit/95ae7401c0f007d5c8e6618ab009c171ce633916
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMRABBITMQJMS-30368
