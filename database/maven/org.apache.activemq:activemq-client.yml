---
- id: ossindex:maven:org.apache.activemq:activemq-client:355595
  title: '[CVE-2013-1879]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in scheduled.jsp in Apache
    ActiveMQ 5.8.0 and earlier allows remote attackers to inject arbitrary web script
    or HTML via vectors involving the "cron of a message."
  affected_package: org.apache.activemq:activemq-client
  vulnerable_versions:
  - ">=4.0.0 <=5.8.0"
  package_manager: maven
  cve:
  - CVE-2013-1879
  disclosed_date: 2013-07-20
  created_date: 2013-07-20
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://rhn.redhat.com/errata/RHSA-2013-1029.html
  - http://secunia.com/advisories/54073
  - http://www.securityfocus.com/bid/61142
  - http://xforce.iss.net/xforce/xfdb/85586
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/85586
  - https://issues.apache.org/jira/browse/AMQ-4397
  source_url: https://ossindex.net/resource/package/7080707046/vulnerabilities
- id: ossindex:maven:org.apache.activemq:activemq-client:8397096545
  title: "[CVE-2015-5254]  Improper Input Validation"
  description: Apache ActiveMQ 5.x before 5.13.0 does not restrict the classes that
    can be serialized in the broker, which allows remote attackers to execute arbitrary
    code via a crafted serialized Java Message Service (JMS) ObjectMessage object.
  affected_package: org.apache.activemq:activemq-client
  vulnerable_versions:
  - ">=5.0.0 <=5.12.1"
  package_manager: maven
  cve:
  - CVE-2015-5254
  disclosed_date: 2016-01-08
  created_date: 2016-01-08
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://activemq.apache.org/security-advisories.data/CVE-2015-5254-announcement.txt
  - http://lists.fedoraproject.org/pipermail/package-announce/2015-December/174371.html
  - http://lists.fedoraproject.org/pipermail/package-announce/2015-December/174537.html
  - http://rhn.redhat.com/errata/RHSA-2016-0489.html
  - http://rhn.redhat.com/errata/RHSA-2016-2035.html
  - http://rhn.redhat.com/errata/RHSA-2016-2036.html
  - http://www.debian.org/security/2016/dsa-3524
  - http://www.openwall.com/lists/oss-security/2015/12/08/6
  - http://www.oracle.com/technetwork/security-advisory/cpujul2017-3236622.html
  - http://www.oracle.com/technetwork/security-advisory/cpuoct2017-3236626.html
  - https://h20566.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c05385680
  - https://issues.apache.org/jira/browse/AMQ-6013
  source_url: https://ossindex.net/resource/package/7080707046/vulnerabilities
- id: snykio:maven:org.apache.activemq:activemq-client:30482
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.apache.activemq:activemq-client`][1] is an open source messaging
    and Integration Patterns server.

    Cross-site Scripting (XSS) vulnerability in scheduled.jsp in Apache
    ActiveMQ 5.8.0 and earlier allows remote attackers to inject arbitrary
    web script or HTML via vectors involving the \"cron of a message.\"



    [1]: http://activemq.apache.org/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.apache.activemq:activemq-client
  vulnerable_versions:
  - ">= 4.0.0 < 5.8.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-1879
  cwe:
  - CWE-79
  disclosed_date: 2014-06-08
  created_date: 2014-06-08
  last_modified_date: 2014-06-08
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-1879
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEACTIVEMQ-30482
- id: snykio:maven:org.apache.activemq:activemq-client:30483
  title: XML External Entity (XXE) Injection
  description: |+
    [`org.apache.activemq:activemq-client`][1] is an open source messaging
    and Integration Patterns server.

    Affected versions of the package are vulnerable to XML External Entity
    (XXE) Injection.



    [1]: http://activemq.apache.org/
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>
    {: .language-xml}

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>
    {: .language-xml}

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: org.apache.activemq:activemq-client
  vulnerable_versions:
  - ">= 5 < 5.10.1"
  severity: high
  package_manager: maven
  cve:
  - CVE-2014-3600
  cwe:
  - CWE-611
  disclosed_date: 2015-10-19
  created_date: 2015-10-19
  last_modified_date: 2015-10-19
  credit:
  - Georgi Geshev
  references:
  - http://activemq.apache.org/security-advisories.data/CVE-2014-3600-announcement.txt?version=2&modificationDate=1423051306000&api=v2
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEACTIVEMQ-30483
- id: snykio:maven:org.apache.activemq:activemq-client:30484
  title: Arbitrary Code Execution
  description: |
    \[\`org.apache.activemq:activemq-client\]([http://activemq.apache.org/][1])
    is an open source messaging and Integration Patterns server.

    Apache ActiveMQ 5.x before 5.13.0 does not restrict the classes that can
    be serialized in the broker, which allows remote attackers to execute
    arbitrary code via a crafted serialized Java Message Service (JMS)
    ObjectMessage object.



    [1]: http://activemq.apache.org/
  affected_package: org.apache.activemq:activemq-client
  vulnerable_versions:
  - ">= 5.00 < 5.13.0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2015-5254
  cwe:
  - CWE-20
  disclosed_date: 2015-12-09
  created_date: 2015-12-09
  last_modified_date: 2015-12-09
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-5254
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEACTIVEMQ-30484
- id: snykio:maven:org.apache.activemq:activemq-client:451539
  title: Denial of Service (DoS)
  description: |
    [org.apache.activemq:activemq-client][1] is a ActiveMQ Client
    implementation.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). The client package exposed a remote shutdown command in the
    `ActiveMQConnection` class. An attacker could use this flaw to achieve
    denial of service on a client.



    [1]: https://mvnrepository.com/artifact/org.apache.activemq/activemq-client
  affected_package: org.apache.activemq:activemq-client
  vulnerable_versions:
  - ">= 5.0.0 < 5.14.5"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2015-7559
  cwe:
  - CWE-776
  disclosed_date: 2016-10-18
  created_date: 2019-07-04
  last_modified_date: 2019-07-04
  credit:
  - Unknown
  references:
  - https://activemq.apache.org/security-advisories.data/CVE-2015-7559-announcement.txt
  - https://github.com/apache/activemq/commit/338a74dfa42a7b19d39adecacfa5f626a050e807
  - https://issues.apache.org/jira/browse/AMQ-6470
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEACTIVEMQ-451539
- id: snykio:maven:org.apache.activemq:activemq-client:460123
  title: Man-in-the-Middle (MitM)
  description: |
    [org.apache.activemq:activemq-client][1] is a high performance Apache
    2.0 licensed Message Broker and JMS 1.1 implementation.

    Affected versions of this package are vulnerable to Man-in-the-Middle
    (MitM). due to missing TLS hostname verification.



    [1]: https://mvnrepository.com/artifact/org.apache.activemq/activemq-client
  affected_package: org.apache.activemq:activemq-client
  vulnerable_versions:
  - ">= 5.0.0 < 5.15.6"
  severity: high
  package_manager: maven
  cve:
  - CVE-2018-11775
  cwe:
  - CWE-300
  disclosed_date: 2018-08-31
  created_date: 2018-09-10
  last_modified_date: 2018-09-10
  credit:
  - Peter StAckli
  references:
  - http://activemq.apache.org/security-advisories.data/CVE-2018-11775-announcement.txt
  - https://github.com/apache/activemq/commit/1e31df9800fc2db258f2458628bd9863c11b2846
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEACTIVEMQ-460123
