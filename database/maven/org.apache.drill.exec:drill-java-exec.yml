---
- id: snykio:maven:org.apache.drill.exec:drill-java-exec:2017-09-04
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.apache.drill.exec:drill-java-exec`][1] is a distributed MPP query
    layer that supports SQL and alternative query languages against NoSQL
    and Hadoop data storage systems.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS).

    In Apache Drill 1.11.0 and earlier when submitting form from Query page
    users are able to pass arbitrary script or HTML which will take effect
    on Profile page afterwards. Example: after submitting special script
    that returns cookie information from Query page, malicious user may
    obtain this information from Profile page afterwards.



    [1]: https://exec.drill.apache.org
    \n[`org.apache.drill.exec:drill-java-exec`][1] is a distributed MPP query
    layer that supports SQL and alternative query languages against NoSQL
    and Hadoop data storage systems.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS).

    In Apache Drill 1.11.0 and earlier when submitting form from Query page
    users are able to pass arbitrary script or HTML which will take effect
    on Profile page afterwards. Example: after submitting special script
    that returns cookie information from Query page, malicious user may
    obtain this information from Profile page afterwards.



    [1]: https://exec.drill.apache.org
    \n[`org.apache.drill.exec:drill-java-exec`][1] is a distributed MPP query
    layer that supports SQL and alternative query languages against NoSQL
    and Hadoop data storage systems.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS).

    In Apache Drill 1.11.0 and earlier when submitting form from Query page
    users are able to pass arbitrary script or HTML which will take effect
    on Profile page afterwards. Example: after submitting special script
    that returns cookie information from Query page, malicious user may
    obtain this information from Profile page afterwards.



    [1]: https://exec.drill.apache.org
    \n[`org.apache.drill.exec:drill-java-exec`][1] is a distributed MPP query
    layer that supports SQL and alternative query languages against NoSQL
    and Hadoop data storage systems.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS).

    In Apache Drill 1.11.0 and earlier when submitting form from Query page
    users are able to pass arbitrary script or HTML which will take effect
    on Profile page afterwards. Example: after submitting special script
    that returns cookie information from Query page, malicious user may
    obtain this information from Profile page afterwards.



    [1]: https://exec.drill.apache.org
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.apache.drill.exec:drill-java-exec
  vulnerable_versions:
  - "< 1.12.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-12630
  cwe:
  - CWE-79
  credit:
  - Sanjog Panda
  references:
  - https://lists.apache.org/thread.html/608658a55d09e16542db41121a0a972c97448214cdc04071fd4db923@%3Cdev.drill.apache.org%3E
  - https://issues.apache.org/jira/browse/DRILL-5766
  - https://github.com/apache/drill/pull/955
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEDRILLEXEC-32026
- id: snykio:maven:org.apache.drill.exec:drill-java-exec:2017-10-17
  title: Client Spoofing
  description: |
    [`org.apache.drill.exec:drill-java-exec`][1] is a distributed MPP query
    layer that supports SQL and alternative query languages against NoSQL
    and Hadoop data storage systems.

    Affected versions of the package are vulnerable to drillbit Client
    Spoofing. An attacker can spoof a drillbit client, which can lead to
    sensitive data being written to the attacker\'s target.



    [1]: https://exec.drill.apache.org
    \n[`org.apache.drill.exec:drill-java-exec`][1] is a distributed MPP query
    layer that supports SQL and alternative query languages against NoSQL
    and Hadoop data storage systems.

    Affected versions of the package are vulnerable to drillbit Client
    Spoofing. An attacker can spoof a drillbit client, which can lead to
    sensitive data being written to the attacker\'s target.



    [1]: https://exec.drill.apache.org
    \n[`org.apache.drill.exec:drill-java-exec`][1] is a distributed MPP query
    layer that supports SQL and alternative query languages against NoSQL
    and Hadoop data storage systems.

    Affected versions of the package are vulnerable to drillbit Client
    Spoofing. An attacker can spoof a drillbit client, which can lead to
    sensitive data being written to the attacker\'s target.



    [1]: https://exec.drill.apache.org
  affected_package: org.apache.drill.exec:drill-java-exec
  vulnerable_versions:
  - "< 1.12.0"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-290
  credit:
  - Unknown
  references:
  - https://github.com/apache/drill/pull/999
  - https://github.com/apache/drill/commit/40d0991998a4174cf5d4b12f695380e97aba4fd3
  - https://issues.apache.org/jira/browse/DRILL-5881
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEDRILLEXEC-31593
