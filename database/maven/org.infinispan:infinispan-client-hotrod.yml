---
- id: snykio:maven:org.infinispan:infinispan-client-hotrod:CVE-2016-0750
  title: Deserialization of Untrusted Data
  description: "Affected versions of [`org.infinispan:infinispan-parent`][1] are\nvulnerable
    to Deserialization of Untrusted Data.\n\nSerialization is a process of converting
    an object into a sequence of\nbytes which can be persisted to a disk or database
    or can be sent\nthrough streams. The reverse process of creating object from sequence
    of\nbytes is called deserialization. Serialization is commonly used for\ncommunication
    (sharing objects between multiple hosts) and persistence\n(store the object state
    in a file or a database). It is an integral part\nof popular protocols like *Remote
    Method Invocation (RMI)*, *Java\nManagement Extension (JMX)*, *Java Messaging
    System (JMS)*, *Action\nMessage Format (AMF)*, *Java Server Faces (JSF) ViewState*,
    etc.\n\n*Deserialization of untrusted data* ([CWE-502][2]), is when the\napplication
    deserializes untrusted data without sufficiently verifying\nthat the resulting
    data will be valid, letting the attacker to control\nthe state or the flow of
    the execution.\n\nJava deserialization issues have been known for years. However,
    interest\nin the issue intensified greatly in 2015, when classes that could be\nabused
    to achieve remote code execution were found in a [popular library\n(Apache Commons
    Collection)][3]. These classes were used in zero-days\naffecting IBM WebSphere,
    Oracle WebLogic and many other products.\n\nAn attacker just needs to identify
    a piece of software that has both a\nvulnerable class on its path, and performs
    deserialization on untrusted\ndata. Then all they need to do is send the payload
    into the\ndeserializer, getting the command executed.\n\n> Developers put too
    much trust in Java Object Serialization. Some even\n> de-serialize objects pre-authentication.
    When deserializing an Object\n> in Java you typically cast it to an expected type,
    and therefore\n> Java\\'s strict type system will ensure you only get valid object\n>
    trees. Unfortunately, by the time the type checking happens, platform\n> code
    has already created and executed significant logic. So, before\n> the final type
    is checked a lot of code is executed from the\n> readObject() methods of various
    objects, all of which is out of the\n> developer\\'s control. By combining the
    readObject() methods of various\n> classes which are available on the classpath
    of the vulnerable\n> application an attacker can execute functions (including
    calling\n> Runtime.exec() to execute local OS commands).\n> \n> * Apache Blog\n\nThe
    vulnerability, also know as *Mad Gadget*\n\n> Mad Gadget is one of the most pernicious
    vulnerabilities we’ve seen.\n> By merely existing on the Java classpath, seven
    “gadget” classes in\n> Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1,
    and 4.0)\n> make object deserialization for the entire JVM process Turing complete\n>
    with an exec function. Since many business applications use object\n> deserialization
    to send messages across the network, it would be like\n> hiring a bank teller
    who was trained to hand over all the money in the\n> vault if asked to do so politely,
    and then entrusting that teller with\n> the key. The only thing that would keep
    a bank safe in such a\n> circumstance is that most people wouldn’t consider asking
    such a\n> question.\n> \n> * Google\n\n\n\n[1]: https://infinispan.org\n[2]: https://cwe.mitre.org/data/definitions/502.html\n[3]:
    https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078\n"
  affected_package: org.infinispan:infinispan-client-hotrod
  vulnerable_versions:
  - "< 9.1.0.Final"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-0750
  cwe:
  - CWE-502
  disclosed_date: 2017-05-02
  created_date: 2017-11-28
  last_modified_date: 2017-11-28
  credit:
  - Sebastian Olsson
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1300443
  - https://github.com/infinispan/infinispan/pull/5116
  - https://github.com/infinispan/infinispan/commit/f2989a9b7b5ef2d3be690250d9d1bc7b2fa045d7
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGINFINISPAN-31590
