---
- id: snykio:maven:org.keycloak:keycloak-server-spi-private:2017-04-09
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.keycloak:keycloak-server-spi-private`][1] is an open Source
    Identity and Access Management for modern Applications and Services.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. It was found that Keycloak would accept a HOST header URL
    in the admin console and use it to determine web resource locations. An
    attacker could use this flaw against an authenticated user to attain
    reflected XSS via a malicious server.



    [1]: https://keycloak.org
    \n[`org.keycloak:keycloak-server-spi-private`][1] is an open Source
    Identity and Access Management for modern Applications and Services.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. It was found that Keycloak would accept a HOST header URL
    in the admin console and use it to determine web resource locations. An
    attacker could use this flaw against an authenticated user to attain
    reflected XSS via a malicious server.



    [1]: https://keycloak.org
    \n[`org.keycloak:keycloak-server-spi-private`][1] is an open Source
    Identity and Access Management for modern Applications and Services.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. It was found that Keycloak would accept a HOST header URL
    in the admin console and use it to determine web resource locations. An
    attacker could use this flaw against an authenticated user to attain
    reflected XSS via a malicious server.



    [1]: https://keycloak.org
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.keycloak:keycloak-server-spi-private
  vulnerable_versions:
  - "< 3.1.0.CR1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-12158
  cwe:
  - CWE-79
  credit:
  - Mykhailo Stadnyk
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2017-12158
  - https://github.com/keycloak/keycloak/pull/4031
  - https://github.com/keycloak/keycloak/commit/cf7f28d97e5937245fa14eabe4c477740a9d0e91
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGKEYCLOAK-31563
- id: snykio:maven:org.keycloak:keycloak-server-spi-private:2017-04-05
  title: Timing Attack
  description: |
    [`org.keycloak:keycloak-server-spi-private`][1] Affected versions of
    this package are vulnerable to Timing attacks because it does not use a
    constant time MAC signature comparison algorithm.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22keycloak-server-spi-private%22
    \n[`org.keycloak:keycloak-server-spi-private`][1] Affected versions of
    this package are vulnerable to Timing attacks because it does not use a
    constant time MAC signature comparison algorithm.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22keycloak-server-spi-private%22
  affected_package: org.keycloak:keycloak-server-spi-private
  vulnerable_versions:
  - ">= 2.5 <= 2.5.0.Final"
  severity: low
  package_manager: maven
  cve:
  - CVE-2017-2585
  cwe:
  - CWE-208
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-2585
  - https://access.redhat.com/security/cve/cve-2017-2585
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGKEYCLOAK-31447
