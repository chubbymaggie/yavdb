---
- id: ossindex:maven:com.sun.faces:jsf-impl:2008-03-11
  title: '[CVE-2008-1285]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in Sun Java Server Faces (JSF)
    1.2 before 1.2_08 allows remote attackers to inject arbitrary web script or HTML
    via unknown vectors.
  affected_package: com.sun.faces:jsf-impl
  vulnerable_versions:
  - 1.2_07
  package_manager: maven
  cve:
  - CVE-2008-1285
  credit:
  - OSSIndex
  references:
  - http://rhn.redhat.com/errata/RHSA-2008-0825.html
  - http://rhn.redhat.com/errata/RHSA-2008-0826.html
  - http://rhn.redhat.com/errata/RHSA-2008-0827.html
  - http://rhn.redhat.com/errata/RHSA-2008-0828.html
  - http://secunia.com/advisories/29327
  - http://sunsolve.sun.com/search/document.do?assetkey=1-26-233561-1
  - http://www.redhat.com/docs/en-US/JBoss_Enterprise_Application_Platform/4.2.0.cp03/html-single/readme/index.html
  - http://www.redhat.com/docs/en-US/JBoss_Enterprise_Application_Platform/4.3.0.cp01/html-single/readme/
  - http://www.securityfocus.com/bid/28192
  - http://www.securitytracker.com/id?1020628
  - http://www.vupen.com/english/advisories/2008/0808/references
  - https://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=437082
  - https://jira.jboss.org/jira/browse/JBPAPP-682
  source_url: https://ossindex.net/resource/package/7015435350/vulnerabilities
- id: ossindex:maven:com.sun.faces:jsf-impl:2010-05-27
  title: '[CVE-2010-2087]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Oracle Mojarra 1.2_14 and 2.0.2, as used in IBM WebSphere Application
    Server, Caucho Resin, and other applications, does not properly handle an unencrypted
    view state, which allows remote attackers to conduct cross-site scripting (XSS)
    attacks or execute arbitrary Expression Language (EL) statements via vectors that
    involve modifying the serialized view object.
  affected_package: com.sun.faces:jsf-impl
  vulnerable_versions:
  - 1.2_14
  - 2.0.2
  package_manager: maven
  cve:
  - CVE-2010-2087
  credit:
  - OSSIndex
  references:
  - http://www.blackhat.com/presentations/bh-dc-10/Byrne_David/BlackHat-DC-2010-Byrne-SGUI-slides.pdf
  - https://www.trustwave.com/spiderlabs/advisories/TWSL2010-001.txt
  source_url: https://ossindex.net/resource/package/7015435350/vulnerabilities
- id: ossindex:maven:com.sun.faces:jsf-impl:2010-10-20
  title: "[CVE-2010-4007]  Cryptographic Issues"
  description: Oracle Mojarra uses an encrypted View State without a Message Authentication
    Code (MAC), which makes it easier for remote attackers to perform successful modifications
    of the View State via a padding oracle attack, a related issue to CVE-2010-2057.
  affected_package: com.sun.faces:jsf-impl
  vulnerable_versions:
  - '1.1'
  - 1.1_02
  - '1.2'
  - 1.2_01
  - 1.2_02
  - 1.2_03
  - 1.2_04
  - 1.2_05
  - 1.2_06
  - 1.2_07
  - 1.2_08
  - 1.2_09
  - 1.2_10
  - 1.2_11
  - 1.2_12
  - 1.2_13
  - 1.2_14
  - 1.2_15
  - 2.0.0
  - 2.0.1
  - 2.0.2
  - 2.0.3
  package_manager: maven
  cve:
  - CVE-2010-4007
  credit:
  - OSSIndex
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=623799
  - https://issues.apache.org/jira/browse/MYFACES-2749
  source_url: https://ossindex.net/resource/package/7015435350/vulnerabilities
- id: ossindex:maven:com.sun.faces:jsf-impl:2012-06-17
  title: '[CVE-2012-2672] Oracle Mojarra 2.1.7 does not properly "clean up" the FacesContext
    reference dur...'
  description: Oracle Mojarra 2.1.7 does not properly "clean up" the FacesContext
    reference during startup, which allows local users to obtain context information
    an access resources from another WAR file by calling the FacesContext.getCurrentInstance
    function.
  affected_package: com.sun.faces:jsf-impl
  vulnerable_versions:
  - 2.1.7
  package_manager: maven
  cve:
  - CVE-2012-2672
  credit:
  - OSSIndex
  references:
  - http://java.net/jira/browse/JAVASERVERFACES-2436
  - http://rhn.redhat.com/errata/RHSA-2012-1591.html
  - http://rhn.redhat.com/errata/RHSA-2012-1592.html
  - http://rhn.redhat.com/errata/RHSA-2012-1594.html
  - http://secunia.com/advisories/49284
  - http://secunia.com/advisories/51607
  - http://www.openwall.com/lists/oss-security/2012/06/07/2
  - http://www.openwall.com/lists/oss-security/2012/06/07/3
  - http://xforce.iss.net/xforce/xfdb/76179
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/76179
  - https://issues.jboss.org/browse/JBPAPP-9197
  source_url: https://ossindex.net/resource/package/7015435350/vulnerabilities
- id: ossindex:maven:com.sun.faces:jsf-impl:2014-07-17
  title: '[CVE-2013-5855]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Oracle Mojarra 2.2.x before 2.2.6 and 2.1.x before 2.1.28 does not
    perform appropriate encoding when a (1) <h:outputText> tag or (2) EL expression
    is used after a scriptor style block, which allows remote attackers to conduct
    cross-site scripting (XSS) attacks via application-specific vectors.
  affected_package: com.sun.faces:jsf-impl
  vulnerable_versions:
  - ">=2.1.0 <2.1.28"
  - ">=2.2.0 <2.2.6"
  package_manager: maven
  cve:
  - CVE-2013-5855
  credit:
  - OSSIndex
  references:
  - http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/JSF-outputText-tag-the-good-the-bad-and-the-ugly/ba-p/6368011#.U8ccVPlXZHU
  - http://rhn.redhat.com/errata/RHSA-2015-0675.html
  - http://rhn.redhat.com/errata/RHSA-2015-0720.html
  - http://rhn.redhat.com/errata/RHSA-2015-0765.html
  - http://seclists.org/fulldisclosure/2014/Dec/23
  - http://www.oracle.com/technetwork/topics/security/cpujan2016-2367955.html
  - http://www.oracle.com/technetwork/topics/security/cpujul2014-1972956.html
  - http://www.securityfocus.com/archive/1/archive/1/534161/100/0/threaded
  - http://www.securityfocus.com/bid/65600
  - http://www.vmware.com/security/advisories/VMSA-2014-0012.html
  - https://java.net/jira/browse/JAVASERVERFACES-3150
  - https://java.net/jira/browse/JAVASERVERFACES_SPEC_PUBLIC-1258
  source_url: https://ossindex.net/resource/package/7015435350/vulnerabilities
- id: ossindex:maven:com.sun.faces:jsf-impl:2017-03-10
  title: Multiple Information Disclosure flaws due to unsafe path traversal
  description: "> Multiple path traversal flaws where found in Mojarra JSF2 implementation
    for identifying resources by name or from libraries. An unauthenticated remote
    attacker can use these flaws to gather otherwise undisclosed information from
    within an application's root.\n> \n> -- [github.com](https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-3827)"
  affected_package: com.sun.faces:jsf-impl
  vulnerable_versions:
  - ">=2.0 <=2.1.18"
  package_manager: maven
  credit:
  - OSSIndex
  references:
  - http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-3827
  - http://security.coverity.com/advisory/2013/Oct/two-path-traversal-defects-in-oracles-jsf2-implementation.html
  - http://www.kb.cert.org/vuls/id/526012
  - http://www.oracle.com/technetwork/topics/security/cpuoct2013-1899837.html
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-3827
  - https://java.net/projects/mojarra/sources/svn/revision/11603
  - https://java.net/projects/mojarra/sources/svn/revision/11606
  source_url: https://ossindex.net/resource/package/7015435350/vulnerabilities
- id: snykio:maven:com.sun.faces:jsf-impl:2013-12-06
  title: XML External Entity (XXE) Injection
  description: |+
    [`com.sun.faces:jsf-impl`][1] XXE vulnerability in the Oracle GlassFish
    Server component in Oracle Fusion Middleware 2.1.1, 3.0.1, and 3.1.2;
    the Oracle JDeveloper component in Oracle Fusion Middleware 11.1.2.3.0,
    11.1.2.4.0, and 12.1.2.0.0; and the Oracle WebLogic Server component in
    Oracle Fusion Middleware 10.3.6.0 and 12.1.1 allows remote attackers to
    affect confidentiality via XXE attacks related to Java Server Faces or
    Web Container.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jsf-impl%22
    \n[`com.sun.faces:jsf-impl`][1] XXE vulnerability in the Oracle GlassFish
    Server component in Oracle Fusion Middleware 2.1.1, 3.0.1, and 3.1.2;
    the Oracle JDeveloper component in Oracle Fusion Middleware 11.1.2.3.0,
    11.1.2.4.0, and 12.1.2.0.0; and the Oracle WebLogic Server component in
    Oracle Fusion Middleware 10.3.6.0 and 12.1.1 allows remote attackers to
    affect confidentiality via XXE attacks related to Java Server Faces or
    Web Container.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jsf-impl%22
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: com.sun.faces:jsf-impl
  vulnerable_versions:
  - ">= 2 <= 2.1.18"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-3827
  cwe:
  - CWE-611
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-3827
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMSUNFACES-30086
- id: snykio:maven:com.sun.faces:jsf-impl:2014-02-07
  title: Cross-site Scripting (XSS)
  description: |+
    [`com.sun.faces:jsf-impl`][1]

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks due to insufficient escaping of user supplied input to the
    `<h:outputText>` and EL expressions. Oracle Mojarra JSF 2.2.x before
    2.2.6 and 2.1.x before 2.1.28 does not perform appropriate encoding when
    a (1) `<h:outputText>` tag or (2) EL expression is used after a scriptor
    style block, which allows remote attackers to conduct Cross-site
    Scripting (XSS) attacks via application-specific vectors.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jsf-impl%22
    \n[`com.sun.faces:jsf-impl`][1]

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks due to insufficient escaping of user supplied input to the
    `<h:outputText>` and EL expressions. Oracle Mojarra JSF 2.2.x before
    2.2.6 and 2.1.x before 2.1.28 does not perform appropriate encoding when
    a (1) `<h:outputText>` tag or (2) EL expression is used after a scriptor
    style block, which allows remote attackers to conduct Cross-site
    Scripting (XSS) attacks via application-specific vectors.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jsf-impl%22
    \n[`com.sun.faces:jsf-impl`][1]

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks due to insufficient escaping of user supplied input to the
    `<h:outputText>` and EL expressions. Oracle Mojarra JSF 2.2.x before
    2.2.6 and 2.1.x before 2.1.28 does not perform appropriate encoding when
    a (1) `<h:outputText>` tag or (2) EL expression is used after a scriptor
    style block, which allows remote attackers to conduct Cross-site
    Scripting (XSS) attacks via application-specific vectors.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jsf-impl%22
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: com.sun.faces:jsf-impl
  vulnerable_versions:
  - ">= 2 < 2.2.6"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-5855
  cwe:
  - CWE-79
  credit:
  - Alvaro Munoz
  references:
  - http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/JSF-outputText-tag-the-good-the-bad-and-the-ugly/bc-p/6370209
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-5855
  - https://java.net/jira/browse/JAVASERVERFACES-3150
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMSUNFACES-30087
- id: victims:maven:com.sun.faces:jsf-impl:date
  title: 'Mojarra JSF: XSS due to insufficient escaping of user-supplied content in
    outputText tags and EL expressions'
  affected_package: com.sun.faces:jsf-impl
  vulnerable_versions:
  - "<=2.2.5"
  - '2'
  patched_versions:
  - ">=2.2.6"
  severity: medium
  package_manager: maven
  cve:
  - 2013-5855
  credit:
  - Victims CVE Database
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-5855
  - https://java.net/jira/browse/JAVASERVERFACES-3150
  - http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/JSF-outputText-tag-the-good-the-bad-and-the-ugly/bc-p/6370209
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2013/5855.yaml
- id: victims:maven:com.sun.faces:jsf-impl:date
  title: XML External Entity (XXE) injection in Spring Framework
  affected_package: com.sun.faces:jsf-impl
  vulnerable_versions:
  - "<=2.1.18"
  - '2'
  patched_versions:
  - ">=2.1.19"
  - '2'
  severity: medium
  package_manager: maven
  cve:
  - 2013-3827
  credit:
  - Victims CVE Database
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2013-3827
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2013/3827.yaml
