---
- id: snykio:maven:org.apache.nifi:nifi-web-security:CVE-2017-15703
  title: Deserialization of Untrusted Data
  description: "[Apache NiFi][1] is a system to process and distribute data.\n\nAffected
    versions of this package are vulnerable to Deserialization of\nUntrusted Data.\n\nAny
    authenticated user (valid client certificate but without ACL\npermissions) could
    upload a template which contained malicious code and\ncaused a denial of service
    via Java deserialization attack. The fix to\nproperly handle Java deserialization
    was applied on the Apache NiFi\n1.4.0 release. Users running a prior 1.x release
    should upgrade to the\nappropriate release.\n\n\n\n[1]: https://nifi.apache.org/\n\\nSerialization
    is a process of converting an object into a sequence of\nbytes which can be persisted
    to a disk or database or can be sent\nthrough streams. The reverse process of
    creating object from sequence of\nbytes is called deserialization. Serialization
    is commonly used for\ncommunication (sharing objects between multiple hosts) and
    persistence\n(store the object state in a file or a database). It is an integral
    part\nof popular protocols like *Remote Method Invocation (RMI)*, *Java\nManagement
    Extension (JMX)*, *Java Messaging System (JMS)*, *Action\nMessage Format (AMF)*,
    *Java Server Faces (JSF) ViewState*, etc.\n\n*Deserialization of untrusted data*
    ([CWE-502][1]), is when the\napplication deserializes untrusted data without sufficiently
    verifying\nthat the resulting data will be valid, letting the attacker to control\nthe
    state or the flow of the execution.\n\nJava deserialization issues have been known
    for years. However, interest\nin the issue intensified greatly in 2015, when classes
    that could be\nabused to achieve remote code execution were found in a [popular
    library\n(Apache Commons Collection)][2]. These classes were used in zero-days\naffecting
    IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs
    to identify a piece of software that has both a\nvulnerable class on its path,
    and performs deserialization on untrusted\ndata. Then all they need to do is send
    the payload into the\ndeserializer, getting the command executed.\n\n> Developers
    put too much trust in Java Object Serialization. Some even\n> de-serialize objects
    pre-authentication. When deserializing an Object\n> in Java you typically cast
    it to an expected type, and therefore\n> Java\\'s strict type system will ensure
    you only get valid object\n> trees. Unfortunately, by the time the type checking
    happens, platform\n> code has already created and executed significant logic.
    So, before\n> the final type is checked a lot of code is executed from the\n>
    readObject() methods of various objects, all of which is out of the\n> developer\\'s
    control. By combining the readObject() methods of various\n> classes which are
    available on the classpath of the vulnerable\n> application an attacker can execute
    functions (including calling\n> Runtime.exec() to execute local OS commands).\n>
    \n> * Apache Blog\n\n\n\n[1]: https://cwe.mitre.org/data/definitions/502.html\n[2]:
    https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078\n"
  affected_package: org.apache.nifi:nifi-web-security
  vulnerable_versions:
  - "< 1.4.0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-15703
  cwe:
  - CWE-611
  disclosed_date: 2017-10-02
  created_date: 2018-02-06
  last_modified_date: 2018-02-06
  credit:
  - Andy LoPresto
  references:
  - https://github.com/apache/nifi/pull/2134/commits/91ff58d038d3afe6a6c1aa13226a2c3050612938
  - https://issues.apache.org/jira/browse/NIFI-4357
  - https://nifi.apache.org/security.html#CVE-2017-15703
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHENIFI-31617
- id: snykio:maven:org.apache.nifi:nifi-web-security:CVE-2017-5635
  title: Unauthorized Data Access
  description: |
    [`org.apache.nifi:nifi-web-security`][1] Affected versions of this
    package ate vulnerable to Unauthorized Data Access in a cluster
    environment. An anonymous user request can be replicated to another
    node. This node will contain the identity of the originating node rather
    than the anonymous user\'s identity.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22nifi-web-security%22
  affected_package: org.apache.nifi:nifi-web-security
  vulnerable_versions:
  - ">= 0.7 < 0.7.2"
  - ">= 1.1 < 1.1.2"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-5635
  cwe:
  - CWE-767
  disclosed_date: 2017-03-10
  created_date: 2017-05-21
  last_modified_date: 2017-05-21
  credit:
  - Unknown
  references:
  - http://seclists.org/oss-sec/2017/q1/565
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-5635
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHENIFI-31422
- id: snykio:maven:org.apache.nifi:nifi-web-security:CVE-2017-5636
  title: User Impersonation
  description: |
    [`org.apache.nifi:nifi-web-security`][1]

    Affected versions of this package are vulnerable to User Impersonation.
    An attacker could carefully craft a username to impersonate another user
    and gain their permissions on a replicated request to another node, via
    the the proxy chain serialization/deserialization functions as they are
    vulnerable to an injection attack. This only occurs in a cluster
    environment.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22nifi-web-security%22
  affected_package: org.apache.nifi:nifi-web-security
  vulnerable_versions:
  - ">= 0.7 < 0.7.2"
  - ">= 1.1 < 1.1.2"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-5636
  cwe:
  - CWE-290
  disclosed_date: 2017-03-10
  created_date: 2017-05-21
  last_modified_date: 2017-05-21
  credit:
  - Andy LoPresto
  references:
  - http://seclists.org/oss-sec/2017/q1/565
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-5636
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHENIFI-31439
