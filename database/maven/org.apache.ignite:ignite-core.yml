---
- id: snykio:maven:org.apache.ignite:ignite-core:174537
  title: Information Exposure
  description: |
    [org.apache.ignite:ignite-core][1] is a memory-centric distributed
    database, caching, and processing platform for transactional,
    analytical, and streaming workloads delivering in-memory speeds at
    petabyte scale.

    Affected versions of this package are vulnerable to Information
    Exposure. It uses an update notifier component to update the users about
    new project releases that include additional functionality, bug fixes
    and performance improvements. To do that the component communicates to
    an external PHP server ([http://ignite.run][2]) where it needs to send
    some system properties like Apache Ignite or Java version. Some of the
    properties might contain user sensitive information.



    [1]: https://github.com/apache/ignite
    [2]: http://ignite.run
  affected_package: org.apache.ignite:ignite-core
  vulnerable_versions:
  - ">= 1.0.0-RC3 < 2.1"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-7686
  cwe:
  - CWE-200
  disclosed_date: 2017-06-28
  created_date: 2019-04-29
  last_modified_date: 2019-04-29
  credit:
  - Makoto Yui
  references:
  - http://apache-ignite-developers.2346864.n4.nabble.com/CVE-2017-7686-Apache-Ignite-Information-Disclosure-td19168.html
  - https://www.securityfocus.com/bid/99292
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEIGNITE-174537
- id: snykio:maven:org.apache.ignite:ignite-core:174538
  title: XML External Entity (XXE) Injection
  description: |+
    [org.apache.ignite:ignite-core][1] is a memory-centric distributed
    database, caching, and processing platform for transactional,
    analytical, and streaming workloads delivering in-memory speeds at
    petabyte scale.

    Affected versions of this package are vulnerable to XML External Entity
    (XXE) Injection. An attacker could read arbitrary files via XXE in
    modified `update-notifier` documents.



    [1]: https://github.com/apache/ignite
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: org.apache.ignite:ignite-core
  vulnerable_versions:
  - ">= 1.0.0-RC3 < 1.9"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-6805
  cwe:
  - CWE-611
  disclosed_date: 2017-12-28
  created_date: 2019-04-29
  last_modified_date: 2019-04-29
  credit:
  - Unknown
  references:
  - http://mail-archives.apache.org/mod_mbox/www-announce/201704.mbox/%3CB39FC5C0-9AC5-4E84-A450-AFF690B74D9C%40apache.org%3E
  - http://seclists.org/oss-sec/2017/q2/31
  - http://www.securityfocus.com/bid/97509
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEIGNITE-174538
- id: snykio:maven:org.apache.ignite:ignite-core:32200
  title: Deserialization of Untrusted Data
  description: "[org.apache.ignite:ignite-core][1] is a memory-centric multi-model\ndistributed
    database, caching, and processing platform for\ntransactional, analytical, and
    streaming workloads, delivering in-memory\nspeeds at petabyte scale.\n\nAffected
    versions of this package are vulnerable to Deserialization of\nUntrusted Data.
    The serialization mechanism does not have a list of\nclasses allowed for serialization/deserialization,
    which makes it\npossible to run arbitrary code when 3-rd party vulnerable classes
    are\npresent in Ignite classpath. The vulnerability can be exploited if the\none
    sends a specially prepared form of a serialized object to one of the\ndeserialization
    endpoints of some Ignite components - discovery SPI,\nIgnite persistence, Memcached
    endpoint, socket steamer.\n\n\n\n[1]: https://mvnrepository.com/artifact/org.apache.ignite/ignite-core\n\\nSerialization
    is a process of converting an object into a sequence of\nbytes which can be persisted
    to a disk or database or can be sent\nthrough streams. The reverse process of
    creating object from sequence of\nbytes is called deserialization. Serialization
    is commonly used for\ncommunication (sharing objects between multiple hosts) and
    persistence\n(store the object state in a file or a database). It is an integral
    part\nof popular protocols like *Remote Method Invocation (RMI)*, *Java\nManagement
    Extension (JMX)*, *Java Messaging System (JMS)*, *Action\nMessage Format (AMF)*,
    *Java Server Faces (JSF) ViewState*, etc.\n\n*Deserialization of untrusted data*
    ([CWE-502][1]), is when the\napplication deserializes untrusted data without sufficiently
    verifying\nthat the resulting data will be valid, letting the attacker to control\nthe
    state or the flow of the execution.\n\nJava deserialization issues have been known
    for years. However, interest\nin the issue intensified greatly in 2015, when classes
    that could be\nabused to achieve remote code execution were found in a [popular
    library\n(Apache Commons Collection)][2]. These classes were used in zero-days\naffecting
    IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs
    to identify a piece of software that has both a\nvulnerable class on its path,
    and performs deserialization on untrusted\ndata. Then all they need to do is send
    the payload into the\ndeserializer, getting the command executed.\n\n> Developers
    put too much trust in Java Object Serialization. Some even\n> de-serialize objects
    pre-authentication. When deserializing an Object\n> in Java you typically cast
    it to an expected type, and therefore\n> Java\\'s strict type system will ensure
    you only get valid object\n> trees. Unfortunately, by the time the type checking
    happens, platform\n> code has already created and executed significant logic.
    So, before\n> the final type is checked a lot of code is executed from the\n>
    readObject() methods of various objects, all of which is out of the\n> developer\\'s
    control. By combining the readObject() methods of various\n> classes which are
    available on the classpath of the vulnerable\n> application an attacker can execute
    functions (including calling\n> Runtime.exec() to execute local OS commands).\n>
    \n> * Apache Blog\n\nThe vulnerability, also know as *Mad Gadget*\n\n> Mad Gadget
    is one of the most pernicious vulnerabilities we’ve seen.\n> By merely existing
    on the Java classpath, seven “gadget” classes in\n> Apache Commons Collections
    (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0)\n> make object deserialization for the
    entire JVM process Turing complete\n> with an exec function. Since many business
    applications use object\n> deserialization to send messages across the network,
    it would be like\n> hiring a bank teller who was trained to hand over all the
    money in the\n> vault if asked to do so politely, and then entrusting that teller
    with\n> the key. The only thing that would keep a bank safe in such a\n> circumstance
    is that most people wouldn’t consider asking such a\n> question.\n> \n> * Google\n\n\n\n[1]:
    https://cwe.mitre.org/data/definitions/502.html\n[2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078\n"
  affected_package: org.apache.ignite:ignite-core
  vulnerable_versions:
  - "< 2.4"
  severity: high
  package_manager: maven
  cve:
  - CVE-2018-1295
  cwe:
  - CWE-94
  disclosed_date: 2018-04-02
  created_date: 2018-04-09
  last_modified_date: 2018-04-09
  credit:
  - Unknown
  references:
  - https://lists.apache.org/thread.html/45e7d5e2c6face85aab693f5ae0616563132ff757e5a558da80d0209@%3Cdev.ignite.apache.org%3E
  - https://nvd.nist.gov/vuln/detail/CVE-2018-1295
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEIGNITE-32200
- id: snykio:maven:org.apache.ignite:ignite-core:32428
  title: Deserialization of Untrusted Data
  description: "[org.apache.ignite:ignite-core][1] is a memory-centric distributed\ndatabase,
    caching, and processing platform for transactional,\nanalytical, and streaming
    workloads, delivering in-memory speeds at\npetabyte scale.\n\nAffected versions
    of this package are vulnerable to Arbitrary Code\nExecution. It\\'s serialization
    mechanism does not have a list of classes\nallowed for serialization/deserialization,
    which makes it possible to\nrun arbitrary code when 3-rd party vulnerable classes
    are present in\nIgnite classpath. The vulnerability can be exploited if a malicious
    user\nsends a specially prepared form of a serialized object to\n`GridClientJdkMarshaller`
    deserialization endpoint.\n\n\n\n[1]: https://github.com/apache/ignite\n\\nSerialization
    is a process of converting an object into a sequence of\nbytes which can be persisted
    to a disk or database or can be sent\nthrough streams. The reverse process of
    creating object from sequence of\nbytes is called deserialization. Serialization
    is commonly used for\ncommunication (sharing objects between multiple hosts) and
    persistence\n(store the object state in a file or a database). It is an integral
    part\nof popular protocols like *Remote Method Invocation (RMI)*, *Java\nManagement
    Extension (JMX)*, *Java Messaging System (JMS)*, *Action\nMessage Format (AMF)*,
    *Java Server Faces (JSF) ViewState*, etc.\n\n*Deserialization of untrusted data*
    ([CWE-502][1]), is when the\napplication deserializes untrusted data without sufficiently
    verifying\nthat the resulting data will be valid, letting the attacker to control\nthe
    state or the flow of the execution.\n\nJava deserialization issues have been known
    for years. However, interest\nin the issue intensified greatly in 2015, when classes
    that could be\nabused to achieve remote code execution were found in a [popular
    library\n(Apache Commons Collection)][2]. These classes were used in zero-days\naffecting
    IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs
    to identify a piece of software that has both a\nvulnerable class on its path,
    and performs deserialization on untrusted\ndata. Then all they need to do is send
    the payload into the\ndeserializer, getting the command executed.\n\n> Developers
    put too much trust in Java Object Serialization. Some even\n> de-serialize objects
    pre-authentication. When deserializing an Object\n> in Java you typically cast
    it to an expected type, and therefore\n> Java\\'s strict type system will ensure
    you only get valid object\n> trees. Unfortunately, by the time the type checking
    happens, platform\n> code has already created and executed significant logic.
    So, before\n> the final type is checked a lot of code is executed from the\n>
    readObject() methods of various objects, all of which is out of the\n> developer\\'s
    control. By combining the readObject() methods of various\n> classes which are
    available on the classpath of the vulnerable\n> application an attacker can execute
    functions (including calling\n> Runtime.exec() to execute local OS commands).\n>
    \n> * Apache Blog\n\nThe vulnerability, also know as *Mad Gadget*\n\n> Mad Gadget
    is one of the most pernicious vulnerabilities we’ve seen.\n> By merely existing
    on the Java classpath, seven “gadget” classes in\n> Apache Commons Collections
    (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0)\n> make object deserialization for the
    entire JVM process Turing complete\n> with an exec function. Since many business
    applications use object\n> deserialization to send messages across the network,
    it would be like\n> hiring a bank teller who was trained to hand over all the
    money in the\n> vault if asked to do so politely, and then entrusting that teller
    with\n> the key. The only thing that would keep a bank safe in such a\n> circumstance
    is that most people wouldn’t consider asking such a\n> question.\n> \n> * Google\n\n\n\n[1]:
    https://cwe.mitre.org/data/definitions/502.html\n[2]: https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078\n"
  affected_package: org.apache.ignite:ignite-core
  vulnerable_versions:
  - "< 2.6"
  severity: high
  package_manager: maven
  cve:
  - CVE-2018-8018
  cwe:
  - CWE-502
  disclosed_date: 2018-07-19
  created_date: 2018-07-23
  last_modified_date: 2018-07-23
  credit:
  - Man Yue Mo
  references:
  - https://lists.apache.org/thread.html/e0fdf53114a321142ecfa5cfa17658090f0b4e1677de431e329b37ab@%3Cdev.ignite.apache.org%3E
  - https://nvd.nist.gov/vuln/detail/CVE-2018-8018
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHEIGNITE-32428
