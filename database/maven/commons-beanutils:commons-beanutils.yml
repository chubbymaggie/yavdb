---
- id: ossindex:maven:commons-beanutils:commons-beanutils:359770
  title: "[CVE-2014-0114]  Improper Input Validation"
  description: Apache Commons BeanUtils, as distributed in lib/commons-beanutils-1.8.0.jar
    in Apache Struts 1.x through 1.3.10 and in other products requiring commons-beanutils
    through 1.9.2, does not suppress the class property, which allows remote attackers
    to "manipulate" the ClassLoader and execute arbitrary code via the class parameter,
    as demonstrated by the passing of this parameter to the getClass method of the
    ActionForm object in Struts 1.
  affected_package: commons-beanutils:commons-beanutils
  vulnerable_versions:
  - "<=1.9.2"
  package_manager: maven
  cve:
  - CVE-2014-0114
  disclosed_date: 2014-04-30
  created_date: 2014-04-30
  last_modified_date: 2017-04-19
  credit:
  - OSSIndex
  references:
  - http://advisories.mageia.org/MGASA-2014-0219.html
  - http://commons.apache.org/proper/commons-beanutils/javadocs/v1.9.2/RELEASE-NOTES.txt
  - http://lists.fedoraproject.org/pipermail/package-announce/2014-August/136958.html
  - http://marc.info/?l=bugtraq&m=140119284401582&w=2
  - http://marc.info/?l=bugtraq&m=140801096002766&w=2
  - http://marc.info/?l=bugtraq&m=141451023707502&w=2
  - http://openwall.com/lists/oss-security/2014/06/15/10
  - http://openwall.com/lists/oss-security/2014/07/08/1
  - http://packetstormsecurity.com/files/131271/VMware-Security-Advisory-2015-0003.html
  - http://seclists.org/fulldisclosure/2014/Dec/23
  - http://seclists.org/fulldisclosure/2015/Apr/5
  - http://secunia.com/advisories/57477
  - http://secunia.com/advisories/58710
  - http://secunia.com/advisories/58851
  - http://secunia.com/advisories/58947
  - http://secunia.com/advisories/59014
  - http://secunia.com/advisories/59118
  - http://secunia.com/advisories/59228
  - http://secunia.com/advisories/59245
  - http://secunia.com/advisories/59246
  - http://secunia.com/advisories/59430
  - http://secunia.com/advisories/59464
  - http://secunia.com/advisories/59479
  - http://secunia.com/advisories/59480
  - http://secunia.com/advisories/59704
  - http://secunia.com/advisories/59718
  - http://secunia.com/advisories/60177
  - http://secunia.com/advisories/60703
  - http://www-01.ibm.com/support/docview.wss?uid=swg21674128
  - http://www-01.ibm.com/support/docview.wss?uid=swg21674812
  - http://www-01.ibm.com/support/docview.wss?uid=swg21675266
  - http://www-01.ibm.com/support/docview.wss?uid=swg21675387
  - http://www-01.ibm.com/support/docview.wss?uid=swg21675689
  - http://www-01.ibm.com/support/docview.wss?uid=swg21675898
  - http://www-01.ibm.com/support/docview.wss?uid=swg21675972
  - http://www-01.ibm.com/support/docview.wss?uid=swg21676091
  - http://www-01.ibm.com/support/docview.wss?uid=swg21676110
  - http://www-01.ibm.com/support/docview.wss?uid=swg21676303
  - http://www-01.ibm.com/support/docview.wss?uid=swg21676375
  - http://www-01.ibm.com/support/docview.wss?uid=swg21676931
  - http://www-01.ibm.com/support/docview.wss?uid=swg21677110
  - http://www-01.ibm.com/support/docview.wss?uid=swg27042296
  - http://www.debian.org/security/2014/dsa-2940
  - http://www.ibm.com/support/docview.wss?uid=swg21675496
  - http://www.mandriva.com/security/advisories?name=MDVSA-2014:095
  - http://www.oracle.com/technetwork/security-advisory/cpuoct2016-2881722.html
  - http://www.oracle.com/technetwork/security-advisory/cpuoct2017-3236626.html
  - http://www.oracle.com/technetwork/topics/security/cpujan2015-1972971.html
  - http://www.oracle.com/technetwork/topics/security/cpujul2014-1972956.html
  - http://www.oracle.com/technetwork/topics/security/cpuoct2014-1972960.html
  - http://www.securityfocus.com/archive/1/archive/1/534161/100/0/threaded
  - http://www.securityfocus.com/archive/1/archive/1/535181/100/0/threaded
  - http://www.securityfocus.com/bid/67121
  - http://www.vmware.com/security/advisories/VMSA-2014-0008.html
  - http://www.vmware.com/security/advisories/VMSA-2014-0012.html
  - https://access.redhat.com/solutions/869353
  - https://bugzilla.redhat.com/show_bug.cgi?id=1091938
  - https://bugzilla.redhat.com/show_bug.cgi?id=1116665
  - https://h20566.www2.hpe.com/portal/site/hpsc/public/kb/docDisplay?docId=emr_na-c05324755
  - https://issues.apache.org/jira/browse/BEANUTILS-463
  - https://security.gentoo.org/glsa/201607-09
  - https://security.netapp.com/advisory/ntap-20140911-0001/
  source_url: https://ossindex.net/resource/package/7015420154/vulnerabilities
- id: snykio:maven:commons-beanutils:commons-beanutils:30077
  title: Arbitrary Code Execution
  description: "[`commons-beanutils:commons-beanutils`][1]\n\nVulnerable versions
    of *Apache Commons BeanUtils*, do not suppress the\nclass property, which allows
    remote attackers to manipulate the\n`ClassLoader` and execute arbitrary code via
    the class parameter, as\ndemonstrated by the passing of this parameter to the
    `getClass` method\nof the `ActionForm` object in Struts 1.\n\n# Details   {#details}\n\nSerialization
    is a process of converting an object into a sequence of\nbytes which can be persisted
    to a disk or database or can be sent\nthrough streams. The reverse process of
    creating object from sequence of\nbytes is called deserialization. Serialization
    is commonly used for\ncommunication (sharing objects between multiple hosts) and
    persistence\n(store the object state in a file or a database). It is an integral
    part\nof popular protocols like *Remote Method Invocation (RMI)*, *Java\nManagement
    Extension (JMX)*, *Java Messaging System (JMS)*, *Action\nMessage Format (AMF)*,
    *Java Server Faces (JSF) ViewState*, etc.\n\n*Deserialization of untrusted data*
    ([CWE-502][2]), is when the\napplication deserializes untrusted data without sufficiently
    verifying\nthat the resulting data will be valid, letting the attacker to control\nthe
    state or the flow of the execution.\n\nJava deserialization issues have been known
    for years. However, interest\nin the issue intensified greatly in 2015, when classes
    that could be\nabused to achieve remote code execution were found in a [popular
    library\n(Apache Commons Collection)][3]. These classes were used in zero-days\naffecting
    IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs
    to identify a piece of software that has both a\nvulnerable class on its path,
    and performs deserialization on untrusted\ndata. Then all they need to do is send
    the payload into the\ndeserializer, getting the command executed.\n\n> Developers
    put too much trust in Java Object Serialization. Some even\n> de-serialize objects
    pre-authentication. When deserializing an Object\n> in Java you typically cast
    it to an expected type, and therefore\n> Java\\'s strict type system will ensure
    you only get valid object\n> trees. Unfortunately, by the time the type checking
    happens, platform\n> code has already created and executed significant logic.
    So, before\n> the final type is checked a lot of code is executed from the\n>
    readObject() methods of various objects, all of which is out of the\n> developer\\'s
    control. By combining the readObject() methods of various\n> classes which are
    available on the classpath of the vulnerable\n> application an attacker can execute
    functions (including calling\n> Runtime.exec() to execute local OS commands).\n>
    \n> * Apache Blog\n\nThe vulnerability, also know as *Mad Gadget*\n\n> Mad Gadget
    is one of the most pernicious vulnerabilities we’ve seen.\n> By merely existing
    on the Java classpath, seven “gadget” classes in\n> Apache Commons Collections
    (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0)\n> make object deserialization for the
    entire JVM process Turing complete\n> with an exec function. Since many business
    applications use object\n> deserialization to send messages across the network,
    it would be like\n> hiring a bank teller who was trained to hand over all the
    money in the\n> vault if asked to do so politely, and then entrusting that teller
    with\n> the key. The only thing that would keep a bank safe in such a\n> circumstance
    is that most people wouldn’t consider asking such a\n> question.\n> \n> * Google\n\n\n\n[1]:
    http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22commons-beanutils%22\n[2]: https://cwe.mitre.org/data/definitions/502.html\n[3]:
    https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078\n"
  affected_package: commons-beanutils:commons-beanutils
  vulnerable_versions:
  - "<= 1.9.1"
  severity: high
  package_manager: maven
  cve:
  - CVE-2014-0114
  cwe:
  - CWE-20
  disclosed_date: 2014-05-01
  created_date: 2014-05-01
  last_modified_date: 2014-05-01
  credit:
  - Alvaro Munoz
  references:
  - http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/Protect-your-Struts1-applications/ba-p/6463188#.U2J7xeaSxro
  - http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0114
  - https://bugzilla.redhat.com/show_bug.cgi?id=1091938
  source_url: https://snyk.io/vuln/SNYK-JAVA-COMMONSBEANUTILS-30077
- id: victims:maven:commons-beanutils:commons-beanutils:2014-0114
  title: 'Commons BeanUtils: Class Loader manipulation via request parameters'
  description: 'Apache Commons BeanUtils, as distributed in lib/commons-beanutils-1.8.0.jar
    in Apache Struts 1.x through 1.3.10 and in other products requiring commons-beanutils
    through 1.9.2, does not suppress the class property, which allows remote attackers
    to "manipulate" the ClassLoader and execute arbitrary code via the class parameter,
    as demonstrated by the passing of this parameter to the getClass method of the
    ActionForm object in Struts 1.

'
  affected_package: commons-beanutils:commons-beanutils
  vulnerable_versions:
  - "<=1.9.1"
  severity: high
  package_manager: maven
  cve:
  - CVE-2014-0114
  cvss_v2_score: 7.5
  credit:
  - Victims CVE Database
  references:
  - http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/Protect-your-Struts1-applications/ba-p/6463188#.U2J7xeaSxro
  - http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0114
  - https://bugzilla.redhat.com/show_bug.cgi?id=1091938
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2014/0114.yaml
