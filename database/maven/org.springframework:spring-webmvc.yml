---
- id: ossindex:maven:org.springframework:spring-webmvc:CVE-2014-0054
  title: "[CVE-2014-0054]  Cross-Site Request Forgery (CSRF)"
  description: 'The Jaxb2RootElementHttpMessageConverter in Spring MVC in Spring Framework
    before 3.2.8 and 4.0.0 before 4.0.2 does not disable external entity resolution,
    which allows remote attackers to read arbitrary files, cause a denial of service,
    and conduct CSRF attacks via crafted XML, aka an XML External Entity (XXE) issue.  NOTE:
    this vulnerability exists because of an incomplete fix for CVE-2013-4152, CVE-2013-7315,
    and CVE-2013-6429.'
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - "> >=3.2.0 <=3.2.7"
  - "> >=4.0.0 <=4.0.1"
  package_manager: maven
  cve:
  - CVE-2014-0054
  disclosed_date: 2014-04-17
  created_date: 2014-04-17
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://rhn.redhat.com/errata/RHSA-2014-0400.html
  - http://secunia.com/advisories/57915
  - http://www.securityfocus.com/bid/66148
  - https://jira.spring.io/browse/SPR-11376
  source_url: https://ossindex.net/resource/package/7015204537/vulnerabilities
- id: ossindex:maven:org.springframework:spring-webmvc:CVE-2014-1904
  title: '[CVE-2014-1904]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in web/servlet/tags/form/FormTag.java
    in Spring MVC in Spring Framework 3.0.0 before 3.2.8 and 4.0.0 before 4.0.2 allows
    remote attackers to inject arbitrary web script or HTML via the requested URI
    in a default action.
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - "> >=3.0.0 <=3.2.7"
  - "> >=4.0.0 <=4.0.1"
  package_manager: maven
  cve:
  - CVE-2014-1904
  disclosed_date: 2014-03-20
  created_date: 2014-03-20
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://docs.spring.io/spring/docs/3.2.8.RELEASE/changelog.txt
  - http://rhn.redhat.com/errata/RHSA-2014-0400.html
  - http://seclists.org/fulldisclosure/2014/Mar/101
  - http://secunia.com/advisories/57915
  - http://www.gopivotal.com/security/cve-2014-1904
  - http://www.securityfocus.com/archive/1/archive/1/531422/100/0/threaded
  - http://www.securityfocus.com/bid/66137
  - https://github.com/spring-projects/spring-framework/commit/741b4b229ae032bd17175b46f98673ce0bd2d485
  - https://jira.springsource.org/browse/SPR-11426
  source_url: https://ossindex.net/resource/package/7015204537/vulnerabilities
- id: ossindex:maven:org.springframework:spring-webmvc:CVE-2014-3578
  title: '[CVE-2014-3578]  Improper Limitation of a Pathname to a Restricted Directory
    ("Path Traversal")'
  description: Directory traversal vulnerability in Pivotal Spring Framework 3.x before
    3.2.9 and 4.0 before 4.0.5 allows remote attackers to read arbitrary files via
    a crafted URL.
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - "> >=3.2.0 <=3.2.8"
  - "> >=4.0.0 <=4.0.4"
  package_manager: maven
  cve:
  - CVE-2014-3578
  disclosed_date: 2015-02-19
  created_date: 2015-02-19
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://jvn.jp/en/jp/JVN49154900/index.html
  - http://jvndb.jvn.jp/jvndb/JVNDB-2014-000054
  - http://pivotal.io/security/cve-2014-3578
  - http://rhn.redhat.com/errata/RHSA-2015-0720.html
  - http://www.securityfocus.com/bid/68042
  - https://bugzilla.redhat.com/show_bug.cgi?id=1131882
  - https://rhn.redhat.com/errata/RHSA-2015-0234.html
  - https://rhn.redhat.com/errata/RHSA-2015-0235.html
  source_url: https://ossindex.net/resource/package/7015204537/vulnerabilities
- id: ossindex:maven:org.springframework:spring-webmvc:CVE-2014-3625
  title: '[CVE-2014-3625]  Improper Limitation of a Pathname to a Restricted Directory
    ("Path Traversal")'
  description: Directory traversal vulnerability in Pivotal Spring Framework 3.0.4
    through 3.2.x before 3.2.12, 4.0.x before 4.0.8, and 4.1.x before 4.1.2 allows
    remote attackers to read arbitrary files via unspecified vectors, related to static
    resource handling.
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - "> >=3.2.0 <=3.2.11"
  - "> (>=4.0.0 <=4.0.7"
  - "> >=4.1.0 <=4.1.1"
  package_manager: maven
  cve:
  - CVE-2014-3625
  disclosed_date: 2014-11-20
  created_date: 2014-11-20
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://rhn.redhat.com/errata/RHSA-2015-0236.html
  - http://rhn.redhat.com/errata/RHSA-2015-0720.html
  - http://www.pivotal.io/security/cve-2014-3625
  - https://jira.spring.io/browse/SPR-12354
  source_url: https://ossindex.net/resource/package/7015204537/vulnerabilities
- id: ossindex:maven:org.springframework:spring-webmvc:CVE-2015-5211
  title: "[CVE-2015-5211]  Improper Input Validation"
  description: Under some situations, the Spring Framework 4.2.0 to 4.2.1, 4.0.0 to
    4.1.7, 3.2.0 to 3.2.14 and older unsupported versions is vulnerable to a Reflected
    File Download (RFD) attack. The attack involves a malicious user crafting a URL
    with a batch script extension that results in the response being downloaded rather
    than rendered and also includes some input reflected in the response.
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - "> ((>=3.2.0 <=3.2.14"
  - "> >=4.0.0 <=4.0.9"
  - "> >=4.1.0 <=4.1.7"
  - "> >=4.2.0 <=4.2.1"
  package_manager: maven
  cve:
  - CVE-2015-5211
  disclosed_date: 2017-05-25
  created_date: 2017-05-25
  last_modified_date: 2017-06-08
  credit:
  - OSSIndex
  references:
  - https://pivotal.io/security/cve-2015-5211
  - https://www.trustwave.com/Resources/SpiderLabs-Blog/Reflected-File-Download---A-New-Web-Attack-Vector/
  source_url: https://ossindex.net/resource/package/7015204537/vulnerabilities
- id: ossindex:maven:org.springframework:spring-webmvc:CVE-2016-9878
  title: '[CVE-2016-9878]  Improper Limitation of a Pathname to a Restricted Directory
    ("Path Traversal")'
  description: An issue was discovered in Pivotal Spring Framework before 3.2.18,
    4.2.x before 4.2.9, and 4.3.x before 4.3.5. Paths provided to the ResourceServlet
    were not properly sanitized and as a result exposed to directory traversal attacks.
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - "> >=1.2.1 <=3.1.4"
  - "> (>=3.2.0 <3.2.18"
  - "> (>=4.2.0 <4.2.9"
  - "> >=4.3.0 <4.3.5"
  package_manager: maven
  cve:
  - CVE-2016-9878
  disclosed_date: 2016-12-29
  created_date: 2016-12-29
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - http://www.securityfocus.com/bid/95072
  - https://access.redhat.com/errata/RHSA-2017:3115
  - https://pivotal.io/security/cve-2016-9878
  source_url: https://ossindex.net/resource/package/7015204537/vulnerabilities
- id: snykio:maven:org.springframework:spring-webmvc:31512
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`org.springframework:spring-webmvc`][1] are
    vulnerable to Cross-site Scripting (XSS) attacks. The
    `LocaleChangeInterceptor` does not escape user input values from an HTTP
    request.



    [1]: https://springframework.org
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - "< 3.0.6"
  severity: medium
  package_manager: maven
  cwe:
  - CWE-79
  disclosed_date: 2010-11-30
  created_date: 2017-09-20
  last_modified_date: 2017-09-20
  credit:
  - Juergen Hoeller
  references:
  - https://jira.spring.io/browse/SPR-7779
  - https://docs.spring.io/spring/docs/3.0.6.RELEASE/changelog.txt
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-31512
- id: snykio:maven:org.springframework:spring-webmvc:CVE-2014-0054
  title: Cross-site Request Forgery (CSRF)
  description: |
    [`org.springframework:spring-webmvc`][1] Affected versions of this
    package do not disable external entity resolution, which allows remote
    attackers to read arbitrary files, cause a denial of service, and
    conduct CSRF attacks via crafted XML, aka an XML External Entity (XXE)
    issue.

    **NOTE:** this vulnerability exists because of an incomplete fix for
    [CVE-2013-4152][2], [CVE-2013-7315][3], and [CVE-2013-6429][4].



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-webmvc%22
    [2]: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-31330
    [3]: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-30162
    [4]: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-30160
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - ">= 3.2 <= 3.2.7.RELEASE"
  - ">= 4.0 <= 4.0.1.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-0054
  cwe:
  - CWE-352
  disclosed_date: 2016-12-25
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Unknown
  references:
  - http://www.pivotal.io/security/cve-2014-0054
  - https://jira.spring.io/browse/SPR-11376
  - http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0054
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-30166
- id: snykio:maven:org.springframework:spring-webmvc:CVE-2014-1904
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.springframework:spring-webmvc`][1] Affected versions of this
    package are vulnerable to Cross-site Scripting (XSS) attacks. The
    `web/servlet/tags/form/FormTag.java` method allows remote attackers to
    inject arbitrary web script or HTML via the requested URI in a default
    action.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-webmvc%22
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - ">= 3 <= 3.2.7.RELEASE"
  - ">= 4 <= 4.0.1.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-1904
  cwe:
  - CWE-79
  disclosed_date: 2016-12-25
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Paul Wowk
  references:
  - http://www.gopivotal.com/security/cve-2014-1904
  - https://bugzilla.redhat.com/CVE-2014-1904
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-30167
- id: snykio:maven:org.springframework:spring-webmvc:CVE-2014-3578
  title: Directory Traversal
  description: |
    [`org.springframework:spring-webmvc`][1] Affected versions of this
    package are vulnerable to Directory traversal attack which allows remote
    attackers to read arbitrary files via a crafted URL.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-webmvc%22
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - ">= 3.2 <= 3.2.8.RELEASE"
  - ">= 4.0 <= 4.0.4.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-3578
  cwe:
  - CWE-22
  disclosed_date: 2015-09-05
  created_date: 2015-09-05
  last_modified_date: 2015-09-05
  credit:
  - Takeshi Terada
  references:
  - http://www.pivotal.io/security/cve-2014-3578
  - https://jira.spring.io/browse/SPR-12354
  - http://jvndb.jvn.jp/en/contents/2014/JVNDB-2014-000054.html
  - https://bugzilla.redhat.com/show_bug.cgi?id=1131882
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-30168
- id: snykio:maven:org.springframework:spring-webmvc:CVE-2014-3625
  title: Directory Traversal
  description: |
    [`org.springframework:spring-webmvc`][1] Directory traversal
    vulnerability in Pivotal Spring Framework 3.0.4 through 3.2.x before
    3.2.12, 4.0.x before 4.0.8, and 4.1.x before 4.1.2 allows remote
    attackers to read arbitrary files via unspecified vectors, related to
    static resource handling.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-webmvc%22
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - ">= 3.2 <= 3.2.11.RELEASE"
  - ">= 4.0 <= 4.0.7.RELEASE"
  - ">= 4.1 <= 4.1.1.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-3625
  cwe:
  - CWE-22
  disclosed_date: 2016-12-25
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Toshiaki Maki
  references:
  - http://www.pivotal.io/security/cve-2014-3625
  - https://bugzilla.redhat.com/CVE-2014-3625
  - https://jira.spring.io/browse/SPR-12354
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-30169
- id: snykio:maven:org.springframework:spring-webmvc:CVE-2015-5211
  title: Reflected File Download
  description: |
    [`org.springframework:spring-webmvc`][1] Spring Framework is vulnerable
    to Reflected File Download (RFD) attacks via a crafted URL with a batch
    script extension, resulting in the response being downloaded rather than
    rendered.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-webmvc%22
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - ">= 4.2 <= 4.2.1.RELEASE"
  - ">= 4.1 <= 4.1.7.RELEASE"
  - ">= 4.0 <= 4.0.9.RELEASE"
  - ">= 3.2 <= 3.2.14.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2015-5211
  cwe:
  - CWE-494
  disclosed_date: 2016-12-25
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Alvaro Muñoz
  references:
  - http://pivotal.io/security/cve-2015-5211
  - https://www.trustwave.com/Resources/SpiderLabs-Blog/Reflected-File-Download---A-New-Web-Attack-Vector/
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-30170
- id: snykio:maven:org.springframework:spring-webmvc:CVE-2016-9878
  title: Directory Traversal
  description: |
    [`org.springframework:spring-webmvc`][1] An issue was discovered in
    Pivotal Spring Framework before 3.2.18, 4.2.x before 4.2.9, and 4.3.x
    before 4.3.5. Paths provided to the `ResourceServlet` were not properly
    sanitized and as a result exposed to directory traversal attacks.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-webmvc%22
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - ">= 1.2.1 <= 3.1.4.RELEASE"
  - ">= 3.2.0.RELEASE < 3.2.18.RELEASE"
  - ">= 4.2.0.RELEASE < 4.2.9.RELEASE"
  - ">= 4.3.0.RELEASE < 4.3.5.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-9878
  cwe:
  - CWE-22
  disclosed_date: 2016-12-28
  created_date: 2016-12-28
  last_modified_date: 2016-12-28
  credit:
  - Shumpei Asahara
  - Yuji Ito
  references:
  - https://jira.spring.io/browse/SPR-14946
  - https://github.com/spring-projects/spring-framework/commit/e2d6e709c3c65a4951eb096843ee75d5200cfcad
  - https://bugzilla.redhat.com/show_bug.cgi?id=1408164
  - https://pivotal.io/security/cve-2016-9878
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-9878
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-31332
- id: snykio:maven:org.springframework:spring-webmvc:CVE-2018-11039
  title: Cross-Site Tracing (XST)
  description: |
    [`org.springframework:spring-webmvc`][1] provides a comprehensive
    programming and configuration model for modern Java-based enterprise
    applications - on any kind of deployment platform.

    Affected versions of this package are vulnerable to Cross-site Tracing
    (XST) attcks. It allows web applications to change the HTTP request
    method to any HTTP method (including TRACE) using the
    `HiddenHttpMethodFilter` in Spring MVC. If an application has a
    pre-existing XSS vulnerability, a malicious user (or attacker) can use
    this filter to escalate to an XST attack.



    [1]: http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-webmvc%22
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - ">= 4.3 < 4.3.18"
  - ">= 5.0 < 5.0.7"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-11039
  cwe:
  - CWE-284
  disclosed_date: 2018-06-08
  created_date: 2016-12-25
  last_modified_date: 2016-12-25
  credit:
  - Mariusz Luciow
  references:
  - https://pivotal.io/security/cve-2018-11039
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-31690
- id: snykio:maven:org.springframework:spring-webmvc:CVE-2018-1271
  title: Directory Traversal
  description: |
    [org.springframework:spring-webmvc][1] Spring provides everything you
    need beyond the Java language to create enterprise applications in a
    wide range of scenarios and architectures.

    Affected versions of this package are vulnerable to Directory Traversal.
    When static resources are served from a file system on Windows (as
    opposed to the classpath, or the ServletContext), a malicious user can
    send a request using a specially crafted URL that can lead a directory
    traversal attack.



    [1]: https://mvnrepository.com/artifact/org.springframework/spring-webmvc
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - "< 4.3.15"
  - ">= 5.0.0 < 5.0.5"
  severity: high
  package_manager: maven
  cve:
  - CVE-2018-1271
  cwe:
  - CWE-23
  disclosed_date: 2018-04-06
  created_date: 2018-04-09
  last_modified_date: 2018-04-09
  credit:
  - Orange Tsai
  references:
  - https://pivotal.io/security/cve-2018-1271
  - https://nvd.nist.gov/vuln/detail/CVE-2018-1271
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-32202
- id: snykio:maven:org.springframework:spring-webmvc:CVE-2018-1272
  title: Multipart Content Pollution
  description: |
    [org.springframework:spring-webmvc][1] Spring provides everything you
    need beyond the Java language to create enterprise applications in a
    wide range of scenarios and architectures.

    Affected versions of this package are vulnerable to Multipart Content
    Pollution. It provides client-side support for multipart requests. When
    the server application (server A) receives input from a remote client,
    and then uses that input to make a multipart request to another server
    (server B), it can be exposed to an attack, where an extra multipart is
    inserted in the content of the request from server A, causing server B
    to use the wrong value for a part it expects. This could to lead
    privilege escalation, for example, if the part content represents a
    username or user roles.



    [1]: https://mvnrepository.com/artifact/org.springframework/spring-webmvc
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - "< 4.3.14"
  - ">= 5.0.0 < 5.0.5"
  severity: low
  package_manager: maven
  cve:
  - CVE-2018-1272
  cwe:
  - CWE-94
  disclosed_date: 2018-04-09
  created_date: 2018-04-09
  last_modified_date: 2018-04-09
  credit:
  - Unknown
  references:
  - https://pivotal.io/security/cve-2018-1272
  - https://nvd.nist.gov/vuln/detail/CVE-2018-1272
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORK-32199
- id: victims:maven:org.springframework:spring-webmvc:2014-0054
  title: 'Spring MVC: XML External Entities'
  description: 'Spring MVC''s Jaxb2RootElementHttpMessageConverter also processed
    user provided XML and  neither disabled XML external entities nor provided an
    option to disable them. Jaxb2RootElementHttpMessageConverter has been modified
    to provide an option to control  the processing of XML external entities and that
    processing is now disabled by default.

'
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - "<=3.2.7.RELEASE"
  - '3.2'
  - "<=4.0.1.RELEASE"
  - '4.0'
  patched_versions:
  - ">=3.2.8.RELEASE"
  - '3.2'
  - ">=4.0.2.RELEASE"
  - '4.0'
  severity: high
  package_manager: maven
  cve:
  - CVE-2014-0054
  cvss_v2_score: 6.8
  credit:
  - Victims CVE Database
  references:
  - http://www.pivotal.io/security/cve-2014-0054
  - https://jira.spring.io/browse/SPR-11376
  - http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0054
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2014/0054.yaml
- id: victims:maven:org.springframework:spring-webmvc:2014-1904
  title: Cross-site scripting flaw when using Spring MVC
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - "<=3.2.7.RELEASE"
  - '3'
  - "<=4.0.1.RELEASE"
  - '4'
  patched_versions:
  - ">=3.2.8.RELEASE"
  - '3'
  - ">=4.0.2.RELEASE"
  - '4'
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-1904
  cvss_v2_score: 5.0
  credit:
  - Victims CVE Database
  references:
  - http://www.gopivotal.com/security/cve-2014-1904
  - https://bugzilla.redhat.com/CVE-2014-1904
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2014/1904.yaml
- id: victims:maven:org.springframework:spring-webmvc:2014-3578
  title: 'Spring MVC: Directory traversal flaw'
  description: 'Some URLs were not sanitized correctly before use allowing an attacker
    to obtain any file on the file system that was also accessible to process in which
    the Spring web application was running.

'
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - "<=3.2.8.RELEASE"
  - '3.2'
  - "<=4.0.4.RELEASE"
  - '4.0'
  patched_versions:
  - ">=3.2.9.RELEASE"
  - '3.2'
  - ">=4.0.5.RELEASE"
  - '4.0'
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-3578
  cvss_v2_score: 5.0
  credit:
  - Victims CVE Database
  references:
  - http://www.pivotal.io/security/cve-2014-3578
  - https://jira.spring.io/browse/SPR-12354
  - http://jvndb.jvn.jp/en/contents/2014/JVNDB-2014-000054.html
  - https://bugzilla.redhat.com/show_bug.cgi?id=1131882
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2014/3578.yaml
- id: victims:maven:org.springframework:spring-webmvc:2014-3625
  title: 'Spring Framework: directory traversal flaw'
  description: 'Some URLs were not sanitized correctly before use allowing an attacker
    to obtain any file on the file system that was also accessible to process in which
    the Spring web application was running.

'
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - "<=3.2.11.RELEASE"
  - '3.2'
  - "<=4.0.7.RELEASE"
  - '4.0'
  - "<=4.1.1.RELEASE"
  - '4.1'
  patched_versions:
  - ">=3.2.12.RELEASE"
  - '3.2'
  - ">=4.0.8.RELEASE"
  - '4.0'
  - ">=4.1.2.RELEASE"
  - '4.1'
  severity: medium
  package_manager: maven
  cve:
  - CVE-2014-3625
  cvss_v2_score: 5.0
  credit:
  - Victims CVE Database
  references:
  - http://www.pivotal.io/security/cve-2014-3625
  - https://bugzilla.redhat.com/CVE-2014-3625
  - https://jira.spring.io/browse/SPR-12354
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2014/3625.yaml
- id: victims:maven:org.springframework:spring-webmvc:2015-5211
  title: 'Spring Framework: reflected file download vulnerability'
  description: 'Under some situations, the Spring Framework is vulnerable to a Reflected
    File Download (RFD) attack. The attack involves a malicious user crafting a URL
    with a batch script extension that results in the response being downloaded rather
    than rendered and also includes some input reflected in the response.

'
  affected_package: org.springframework:spring-webmvc
  vulnerable_versions:
  - "<=4.2.1.RELEASE"
  - '4.2'
  - "<=4.1.7.RELEASE"
  - '4.1'
  - "<=4.0.9.RELEASE"
  - '4.0'
  - "<=3.2.14.RELEASE"
  - '3.2'
  patched_versions:
  - ">=4.2.2.RELEASE"
  - '4.2'
  - ">=4.1.8.RELEASE"
  - '4.1'
  - ">=3.2.15.RELEASE"
  - '3.2'
  severity: medium
  package_manager: maven
  cve:
  - CVE-2015-5211
  cvss_v2_score: 4.0
  credit:
  - Victims CVE Database
  references:
  - http://pivotal.io/security/cve-2015-5211
  - https://access.redhat.com/security/cve/cve-2015-5211
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2015/5211.yaml
