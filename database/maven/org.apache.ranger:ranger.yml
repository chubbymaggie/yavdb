---
- id: ossindex:maven:org.apache.ranger:ranger:8398915912
  title: "[CVE-2016-0733]  Improper Authentication"
  description: The Admin UI in Apache Ranger before 0.5.1 does not properly handle
    authentication requests that lack a password, which allows remote attackers to
    bypass authentication by leveraging knowledge of a valid username.
  affected_package: org.apache.ranger:ranger
  vulnerable_versions:
  - 0.5.0
  package_manager: maven
  cve:
  - CVE-2016-0733
  disclosed_date: 2016-04-12
  created_date: 2016-04-12
  last_modified_date: 2017-04-14
  credit:
  - OSSIndex
  references:
  - http://www.securityfocus.com/bid/82871
  - https://cwiki.apache.org/confluence/display/RANGER/Vulnerabilities+found+in+Ranger
  - https://issues.apache.org/jira/browse/RANGER-835
  - https://mail-archives.apache.org/mod_mbox/ranger-dev/201602.mbox/%3CD2D9A4C5.114ECA%25vel@apache.org%3E
  source_url: https://ossindex.net/resource/package/8400498787/vulnerabilities
- id: ossindex:maven:org.apache.ranger:ranger:8398915915
  title: "[CVE-2016-0735]  Permissions, Privileges, and Access Controls"
  description: Apache Ranger 0.5.x before 0.5.2 allows remote authenticated users
    to bypass intended parent resource-level access restrictions by leveraging mishandling
    of a resource-level exclude policy.
  affected_package: org.apache.ranger:ranger
  vulnerable_versions:
  - 0.5.0
  - 0.5.1
  package_manager: maven
  cve:
  - CVE-2016-0735
  disclosed_date: 2016-04-11
  created_date: 2016-04-11
  last_modified_date: 2017-04-14
  credit:
  - OSSIndex
  references:
  - http://mail-archives.apache.org/mod_mbox/ranger-dev/201603.mbox/%3CD31EE434.14B879%25vel%40apache.org%3E
  source_url: https://ossindex.net/resource/package/8400498787/vulnerabilities
- id: ossindex:maven:org.apache.ranger:ranger:8399899918
  title: "[CVE-2016-2174]  Improper Neutralization of Special Elements used in an
    SQL Command (SQL Injection)"
  description: SQL injection vulnerability in the policy admin tool in Apache Ranger
    before 0.5.3 allows remote authenticated administrators to execute arbitrary SQL
    commands via the eventTime parameter to service/plugins/policies/eventTime.
  affected_package: org.apache.ranger:ranger
  vulnerable_versions:
  - 0.5.0
  - 0.5.1
  - 0.5.2
  package_manager: maven
  cve:
  - CVE-2016-2174
  disclosed_date: 2016-06-13
  created_date: 2016-06-13
  last_modified_date: 2017-04-14
  credit:
  - OSSIndex
  references:
  - http://www.openwall.com/lists/oss-security/2016/06/01/3
  - https://cwiki.apache.org/confluence/display/RANGER/Vulnerabilities+found+in+Ranger
  source_url: https://ossindex.net/resource/package/8400498787/vulnerabilities
- id: ossindex:maven:org.apache.ranger:ranger:8400161438
  title: '[CVE-2016-5395]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in the create user functionality
    in the policy admin tool in Apache Ranger before 0.6.1 allows remote authenticated
    administrators to inject arbitrary web script or HTML via vectors related to policies.
  affected_package: org.apache.ranger:ranger
  vulnerable_versions:
  - "<0.6.1"
  package_manager: maven
  cve:
  - CVE-2016-5395
  disclosed_date: 2016-09-26
  created_date: 2016-09-26
  last_modified_date: 2017-04-17
  credit:
  - OSSIndex
  references:
  - http://www.securityfocus.com/bid/92577
  - https://cwiki.apache.org/confluence/display/RANGER/Vulnerabilities+found+in+Ranger
  source_url: https://ossindex.net/resource/package/8400498787/vulnerabilities
- id: ossindex:maven:org.apache.ranger:ranger:8402799545
  title: '[CVE-2015-0265]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in the Policy Admin Tool in
    Apache Ranger before 0.5.0 allows remote attackers to inject arbitrary web script
    or HTML via the HTTP User-Agent header.
  affected_package: org.apache.ranger:ranger
  vulnerable_versions:
  - 0.4.0
  package_manager: maven
  cve:
  - CVE-2015-0265
  disclosed_date: 2016-04-11
  created_date: 2016-04-11
  last_modified_date: 2016-04-12
  credit:
  - OSSIndex
  references:
  - http://www.securityfocus.com/bid/76208
  - http://www.slideshare.net/wojdwo/big-problems-with-big-data-hadoop-interfaces-security
  - https://cwiki.apache.org/confluence/display/RANGER/Vulnerabilities+found+in+Ranger
  - https://mail-archives.apache.org/mod_mbox/ranger-dev/201508.mbox/%3CD1E7EC30.9D53F%25vel@apache.org%3E
  source_url: https://ossindex.net/resource/package/8400498787/vulnerabilities
- id: ossindex:maven:org.apache.ranger:ranger:8402799547
  title: "[CVE-2015-0266]  Permissions, Privileges, and Access Controls"
  description: The Policy Admin Tool in Apache Ranger before 0.5.0 allows remote authenticated
    users to bypass intended access restrictions via direct access to module URLs.
  affected_package: org.apache.ranger:ranger
  vulnerable_versions:
  - 0.4.0.
  package_manager: maven
  cve:
  - CVE-2015-0266
  disclosed_date: 2016-04-11
  created_date: 2016-04-11
  last_modified_date: 2016-04-13
  credit:
  - OSSIndex
  references:
  - http://www.securityfocus.com/bid/76221
  - http://www.slideshare.net/wojdwo/big-problems-with-big-data-hadoop-interfaces-security
  - https://cwiki.apache.org/confluence/display/RANGER/Vulnerabilities+found+in+Ranger
  - https://mail-archives.apache.org/mod_mbox/ranger-dev/201508.mbox/%3CD1E7EC30.9D53F%25vel@apache.org%3E
  source_url: https://ossindex.net/resource/package/8400498787/vulnerabilities
- id: ossindex:maven:org.apache.ranger:ranger:8402799742
  title: "[CVE-2015-5167]  Permissions, Privileges, and Access Controls"
  description: The Policy Admin Tool in Apache Ranger before 0.5.1 allows remote authenticated
    users to bypass intended access restrictions via the REST API.
  affected_package: org.apache.ranger:ranger
  vulnerable_versions:
  - 0.5.0
  package_manager: maven
  cve:
  - CVE-2015-5167
  disclosed_date: 2016-04-12
  created_date: 2016-04-12
  last_modified_date: 2016-04-13
  credit:
  - OSSIndex
  references:
  - http://www.securityfocus.com/bid/82871
  - https://cwiki.apache.org/confluence/display/RANGER/Vulnerabilities+found+in+Ranger
  - https://mail-archives.apache.org/mod_mbox/ranger-dev/201602.mbox/%3CD2D9A4C5.114ECA%25vel@apache.org%3E
  source_url: https://ossindex.net/resource/package/8400498787/vulnerabilities
- id: ossindex:maven:org.apache.ranger:ranger:8404636770
  title: "[CVE-2016-8746] Apache Ranger before 0.6.3 policy engine incorrectly matches
    paths in certain co..."
  description: Apache Ranger before 0.6.3 policy engine incorrectly matches paths
    in certain conditions when policy does not contain wildcards and has recursion
    flag set to true.
  affected_package: org.apache.ranger:ranger
  vulnerable_versions:
  - 0.6.2
  package_manager: maven
  cve:
  - CVE-2016-8746
  disclosed_date: 2017-06-14
  created_date: 2017-06-14
  last_modified_date: 2017-06-19
  credit:
  - OSSIndex
  references:
  - http://www.securityfocus.com/bid/95998
  - https://cwiki.apache.org/confluence/display/RANGER/Vulnerabilities+found+in+Ranger
  source_url: https://ossindex.net/resource/package/8400498787/vulnerabilities
- id: ossindex:maven:org.apache.ranger:ranger:8404636771
  title: '[CVE-2016-8751]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Apache Ranger before 0.6.is vulnerable to a Stored Cross-Site Scripting
    in when entering custom policy conditions. Admin users can store some arbitrary
    javascript code to be executed when normal users login and access policies.
  affected_package: org.apache.ranger:ranger
  vulnerable_versions:
  - 0.5.3
  package_manager: maven
  cve:
  - CVE-2016-8751
  disclosed_date: 2017-06-14
  created_date: 2017-06-14
  last_modified_date: 2017-06-19
  credit:
  - OSSIndex
  references:
  - http://www.securityfocus.com/bid/99067
  - https://cwiki.apache.org/confluence/display/RANGER/Vulnerabilities+found+in+Ranger
  source_url: https://ossindex.net/resource/package/8400498787/vulnerabilities
- id: ossindex:maven:org.apache.ranger:ranger:8404636868
  title: "[CVE-2017-7676]  Improper Input Validation"
  description: Policy resource matcher in Apache Ranger before 0.7.1 ignores characters
    after '*' wildcard character - like my*test, test*.txt. This can result in unintended
    behavior.
  affected_package: org.apache.ranger:ranger
  vulnerable_versions:
  - 0.7.0
  package_manager: maven
  cve:
  - CVE-2017-7676
  disclosed_date: 2017-06-14
  created_date: 2017-06-14
  last_modified_date: 2017-06-19
  credit:
  - OSSIndex
  references:
  - http://www.securityfocus.com/bid/98958
  - https://cwiki.apache.org/confluence/display/RANGER/Vulnerabilities+found+in+Ranger
  source_url: https://ossindex.net/resource/package/8400498787/vulnerabilities
- id: ossindex:maven:org.apache.ranger:ranger:8404636869
  title: "[CVE-2017-7677] In environments that use external location for hive tables,
    Hive Authorizer in A..."
  description: In environments that use external location for hive tables, Hive Authorizer
    in Apache Ranger before 0.7.1 should be checking RWX permission for create table.
  affected_package: org.apache.ranger:ranger
  vulnerable_versions:
  - 0.7.0
  package_manager: maven
  cve:
  - CVE-2017-7677
  disclosed_date: 2017-06-14
  created_date: 2017-06-14
  last_modified_date: 2017-06-19
  credit:
  - OSSIndex
  references:
  - http://www.securityfocus.com/bid/98961
  - https://cwiki.apache.org/confluence/display/RANGER/Vulnerabilities+found+in+Ranger
  source_url: https://ossindex.net/resource/package/8400498787/vulnerabilities
- id: snykio:maven:org.apache.ranger:ranger:30715
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.apache.ranger:ranger`][1] is a framework to enable, monitor and
    manage comprehensive data security across the Hadoop platform.

    Cross-site Scripting (XSS) vulnerability in the create user
    functionality in the policy admin tool in Apache Ranger before 0.6.1
    allows remote authenticated administrators to inject arbitrary web
    script or HTML via vectors related to policies.



    [1]: http://ranger.apache.org
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.apache.ranger:ranger
  vulnerable_versions:
  - "< 0.6.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-5395
  cwe:
  - CWE-79
  disclosed_date: 2016-08-24
  created_date: 2016-08-24
  last_modified_date: 2016-08-24
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-5395
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHERANGER-30715
- id: snykio:maven:org.apache.ranger:ranger:31468
  title: Access Restriction Bypass
  description: |
    [`org.apache.ranger:ranger`][1] is a framework to enable, monitor and
    manage comprehensive data security across the Hadoop platform.

    The Policy Admin Tool in Apache Ranger before 0.5.0 allows remote
    authenticated users to bypass intended access restrictions via direct
    access to module URLs.



    [1]: http://ranger.apache.org
  affected_package: org.apache.ranger:ranger
  vulnerable_versions:
  - "< 0.5.0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2015-0266
  cwe:
  - CWE-264
  disclosed_date: 2015-08-05
  created_date: 2017-08-31
  last_modified_date: 2017-08-31
  credit:
  - Unknown
  references:
  - https://cwiki.apache.org/confluence/display/RANGER/Vulnerabilities+found+in+Ranger
  - https://mail-archives.apache.org/mod_mbox/ranger-dev/201508.mbox/%3CD1E7EC30.9D53F%25vel@apache.org%3E
  - https://nvd.nist.gov/vuln/detail/CVE-2015-0266
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHERANGER-31468
- id: snykio:maven:org.apache.ranger:ranger:31469
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.apache.ranger:ranger`][1] is a framework to enable, monitor and
    manage comprehensive data security across the Hadoop platform.

    Cross-site Scripting (XSS) vulnerability in the Policy Admin Tool in
    Apache Ranger before 0.5.0 allows remote attackers to inject arbitrary
    web script or HTML via the HTTP User-Agent header.



    [1]: http://ranger.apache.org
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.apache.ranger:ranger
  vulnerable_versions:
  - "< 0.5.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2015-0265
  cwe:
  - CWE-79
  disclosed_date: 2015-08-05
  created_date: 2017-08-31
  last_modified_date: 2017-08-31
  credit:
  - Unknown
  references:
  - https://cwiki.apache.org/confluence/display/RANGER/Vulnerabilities+found+in+Ranger
  - https://mail-archives.apache.org/mod_mbox/ranger-dev/201508.mbox/%3CD1E7EC30.9D53F%25vel@apache.org%3E
  - https://nvd.nist.gov/vuln/detail/CVE-2015-0265
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHERANGER-31469
- id: snykio:maven:org.apache.ranger:ranger:31470
  title: Access Restriction Bypass
  description: |
    [`org.apache.ranger:ranger`][1] is a framework to enable, monitor and
    manage comprehensive data security across the Hadoop platform.

    The Admin UI in Apache Ranger before 0.5.1 does not properly handle
    authentication requests that lack a password, which allows remote
    attackers to bypass authentication by leveraging knowledge of a valid
    username.



    [1]: http://ranger.apache.org
  affected_package: org.apache.ranger:ranger
  vulnerable_versions:
  - "< 0.5.1"
  severity: high
  package_manager: maven
  cve:
  - CVE-2016-0733
  cwe:
  - CWE-287
  disclosed_date: 2016-02-16
  created_date: 2017-08-31
  last_modified_date: 2017-08-31
  credit:
  - Unknown
  references:
  - http://seclists.org/oss-sec/2016/q1/284
  - https://cwiki.apache.org/confluence/display/RANGER/Vulnerabilities+found+in+Ranger
  - https://issues.apache.org/jira/browse/RANGER-835
  - https://nvd.nist.gov/vuln/detail/CVE-2016-0733
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHERANGER-31470
- id: snykio:maven:org.apache.ranger:ranger:31471
  title: Access Restriction Bypass
  description: |
    [`org.apache.ranger:ranger`][1] is a framework to enable, monitor and
    manage comprehensive data security across the Hadoop platform.

    The Policy Admin Tool in Apache Ranger before 0.5.1 allows remote
    authenticated users to bypass intended access restrictions via the REST
    API.



    [1]: http://ranger.apache.org
  affected_package: org.apache.ranger:ranger
  vulnerable_versions:
  - "< 0.5.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2015-5167
  cwe:
  - CWE-264
  disclosed_date: 2016-02-05
  created_date: 2017-08-31
  last_modified_date: 2017-08-31
  credit:
  - Unknown
  references:
  - http://seclists.org/oss-sec/2016/q1/284
  - https://cwiki.apache.org/confluence/display/RANGER/Vulnerabilities+found+in+Ranger
  - https://nvd.nist.gov/vuln/detail/CVE-2015-5167
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHERANGER-31471
- id: snykio:maven:org.apache.ranger:ranger:31472
  title: SQL Injection
  description: |
    [`org.apache.ranger:ranger`][1] is a framework to enable, monitor and
    manage comprehensive data security across the Hadoop platform.

    SQL injection vulnerability in the policy admin tool in Apache Ranger
    before 0.5.3 allows remote authenticated administrators to execute
    arbitrary SQL commands via the eventTime parameter to
    service/plugins/policies/eventTime.



    [1]: http://ranger.apache.org
  affected_package: org.apache.ranger:ranger
  vulnerable_versions:
  - "< 0.5.3"
  severity: high
  package_manager: maven
  cve:
  - CVE-2016-2174
  cwe:
  - CWE-89
  disclosed_date: 2016-04-12
  created_date: 2017-08-31
  last_modified_date: 2017-08-31
  credit:
  - Unknown
  references:
  - http://seclists.org/oss-sec/2016/q2/446
  - https://cwiki.apache.org/confluence/display/RANGER/Vulnerabilities+found+in+Ranger
  - https://issues.apache.org/jira/browse/RANGER-921
  - https://nvd.nist.gov/vuln/detail/CVE-2016-2174
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHERANGER-31472
- id: snykio:maven:org.apache.ranger:ranger:31473
  title: Information Exposure
  description: |
    [`org.apache.ranger:ranger`][1] is a framework to enable, monitor and
    manage comprehensive data security across the Hadoop platform.

    Apache Ranger before 0.6.3 policy engine incorrectly matches paths in
    certain conditions when policy does not contain wildcards and has
    recursion flag set to true.



    [1]: http://ranger.apache.org
  affected_package: org.apache.ranger:ranger
  vulnerable_versions:
  - "< 0.6.3"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-8746
  cwe:
  - CWE-426
  disclosed_date: 2017-02-01
  created_date: 2017-08-31
  last_modified_date: 2017-08-31
  credit:
  - Unknown
  references:
  - http://seclists.org/oss-sec/2017/q1/273
  - https://cwiki.apache.org/confluence/display/RANGER/Vulnerabilities+found+in+Ranger
  - https://nvd.nist.gov/vuln/detail/CVE-2016-8751
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHERANGER-31473
- id: snykio:maven:org.apache.ranger:ranger:31474
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.apache.ranger:ranger`][1] is a framework to enable, monitor and
    manage comprehensive data security across the Hadoop platform.

    Apache Ranger before 0.6.is vulnerable to a Stored Cross-site Scripting
    (XSS) attack when entering custom policy conditions. Admin users can
    store some arbitrary javascript code to be executed when normal users
    login and access policies.



    [1]: http://ranger.apache.org
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: org.apache.ranger:ranger
  vulnerable_versions:
  - "< 0.6.3"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2016-8751
  cwe:
  - CWE-79
  disclosed_date: 2017-02-01
  created_date: 2017-08-31
  last_modified_date: 2017-08-31
  credit:
  - Unknown
  references:
  - http://seclists.org/oss-sec/2017/q1/273
  - https://cwiki.apache.org/confluence/display/RANGER/Vulnerabilities+found+in+Ranger
  - https://nvd.nist.gov/vuln/detail/CVE-2016-8751
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHERANGER-31474
- id: snykio:maven:org.apache.ranger:ranger:31475
  title: Access Restriction Bypass
  description: |
    [`org.apache.ranger:ranger`][1] is a framework to enable, monitor and
    manage comprehensive data security across the Hadoop platform.

    Affected versions of the package are vulnerable to Access Restriction
    Bypass. Policy resource matcher in Apache Ranger before 0.7.1 ignores
    characters after \'\*\' wildcard character - like my*test, test*.txt.
    This can result in unintended behavior.



    [1]: https://ranger.apache.org
  affected_package: org.apache.ranger:ranger
  vulnerable_versions:
  - "< 0.7.1"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-7677
  cwe:
  - CWE-275
  disclosed_date: 2017-06-06
  created_date: 2017-08-31
  last_modified_date: 2017-08-31
  credit:
  - Unknown
  references:
  - http://www.openwall.com/lists/oss-security/2017/06/07/9
  - https://cwiki.apache.org/confluence/display/RANGER/Vulnerabilities+found+in+Ranger
  - https://nvd.nist.gov/vuln/detail/CVE-2017-7677
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHERANGER-31475
- id: snykio:maven:org.apache.ranger:ranger:451535
  title: Improper Input Validation
  description: |
    [org.apache.ranger:ranger][1] is a framework to enable, monitor and
    manage comprehensive data security across the Hadoop platform.

    Affected versions of this package are vulnerable to Improper Input
    Validation. Policy resource matcher effectively ignores characters after
    ‘\*’ wildcard character. This can result in affected policies to apply
    to resources where they should not be applied.



    [1]: http://ranger.apache.org
  affected_package: org.apache.ranger:ranger
  vulnerable_versions:
  - ">= 0.6.0 < 0.7.1"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-7676
  cwe:
  - CWE-20
  disclosed_date: 2017-06-14
  created_date: 2019-07-04
  last_modified_date: 2019-07-04
  credit:
  - Unknown
  references:
  - https://cwiki.apache.org/confluence/display/RANGER/Vulnerabilities+found+in+Ranger
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHERANGER-451535
- id: snykio:maven:org.apache.ranger:ranger:72424
  title: Stack-based Buffer Overflow
  description: |
    [org.apache.ranger:ranger][1] is a framework to enable, monitor and
    manage comprehensive data security across the Hadoop platform.

    Affected versions of this package are vulnerable to Stack-based Buffer
    Overflow. The `UnixAuthenticationService` class did not properly
    handling user input.



    [1]: https://github.com/apache/ranger
  affected_package: org.apache.ranger:ranger
  vulnerable_versions:
  - "< 1.2.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-11778
  cwe:
  - CWE-121
  disclosed_date: 2018-10-05
  created_date: 2018-10-09
  last_modified_date: 2018-10-09
  credit:
  - Alexander Klink
  references:
  - https://cwiki.apache.org/confluence/display/RANGER/Vulnerabilities+found+in+Ranger
  - https://seclists.org/oss-sec/2018/q4/11
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHERANGER-72424
