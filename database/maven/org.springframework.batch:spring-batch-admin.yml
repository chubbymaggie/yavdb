---
- id: snykio:maven:org.springframework.batch:spring-batch-admin:31566
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.springframework.batch:spring-batch-admin`][1] is an web
    application and API for managing and monitoring Spring Batch jobs.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS) attacks. Stored Cross-site Scripting (XSS) vulnerability in Spring
    Batch Admin before 1.3.0 allows remote authenticated users to inject
    arbitrary JavaScript or HTML via the file upload functionality.



    [1]: https://batch.springframework.org
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.springframework.batch:spring-batch-admin
  vulnerable_versions:
  - "< 1.3.0.RELEASE"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-12882
  cwe:
  - CWE-79
  disclosed_date: 2017-08-16
  created_date: 2017-11-05
  last_modified_date: 2017-11-05
  credit:
  - Wen Bin
  references:
  - http://www.securityfocus.com/bid/100410/info
  - https://nvd.nist.gov/vuln/detail/CVE-2017-12882
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKBATCH-31566
- id: snykio:maven:org.springframework.batch:spring-batch-admin:31567
  title: Cross-site Request Forgery (CSRF)
  description: |
    [`org.springframework.batch:spring-batch-admin`][1] is an web
    application and API for managing and monitoring Spring Batch jobs.

    Affected versions of the package are vulnerable to Cross-site Request
    Forgery (CSRF). Cross-site request forgery (CSRF) vulnerability in the
    Spring Batch Admin before 1.3.0 allows remote attackers to hijack the
    authentication of unspecified victims and submit arbitrary requests,
    such as exploiting the file upload vulnerability.



    [1]: https://batch.springframework.org
  affected_package: org.springframework.batch:spring-batch-admin
  vulnerable_versions:
  - "< 1.3.0.RELEASE"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-12881
  cwe:
  - CWE-352
  disclosed_date: 2017-08-17
  created_date: 2017-11-05
  last_modified_date: 2017-11-05
  credit:
  - Wen Bin
  references:
  - http://www.securityfocus.com/bid/100410/info
  - https://nvd.nist.gov/vuln/detail/CVE-2017-12881
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKBATCH-31567
- id: snykio:maven:org.springframework.batch:spring-batch-admin:32144
  title: Cross-site Scripting (XSS)
  description: |+
    [org.springframework.batch:spring-batch-admin][1] Web application and
    API for managing and monitoring Spring Batch jobs.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in the file upload feature.An unauthenticated malicious user with
    network access to Spring Batch Admin could store an arbitrary web script
    that would be executed by other users.

    **NOTE**\: Spring Batch Admin has reached end of life as of January 1,
    2018. According to the vendor, Spring Cloud Data Flow is the recommended
    replacement for managing and monitoring Spring Batch jobs going forward.



    [1]: https://github.com/spring-projects/spring-batch-admin
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.springframework.batch:spring-batch-admin
  vulnerable_versions:
  - ">= 0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2018-1229
  cwe:
  - CWE-79
  disclosed_date: 2018-03-21
  created_date: 2018-04-01
  last_modified_date: 2018-04-01
  credit:
  - Unknown
  references:
  - https://github.com/spring-projects/spring-batch-admin/blob/master/MIGRATION.md
  - https://nvd.nist.gov/vuln/detail/cve-2018-1229
  - https://pivotal.io/security/cve-2018-1229
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKBATCH-32144
- id: snykio:maven:org.springframework.batch:spring-batch-admin:32145
  title: Cross-Site Request Forgery (CSRF)
  description: |
    [org.springframework.batch:spring-batch-admin][1] is a Web application
    and API for managing and monitoring Spring Batch jobs.

    Affected version of this package are vulnerable to Cross-Site Request
    Forgery (CSRF). A remote unauthenticated user could craft a malicious
    site that executes requests to Spring Batch Admin. This issue has not
    been patched because Spring Batch Admin has reached end of life.

    **NOTE**\: Spring Batch Admin has reached end of life as of January 1,
    2018. According to the vendor, Spring Cloud Data Flow is the recommended
    replacement for managing and monitoring Spring Batch jobs going forward.



    [1]: https://github.com/spring-projects/spring-batch-admin
  affected_package: org.springframework.batch:spring-batch-admin
  vulnerable_versions:
  - ">= 0"
  severity: high
  package_manager: maven
  cve:
  - CVE-2018-1230
  cwe:
  - CWE-352
  disclosed_date: 2018-03-21
  created_date: 2018-04-01
  last_modified_date: 2018-04-01
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2018-1230
  - https://pivotal.io/security/cve-2018-1230
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKBATCH-32145
