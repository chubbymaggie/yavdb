---
- id: snykio:maven:org.springframework.boot:spring-boot-starter-data-rest:2017-09-07
  title: Arbitrary Code Execution
  description: |
    [`org.springframework.boot:spring-boot-starter-data-rest`][1] provides a
    flexible and configurable mechanism for writing simple services that can
    be exposed over HTTP.

    Affected versions of the package are vulnerable to Arbitrary Code
    Execution. It is caused due to the way Spring uses it\'s own expression
    language in the Data REST component.

    The Spring Expression Language (SpEL) is an expression language (similar
    to OGNL, MVEL, and JBoss EL) which serves as the foundation for
    expression evaluation within the Spring portfolio. It supports querying
    and manipulating an object graph at runtime.

    User input was not validated upon sending a PATCH request with a `path`
    parameter to `spring-data-rest` servers. An attacker may sumit a
    specially crafted PATCH request with a path containing SpEL syntax, and
    the Spring REST server, would in turn run these expressions.

    An example for an invalid PATCH request:

        [
            {"op":"replace", "path":"<Malicious SpEL code>", "value": "bar" }
        ]



    [1]: https://data.springframework.org
    \n[`org.springframework.boot:spring-boot-starter-data-rest`][1] provides a
    flexible and configurable mechanism for writing simple services that can
    be exposed over HTTP.

    Affected versions of the package are vulnerable to Arbitrary Code
    Execution. It is caused due to the way Spring uses it\'s own expression
    language in the Data REST component.

    The Spring Expression Language (SpEL) is an expression language (similar
    to OGNL, MVEL, and JBoss EL) which serves as the foundation for
    expression evaluation within the Spring portfolio. It supports querying
    and manipulating an object graph at runtime.

    User input was not validated upon sending a PATCH request with a `path`
    parameter to `spring-data-rest` servers. An attacker may sumit a
    specially crafted PATCH request with a path containing SpEL syntax, and
    the Spring REST server, would in turn run these expressions.

    An example for an invalid PATCH request:

        [
            {"op":"replace", "path":"<Malicious SpEL code>", "value": "bar" }
        ]



    [1]: https://data.springframework.org
    \n[`org.springframework.boot:spring-boot-starter-data-rest`][1] provides a
    flexible and configurable mechanism for writing simple services that can
    be exposed over HTTP.

    Affected versions of the package are vulnerable to Arbitrary Code
    Execution. It is caused due to the way Spring uses it\'s own expression
    language in the Data REST component.

    The Spring Expression Language (SpEL) is an expression language (similar
    to OGNL, MVEL, and JBoss EL) which serves as the foundation for
    expression evaluation within the Spring portfolio. It supports querying
    and manipulating an object graph at runtime.

    User input was not validated upon sending a PATCH request with a `path`
    parameter to `spring-data-rest` servers. An attacker may sumit a
    specially crafted PATCH request with a path containing SpEL syntax, and
    the Spring REST server, would in turn run these expressions.

    An example for an invalid PATCH request:

        [
            {"op":"replace", "path":"<Malicious SpEL code>", "value": "bar" }
        ]



    [1]: https://data.springframework.org
    \n[`org.springframework.boot:spring-boot-starter-data-rest`][1] provides a
    flexible and configurable mechanism for writing simple services that can
    be exposed over HTTP.

    Affected versions of the package are vulnerable to Arbitrary Code
    Execution. It is caused due to the way Spring uses it\'s own expression
    language in the Data REST component.

    The Spring Expression Language (SpEL) is an expression language (similar
    to OGNL, MVEL, and JBoss EL) which serves as the foundation for
    expression evaluation within the Spring portfolio. It supports querying
    and manipulating an object graph at runtime.

    User input was not validated upon sending a PATCH request with a `path`
    parameter to `spring-data-rest` servers. An attacker may sumit a
    specially crafted PATCH request with a path containing SpEL syntax, and
    the Spring REST server, would in turn run these expressions.

    An example for an invalid PATCH request:

        [
            {"op":"replace", "path":"<Malicious SpEL code>", "value": "bar" }
        ]



    [1]: https://data.springframework.org
    \n[`org.springframework.boot:spring-boot-starter-data-rest`][1] provides a
    flexible and configurable mechanism for writing simple services that can
    be exposed over HTTP.

    Affected versions of the package are vulnerable to Arbitrary Code
    Execution. It is caused due to the way Spring uses it\'s own expression
    language in the Data REST component.

    The Spring Expression Language (SpEL) is an expression language (similar
    to OGNL, MVEL, and JBoss EL) which serves as the foundation for
    expression evaluation within the Spring portfolio. It supports querying
    and manipulating an object graph at runtime.

    User input was not validated upon sending a PATCH request with a `path`
    parameter to `spring-data-rest` servers. An attacker may sumit a
    specially crafted PATCH request with a path containing SpEL syntax, and
    the Spring REST server, would in turn run these expressions.

    An example for an invalid PATCH request:

        [
            {"op":"replace", "path":"<Malicious SpEL code>", "value": "bar" }
        ]



    [1]: https://data.springframework.org
    \n[`org.springframework.boot:spring-boot-starter-data-rest`][1] provides a
    flexible and configurable mechanism for writing simple services that can
    be exposed over HTTP.

    Affected versions of the package are vulnerable to Arbitrary Code
    Execution. It is caused due to the way Spring uses it\'s own expression
    language in the Data REST component.

    The Spring Expression Language (SpEL) is an expression language (similar
    to OGNL, MVEL, and JBoss EL) which serves as the foundation for
    expression evaluation within the Spring portfolio. It supports querying
    and manipulating an object graph at runtime.

    User input was not validated upon sending a PATCH request with a `path`
    parameter to `spring-data-rest` servers. An attacker may sumit a
    specially crafted PATCH request with a path containing SpEL syntax, and
    the Spring REST server, would in turn run these expressions.

    An example for an invalid PATCH request:

        [
            {"op":"replace", "path":"<Malicious SpEL code>", "value": "bar" }
        ]



    [1]: https://data.springframework.org
    \n[`org.springframework.boot:spring-boot-starter-data-rest`][1] provides a
    flexible and configurable mechanism for writing simple services that can
    be exposed over HTTP.

    Affected versions of the package are vulnerable to Arbitrary Code
    Execution. It is caused due to the way Spring uses it\'s own expression
    language in the Data REST component.

    The Spring Expression Language (SpEL) is an expression language (similar
    to OGNL, MVEL, and JBoss EL) which serves as the foundation for
    expression evaluation within the Spring portfolio. It supports querying
    and manipulating an object graph at runtime.

    User input was not validated upon sending a PATCH request with a `path`
    parameter to `spring-data-rest` servers. An attacker may sumit a
    specially crafted PATCH request with a path containing SpEL syntax, and
    the Spring REST server, would in turn run these expressions.

    An example for an invalid PATCH request:

        [
            {"op":"replace", "path":"<Malicious SpEL code>", "value": "bar" }
        ]



    [1]: https://data.springframework.org
  affected_package: org.springframework.boot:spring-boot-starter-data-rest
  vulnerable_versions:
  - "< 1.5.9"
  - ">= 2.0.0M1 < 2.0.0M6"
  severity: high
  package_manager: maven
  cve:
  - CVE-2017-8046
  cwe:
  - CWE-94
  credit:
  - Man Yue Mo
  references:
  - https://lgtm.com/blog/spring_data_rest_CVE-2017-8046
  - https://pivotal.io/security/cve-2017-8046
  - https://jira.spring.io/browse/DATAREST-1127
  - https://github.com/spring-projects/spring-data-rest/commit/824e51a1304bbc8334ac0b96ffaef588177e6ccd
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGSPRINGFRAMEWORKBOOT-31664
