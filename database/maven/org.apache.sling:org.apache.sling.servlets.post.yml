---
- id: ossindex:maven:org.apache.sling:org.apache.sling.servlets.post:2012-07-09
  title: "[CVE-2012-2138]  Permissions, Privileges, and Access Controls"
  description: The @CopyFrom operation in the POST servlet in the org.apache.sling.servlets.post
    bundle before 2.1.2 in Apache Sling does not prevent attempts to copy an ancestor
    node to a descendant node, which allows remote attackers to cause a denial of
    service (infinite loop) via a crafted HTTP request.
  affected_package: org.apache.sling:org.apache.sling.servlets.post
  vulnerable_versions:
  - "<2.1.2"
  package_manager: maven
  cve:
  - CVE-2012-2138
  credit:
  - OSSIndex
  references:
  - http://mail-archives.apache.org/mod_mbox/www-announce/201207.mbox/%3CCAEWfVJ=PwoQmwJg0KmbrC17Gw51kgfKRsqgy=4RpMQsdGh0bVg@mail.gmail.com%3E
  - http://svn.apache.org/viewvc?view=revision&revision=1352865
  - https://issues.apache.org/jira/browse/SLING-2517
  source_url: https://ossindex.net/resource/package/7015343936/vulnerabilities
- id: ossindex:maven:org.apache.sling:org.apache.sling.servlets.post:2013-10-17
  title: "[CVE-2013-2254]  Improper Restriction of Operations within the Bounds of
    a Memory Buffer"
  description: The deepGetOrCreateNode function in impl/operations/AbstractCreateOperation.java
    in org.apache.sling.servlets.post.bundle 2.2.0 and 2.3.0 in Apache Sling does
    not properly handle a NULL value that returned when the session does not have
    permissions to the root node, which allows remote attackers to cause a denial
    of service (infinite loop) via unspecified vectors.
  affected_package: org.apache.sling:org.apache.sling.servlets.post
  vulnerable_versions:
  - 2.2.0 | 2.3.0
  package_manager: maven
  cve:
  - CVE-2013-2254
  credit:
  - OSSIndex
  references:
  - http://mail-archives.apache.org/mod_mbox/sling-dev/201310.mbox/%3CCAKkCf4pue6PnESsP1KTdEDJm1gpkANFaK%2BvUd9mzEVT7tXL%2B3A%40mail.gmail.com%3E
  - http://mail-archives.apache.org/mod_mbox/sling-dev/201310.mbox/%3CCAKkCf4pue6PnESsP1KTdEDJm1gpkANFaK+vUd9mzEVT7tXL+3A@mail.gmail.com%3E
  - http://secunia.com/advisories/55157
  - http://www.securityfocus.com/bid/62903
  - http://xforce.iss.net/xforce/xfdb/87765
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/87765
  - https://issues.apache.org/jira/browse/SLING-2913
  source_url: https://ossindex.net/resource/package/7015343936/vulnerabilities
- id: ossindex:maven:org.apache.sling:org.apache.sling.servlets.post:2015-06-02
  title: '[CVE-2015-2944]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Multiple cross-site scripting (XSS) vulnerabilities in Apache Sling
    API before 2.2.2 and Apache Sling Servlets Post before 2.1.2 allow remote attackers
    to inject arbitrary web script or HTML via the URI, related to (1) org/apache/sling/api/servlets/HtmlResponse
    and (2) org/apache/sling/servlets/post/HtmlResponse.
  affected_package: org.apache.sling:org.apache.sling.servlets.post
  vulnerable_versions:
  - "<2.1.2"
  package_manager: maven
  cve:
  - CVE-2015-2944
  credit:
  - OSSIndex
  references:
  - http://jvn.jp/en/jp/JVN61328139/index.html
  - http://jvndb.jvn.jp/jvndb/JVNDB-2015-000069
  - http://www.securityfocus.com/bid/74839
  - https://issues.apache.org/jira/browse/SLING-2082
  source_url: https://ossindex.net/resource/package/7015343936/vulnerabilities
- id: ossindex:maven:org.apache.sling:org.apache.sling.servlets.post:2016-02-10
  title: "[CVE-2016-0956]  Information Exposure"
  description: The Servlets Post component 2.3.6 in Apache Sling, as used in Adobe
    Experience Manager 5.6.1, 6.0.0, and 6.1.0, allows remote attackers to obtain
    sensitive information via unspecified vectors.
  affected_package: org.apache.sling:org.apache.sling.servlets.post
  vulnerable_versions:
  - ">=2.1.2 <=2.3.6"
  package_manager: maven
  cve:
  - CVE-2016-0956
  credit:
  - OSSIndex
  references:
  - http://packetstormsecurity.com/files/135720/Apache-Sling-Framework-2.3.6-Information-Disclosure.html
  - http://seclists.org/fulldisclosure/2016/Feb/48
  - http://www.securityfocus.com/archive/1/archive/1/537498/100/0/threaded
  - https://helpx.adobe.com/security/products/experience-manager/apsb16-05.html
  - https://www.exploit-db.com/exploits/39435/
  source_url: https://ossindex.net/resource/package/7015343936/vulnerabilities
- id: snykio:maven:org.apache.sling:org.apache.sling.servlets.post:2017-08-13
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.apache.sling:org.apache.sling.servlets.post`][1] is a framework
    for RESTful web-applications based on an extensible content tree.
    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attack.



    [1]: https://sling.apache.org/
    \n[`org.apache.sling:org.apache.sling.servlets.post`][1] is a framework
    for RESTful web-applications based on an extensible content tree.
    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attack.



    [1]: https://sling.apache.org/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.apache.sling:org.apache.sling.servlets.post
  vulnerable_versions:
  - "< 2.3.23"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2017-9802
  cwe:
  - CWE-79
  credit:
  - Dmitriev V.
  references:
  - http://www.openwall.com/lists/oss-security/2017/08/14/2
  - https://issues.apache.org/jira/browse/SLING-7041
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESLING-31459
- id: snykio:maven:org.apache.sling:org.apache.sling.servlets.post:2016-10-04
  title: Information Exposure
  description: |
    [`org.apache.sling:org.apache.sling.servlets.post`][1] is a framework
    for RESTful web-applications based on an extensible content tree.

    The Servlets Post component 2.3.6 in Apache Sling, as used in Adobe
    Experience Manager 5.6.1, 6.0.0, and 6.1.0, allows remote attackers to
    obtain sensitive information via unspecified vectors.



    [1]: https://sling.apache.org/
    \n[`org.apache.sling:org.apache.sling.servlets.post`][1] is a framework
    for RESTful web-applications based on an extensible content tree.

    The Servlets Post component 2.3.6 in Apache Sling, as used in Adobe
    Experience Manager 5.6.1, 6.0.0, and 6.1.0, allows remote attackers to
    obtain sensitive information via unspecified vectors.



    [1]: https://sling.apache.org/
    \n[`org.apache.sling:org.apache.sling.servlets.post`][1] is a framework
    for RESTful web-applications based on an extensible content tree.

    The Servlets Post component 2.3.6 in Apache Sling, as used in Adobe
    Experience Manager 5.6.1, 6.0.0, and 6.1.0, allows remote attackers to
    obtain sensitive information via unspecified vectors.



    [1]: https://sling.apache.org/
  affected_package: org.apache.sling:org.apache.sling.servlets.post
  vulnerable_versions:
  - ">= 2.1.2 <= 2.3.6"
  severity: high
  package_manager: maven
  cve:
  - CVE-2016-0956
  cwe:
  - CWE-200
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-0956
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESLING-30733
- id: snykio:maven:org.apache.sling:org.apache.sling.servlets.post:2015-06-03
  title: Cross-site Scripting (XSS)
  description: |+
    [`org.apache.sling:org.apache.sling.servlets.post`][1] is a framework
    for RESTful web-applications based on an extensible content tree.

    Multiple cross-site scripting (XSS) vulnerabilities in Apache Sling API
    before 2.2.2 and Apache Sling Servlets Post before 2.1.2 allow remote
    attackers to inject arbitrary web script or HTML via the URI, related to
    (1) org/apache/sling/api/servlets/HtmlResponse and (2)
    org/apache/sling/servlets/post/HtmlResponse.



    [1]: https://sling.apache.org/
    \n[`org.apache.sling:org.apache.sling.servlets.post`][1] is a framework
    for RESTful web-applications based on an extensible content tree.

    Multiple cross-site scripting (XSS) vulnerabilities in Apache Sling API
    before 2.2.2 and Apache Sling Servlets Post before 2.1.2 allow remote
    attackers to inject arbitrary web script or HTML via the URI, related to
    (1) org/apache/sling/api/servlets/HtmlResponse and (2)
    org/apache/sling/servlets/post/HtmlResponse.



    [1]: https://sling.apache.org/
    \n[`org.apache.sling:org.apache.sling.servlets.post`][1] is a framework
    for RESTful web-applications based on an extensible content tree.

    Multiple cross-site scripting (XSS) vulnerabilities in Apache Sling API
    before 2.2.2 and Apache Sling Servlets Post before 2.1.2 allow remote
    attackers to inject arbitrary web script or HTML via the URI, related to
    (1) org/apache/sling/api/servlets/HtmlResponse and (2)
    org/apache/sling/servlets/post/HtmlResponse.



    [1]: https://sling.apache.org/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: org.apache.sling:org.apache.sling.servlets.post
  vulnerable_versions:
  - "< 2.1.2"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2015-2944
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-2944
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESLING-30732
- id: snykio:maven:org.apache.sling:org.apache.sling.servlets.post:2014-06-17
  title: Denial of Service (DoS)
  description: |+
    [`org.apache.sling:org.apache.sling.servlets.post`][1] is a framework
    for RESTful web-applications based on an extensible content tree.

    The @CopyFrom operation in the POST servlet in the
    org.apache.sling.servlets.post bundle before 2.1.2 in Apache Sling does
    not prevent attempts to copy an ancestor node to a descendant node,
    which allows remote attackers to cause a denial of service (infinite
    loop) via a crafted HTTP request.



    [1]: https://sling.apache.org/
    \n[`org.apache.sling:org.apache.sling.servlets.post`][1] is a framework
    for RESTful web-applications based on an extensible content tree.

    The @CopyFrom operation in the POST servlet in the
    org.apache.sling.servlets.post bundle before 2.1.2 in Apache Sling does
    not prevent attempts to copy an ancestor node to a descendant node,
    which allows remote attackers to cause a denial of service (infinite
    loop) via a crafted HTTP request.



    [1]: https://sling.apache.org/
    \n[`org.apache.sling:org.apache.sling.servlets.post`][1] is a framework
    for RESTful web-applications based on an extensible content tree.

    The @CopyFrom operation in the POST servlet in the
    org.apache.sling.servlets.post bundle before 2.1.2 in Apache Sling does
    not prevent attempts to copy an ancestor node to a descendant node,
    which allows remote attackers to cause a denial of service (infinite
    loop) via a crafted HTTP request.



    [1]: https://sling.apache.org/
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: org.apache.sling:org.apache.sling.servlets.post
  vulnerable_versions:
  - "< 2.1.2"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2012-2138
  cwe:
  - CWE-264
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-2138
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESLING-30730
- id: snykio:maven:org.apache.sling:org.apache.sling.servlets.post:2014-06-08
  title: Denial of Service (DoS)
  description: |+
    [`org.apache.sling:org.apache.sling.servlets.post`][1] is a framework
    for RESTful web-applications based on an extensible content tree.

    The deepGetOrCreateNode function in
    impl/operations/AbstractCreateOperation.java in
    org.apache.sling.servlets.post.bundle 2.2.0 and 2.3.0 in Apache Sling
    does not properly handle a NULL value that returned when the session
    does not have permissions to the root node, which allows remote
    attackers to cause a denial of service (infinite loop) via unspecified
    vectors.



    [1]: https://sling.apache.org/
    \n[`org.apache.sling:org.apache.sling.servlets.post`][1] is a framework
    for RESTful web-applications based on an extensible content tree.

    The deepGetOrCreateNode function in
    impl/operations/AbstractCreateOperation.java in
    org.apache.sling.servlets.post.bundle 2.2.0 and 2.3.0 in Apache Sling
    does not properly handle a NULL value that returned when the session
    does not have permissions to the root node, which allows remote
    attackers to cause a denial of service (infinite loop) via unspecified
    vectors.



    [1]: https://sling.apache.org/
    \n[`org.apache.sling:org.apache.sling.servlets.post`][1] is a framework
    for RESTful web-applications based on an extensible content tree.

    The deepGetOrCreateNode function in
    impl/operations/AbstractCreateOperation.java in
    org.apache.sling.servlets.post.bundle 2.2.0 and 2.3.0 in Apache Sling
    does not properly handle a NULL value that returned when the session
    does not have permissions to the root node, which allows remote
    attackers to cause a denial of service (infinite loop) via unspecified
    vectors.



    [1]: https://sling.apache.org/
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: org.apache.sling:org.apache.sling.servlets.post
  vulnerable_versions:
  - ">= 2.2.0 <= 2.3.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2013-2254
  cwe:
  - CWE-119
  credit:
  - Unknown
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-2254
  source_url: https://snyk.io/vuln/SNYK-JAVA-ORGAPACHESLING-30731
