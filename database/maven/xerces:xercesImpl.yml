---
- id: ossindex:maven:xerces:xercesImpl:2016-12-04
  title: "[CVE-2009-2625] XML parsing Denial-Of-Service"
  description: "> A denial of service flaw was found in the way the JRE processes
    XML. A remote attacker could use this flaw to supply crafted XML that would lead
    to a denial of service.\n> \n> -- [redhat.com](https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2009-2625)"
  affected_package: xerces:xercesImpl
  vulnerable_versions:
  - "<=2.9.1"
  package_manager: maven
  credit:
  - OSSIndex
  references:
  - http://sunsolve.sun.com/search/document.do?assetkey=1-21-118667-22-1
  - https://bugzilla.redhat.com/CVE-2009-2625
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2009-2625
  - https://github.com/victims/victims-cve-db/blob/master/database/java/2009/2625.yaml
  source_url: https://ossindex.net/resource/package/7015190329/vulnerabilities
- id: ossindex:maven:xerces:xercesImpl:2017-03-10
  title: "[CVE-2012-1724] XML parsing infinite loop"
  description: "> A flaw was found in the Java API for XML Processing (JAXP) XML parser.
    \ An attacker able to make a Java application parse a specially-crafted XML file
    could use this flaw to make the XML parser to enter an infinite loop.\n> \n> --
    [redhat.com](https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2012-1724)"
  affected_package: xerces:xercesImpl
  vulnerable_versions:
  - "<=2.3.0"
  package_manager: maven
  credit:
  - OSSIndex
  references:
  - http://svn.apache.org/viewvc?view=revision&revision=319059
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2012-1724
  - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-1724
  - https://github.com/victims/victims-cve-db/blob/master/database/java/2012/1724.yaml
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-1724
  - https://www.oracle.com/technetwork/topics/security/javacpujun2012-1515912.html
  source_url: https://ossindex.net/resource/package/7015190329/vulnerabilities
- id: snykio:maven:xerces:xercesImpl:2009-08-03
  title: Denial of Service (DoS)
  description: |+
    [`xerces:xercesImpl`][1] is the next generation of high performance,
    fully compliant XML parsers in the Apache Xerces family.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS).

    XMLScanner.java in Apache Xerces2 Java, as used in Sun Java Runtime
    Environment (JRE) in JDK and JRE 6 before Update 15 and JDK and JRE 5.0
    before Update 20, and in other products, allows remote attackers to
    cause a denial of service (infinite loop and application hang) via
    malformed XML input, as demonstrated by the Codenomicon XML fuzzing
    framework.



    [1]: http://xerces.apache.org/
    \n[`xerces:xercesImpl`][1] is the next generation of high performance,
    fully compliant XML parsers in the Apache Xerces family.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS).

    XMLScanner.java in Apache Xerces2 Java, as used in Sun Java Runtime
    Environment (JRE) in JDK and JRE 6 before Update 15 and JDK and JRE 5.0
    before Update 20, and in other products, allows remote attackers to
    cause a denial of service (infinite loop and application hang) via
    malformed XML input, as demonstrated by the Codenomicon XML fuzzing
    framework.



    [1]: http://xerces.apache.org/
    \n[`xerces:xercesImpl`][1] is the next generation of high performance,
    fully compliant XML parsers in the Apache Xerces family.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS).

    XMLScanner.java in Apache Xerces2 Java, as used in Sun Java Runtime
    Environment (JRE) in JDK and JRE 6 before Update 15 and JDK and JRE 5.0
    before Update 20, and in other products, allows remote attackers to
    cause a denial of service (infinite loop and application hang) via
    malformed XML input, as demonstrated by the Codenomicon XML fuzzing
    framework.



    [1]: http://xerces.apache.org/
    \n[`xerces:xercesImpl`][1] is the next generation of high performance,
    fully compliant XML parsers in the Apache Xerces family.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS).

    XMLScanner.java in Apache Xerces2 Java, as used in Sun Java Runtime
    Environment (JRE) in JDK and JRE 6 before Update 15 and JDK and JRE 5.0
    before Update 20, and in other products, allows remote attackers to
    cause a denial of service (infinite loop and application hang) via
    malformed XML input, as demonstrated by the Codenomicon XML fuzzing
    framework.



    [1]: http://xerces.apache.org/
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: xerces:xercesImpl
  vulnerable_versions:
  - "< 2.10.0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2009-2625
  cwe:
  - CWE-400
  credit:
  - Jukka Taimisto
  - Tero Rontti
  - Rauli Kaksonen
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2009-2625
  source_url: https://snyk.io/vuln/SNYK-JAVA-XERCES-32014
- id: snykio:maven:xerces:xercesImpl:2012-02-02
  title: Denial of Service (DoS)
  description: |+
    [`xerces:xercesImpl`][1] is the next generation of high performance,
    fully compliant XML parsers in the Apache Xerces family.

    Affected versions of the package are vulnerable to Denial of Service
    (DoS). Apache Xerces2 Java allows remote attackers to cause a denial of
    service (CPU consumption) via a crafted message to an XML service, which
    triggers hash table collisions.



    [1]: http://xerces.apache.org/
    \n[`xerces:xercesImpl`][1] is the next generation of high performance,
    fully compliant XML parsers in the Apache Xerces family.

    Affected versions of the package are vulnerable to Denial of Service
    (DoS). Apache Xerces2 Java allows remote attackers to cause a denial of
    service (CPU consumption) via a crafted message to an XML service, which
    triggers hash table collisions.



    [1]: http://xerces.apache.org/
    \n[`xerces:xercesImpl`][1] is the next generation of high performance,
    fully compliant XML parsers in the Apache Xerces family.

    Affected versions of the package are vulnerable to Denial of Service
    (DoS). Apache Xerces2 Java allows remote attackers to cause a denial of
    service (CPU consumption) via a crafted message to an XML service, which
    triggers hash table collisions.



    [1]: http://xerces.apache.org/
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: xerces:xercesImpl
  vulnerable_versions:
  - ">= 0"
  severity: medium
  package_manager: maven
  cve:
  - CVE-2012-0881
  cwe:
  - CWE-400
  credit:
  - Juraj Somorovsky
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2012-0881
  - https://bugzilla.redhat.com/show_bug.cgi?id=787104
  source_url: https://snyk.io/vuln/SNYK-JAVA-XERCES-31585
- id: victims:maven:xerces:xercesImpl:date
  title: 'Apache Xerces: XML parsing Denial-Of-Service'
  affected_package: xerces:xercesImpl
  vulnerable_versions:
  - "<=2.9.1"
  - "<=2.9.1-jbossas-1"
  - 2.9.1-jbossas-
  patched_versions:
  - ">=2.10.0"
  - ">=2.9.1-jbossas-2"
  - 2.9.1-jbossas-
  - ">=2.9.1-redhat-1"
  - 2.9.1-redhat-
  severity: high
  package_manager: maven
  cve:
  - 2009-2625
  credit:
  - Victims CVE Database
  references:
  - https://bugzilla.redhat.com/CVE-2009-2625
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2009/2625.yaml
- id: victims:maven:xerces:xercesImpl:date
  title: 'Apache Xerces: XMLScanner resource exhaustion'
  affected_package: xerces:xercesImpl
  vulnerable_versions:
  - "<=2.11.0"
  patched_versions:
  - ">=2.12.0"
  severity: high
  package_manager: maven
  cve:
  - 2013-4002
  credit:
  - Victims CVE Database
  references:
  - https://bugzilla.redhat.com/CVE-2013-4002
  - http://svn.apache.org/viewvc?view=revision&revision=1499506
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2013/4002.yaml
- id: victims:maven:xerces:xercesImpl:date
  title: 'Apache Xerces: XML parsing infinite loop'
  affected_package: xerces:xercesImpl
  vulnerable_versions:
  - "<=2.3.0"
  patched_versions:
  - ">=2.4.0"
  severity: high
  package_manager: maven
  cve:
  - 2012-1724
  credit:
  - Victims CVE Database
  references:
  - https://bugzilla.redhat.com/CVE-2012-1724
  - http://svn.apache.org/viewvc?view=revision&revision=319059
  source_url: https://github.com/victims/victims-cve-db/blob/master/database/java/2012/1724.yaml
