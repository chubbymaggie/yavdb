---
- id: snykio:packagist:magento/community-edition:174030
  title: SQL Injection
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to SQL Injection. A bug
    in both `internal/Magento/Framework/DB/Adapter/Pdo/Mysql.php` and
    `lib/Varien/Db/Adapter/Pdo/Mysql.php` allows for a SQLi vector in
    `Magento\Catalog\Controller\Product\Frontend\Action\Synchronize`.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">2.0.0  <2.1.17"
  - ">2.2.0  <2.2.8"
  - ">2.3.0  <2.3.1"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-7139
  cwe:
  - CWE-89
  disclosed_date: 2019-03-29
  created_date: 2019-03-30
  last_modified_date: 2019-03-30
  credit:
  - Ambionics Security
  - Charles Fol
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174030
- id: snykio:packagist:magento/community-edition:174043
  title: Remote Code Execution (RCE)
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Remote Code
    Execution (RCE). An authenticated user with privileges to create
    newsletter or email templates, can execute arbitrary code through
    crafted newsletter or email template code.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-94
  disclosed_date: 2019-03-26
  created_date: 2019-03-31
  last_modified_date: 2019-03-31
  credit:
  - DDV_UA
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174043
- id: snykio:packagist:magento/community-edition:174044
  title: Remote Code Execution (RCE)
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Remote Code
    Execution (RCE). An authenticated user with administrative privileges
    can execute arbitrary code through email templates.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-94
  disclosed_date: 2019-03-26
  created_date: 2019-03-31
  last_modified_date: 2019-03-31
  credit:
  - valis_
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174044
- id: snykio:packagist:magento/community-edition:174046
  title: SQL Injection
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to SQL Injection. An
    authenticated user can insert embedded malicious code through an SQL
    injection vulnerability in the `Catalog` section by manipulating
    `attribute_code`.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-94
  disclosed_date: 2018-03-26
  created_date: 2019-04-01
  last_modified_date: 2019-04-01
  credit:
  - Pete O'Callaghan
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174046
- id: snykio:packagist:magento/community-edition:174048
  title: Remote Code Execution
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Remote Code
    Execution. An authenticated user with administrative privileges can
    execute arbitrary code through a `Phar deserialisation` vulnerability.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-352
  - CWE-94
  disclosed_date: 2018-03-26
  created_date: 2019-04-01
  last_modified_date: 2019-04-01
  credit:
  - Simon Scannell
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174048
- id: snykio:packagist:magento/community-edition:174049
  title: Remote Code Execution
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Remote Code
    Execution. An attacker with privileges to configure store settings can
    execute arbitrary code through server-side request forgery.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-352
  - CWE-94
  disclosed_date: 2018-03-26
  created_date: 2019-04-01
  last_modified_date: 2019-04-01
  credit:
  - Max Chadwick
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174049
- id: snykio:packagist:magento/community-edition:174050
  title: Remote Code Execution
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Remote Code
    Execution. An attacker can execute arbitrary code via a PHP archive
    deserialisation vulnerability if he has privileges to configure email
    templates.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-352
  - CWE-94
  disclosed_date: 2018-03-26
  created_date: 2019-04-01
  last_modified_date: 2019-04-01
  credit:
  - Simon Scannell
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174050
- id: snykio:packagist:magento/community-edition:174051
  title: Information Exposure
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Information
    Exposure. Because NGINX configuration allows PHP files to be executed in
    any directory, an authenticated user with administrative privileges can
    upload PHP files to access sensitive data.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-200
  disclosed_date: 2018-03-26
  created_date: 2019-04-01
  last_modified_date: 2019-04-01
  credit:
  - Kieren Evans
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174051
- id: snykio:packagist:magento/community-edition:174052
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). An authenticated user with administrative privileges can embed
    arbitrary code when editing the `Newsletter` section of the admin panel.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2018-03-26
  created_date: 2019-04-01
  last_modified_date: 2019-04-01
  credit:
  - internal
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174052
- id: snykio:packagist:magento/community-edition:174053
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). An Attacker can use a stored cross site scripting vulnerability
    to embed malicious code via the `Customer Segments` section of the Admin
    if he has privileges to the Customer Segments section.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2018-03-26
  created_date: 2019-04-01
  last_modified_date: 2019-04-01
  credit:
  - magecraze
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174053
- id: snykio:packagist:magento/community-edition:174054
  title: Authentication Bypass
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Authentication
    Bypass. An authenticated user can create a B2B account without
    administrative approval.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-288
  disclosed_date: 2018-03-26
  created_date: 2019-04-01
  last_modified_date: 2019-04-01
  credit:
  - craiggene
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174054
- id: snykio:packagist:magento/community-edition:174055
  title: Privilege Escalation
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Privilege
    Escalation. By using a web API endpoint to send a request to the server,
    an authenticated customer can control other customer\'s requisition
    lists . This overrides the `customer_id` parameter.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-269
  disclosed_date: 2018-03-26
  created_date: 2019-04-01
  last_modified_date: 2019-04-01
  credit:
  - Brian LaBelle
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174055
- id: snykio:packagist:magento/community-edition:174056
  title: SQL Injection
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to SQL Injection. An
    authenticated user with privileges to configure email templates can
    execute arbitrary SQL queries.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-89
  disclosed_date: 2018-03-26
  created_date: 2019-04-02
  last_modified_date: 2019-04-02
  credit:
  - Blaklis_
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174056
- id: snykio:packagist:magento/community-edition:174057
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). An Attacker can use cross-site scripting to embed malicious code
    if he has privileges to the Admin requisition list ID.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2018-03-26
  created_date: 2019-04-02
  last_modified_date: 2019-04-02
  credit:
  - Pete O'Callaghan
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174057
- id: snykio:packagist:magento/community-edition:174058
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). An authenticated user with administrative privileges can embed
    arbitrary code in the Conditions tab of Admin Shopping Cart Rules page.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2018-03-26
  created_date: 2019-04-02
  last_modified_date: 2019-04-02
  credit:
  - magecraze
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174058
- id: snykio:packagist:magento/community-edition:174059
  title: Cross-site Request Forgery (CSRF)
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF). An attacker can delete a product attribute within the
    context of authenticated administrator\'s session through cross-site
    request forgery.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-352
  disclosed_date: 2018-03-26
  created_date: 2019-04-02
  last_modified_date: 2019-04-02
  credit:
  - djordjemarjanovic
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174059
- id: snykio:packagist:magento/community-edition:174060
  title: Cross-site Request Forgery (CSRF)
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF). An attacker can delete the site map within the context
    of an authenticated administrator\'s session through cross-site request
    forgery.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: low
  package_manager: packagist
  cwe:
  - CWE-352
  disclosed_date: 2018-03-26
  created_date: 2019-04-02
  last_modified_date: 2019-04-02
  credit:
  - djordjemarjanovic
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174060
- id: snykio:packagist:magento/community-edition:174061
  title: Cross-site Request Forgery (CSRF)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF). An attacker can delete all synonyms groups within the
    context of an authenticated administrator\'s session through cross-site
    request forgery.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-352
  disclosed_date: 2018-03-26
  created_date: 2019-04-02
  last_modified_date: 2019-04-02
  credit:
  - djordjemarjanovic
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174061
- id: snykio:packagist:magento/community-edition:174062
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) via a stored XSS in the `Terms & Conditions` with Checkbox Text
    field in the admin panel if there are administrative privileges.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2018-03-26
  created_date: 2019-04-02
  last_modified_date: 2019-04-02
  credit:
  - magecraze
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174062
- id: snykio:packagist:magento/community-edition:174063
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). An authenticated user with privileges to edit the Admin
    notification section can use a stored XSS to embed malicious code.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2018-03-26
  created_date: 2019-04-02
  last_modified_date: 2019-04-02
  credit:
  - wiardvanrij
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174063
- id: snykio:packagist:magento/community-edition:174064
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). An authenticated user with privileges to product name fields on
    the Admin can use stored cros-site scripting vulnerability to embed
    malicious code.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2018-03-26
  created_date: 2019-04-02
  last_modified_date: 2019-04-02
  credit:
  - Max Chadwick
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174064
- id: snykio:packagist:magento/community-edition:174065
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). An authenticated user with privileges to the B2B packages through
    an unsanitized URL parameter can use a stored cross-site scripting
    vulnerability to embed malicious code.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2018-03-26
  created_date: 2019-04-02
  last_modified_date: 2019-04-02
  credit:
  - Pete O'Callaghan
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174065
- id: snykio:packagist:magento/community-edition:174066
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). An authenticated user with privileges to the Admin **Stores**
    &gt; **Attributes** &gt; \**Product \** configuration area can use a
    stored cross-site scripting vulnerability to embed malicious code.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2018-03-26
  created_date: 2019-04-02
  last_modified_date: 2019-04-02
  credit:
  - Luke Rodgers
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174066
- id: snykio:packagist:magento/community-edition:174067
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). An authenticated user with privileges to the Checkbox Custom
    Option Value field on the Admin can use a stored cross-site scripting
    vulnerability to embed malicious code.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2018-03-26
  created_date: 2019-04-02
  last_modified_date: 2019-04-02
  credit:
  - Max Chadwick
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174067
- id: snykio:packagist:magento/community-edition:174068
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). An authenticated user with privileges to B2B packages through an
    unsanitized URL parameter can use a stored cross-site scripting
    vulnerability to embed malicious code.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2018-03-26
  created_date: 2019-04-02
  last_modified_date: 2019-04-02
  credit:
  - Pete O'Callaghan
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174068
- id: snykio:packagist:magento/community-edition:174069
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). An authenticated user with administrative privileges can embed
    malicious code in the `Attribute Label` for `Media Attributes` section
    in the admin panel.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2018-03-26
  created_date: 2019-04-02
  last_modified_date: 2019-04-02
  credit:
  - Max Chadwick
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174069
- id: snykio:packagist:magento/community-edition:174070
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). An authenticated user with administrative privileges can
    manipulate the notification feed, which allows an attacker to use a
    cross-site scripting vulnerability to embed malicious code.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2018-03-26
  created_date: 2019-04-02
  last_modified_date: 2019-04-02
  credit:
  - Max Chadwick
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174070
- id: snykio:packagist:magento/community-edition:174071
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). An authenticated user with privileges to the Admin **Products**
    &gt; **Catalog** configuration section can use a stored cross-site
    scripting vulnerability to embed malicious code.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2018-03-26
  created_date: 2019-04-02
  last_modified_date: 2019-04-02
  credit:
  - Max Chadwick
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174071
- id: snykio:packagist:magento/community-edition:174072
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). An authenticated user with privileges to the Admin product
    configurations section can use a stored cross-site scripting
    vulnerability to embed malicious code.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2018-03-26
  created_date: 2019-04-02
  last_modified_date: 2019-04-02
  credit:
  - Zhouyuan Yang of Fortinet's FortiGuard Labs
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174072
- id: snykio:packagist:magento/community-edition:174073
  title: Cross-site Request Forgery (CSRF)
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF). An attacker can delete the content of `wyswig` directory
    within the context of authenticated administrator\'s session.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-352
  disclosed_date: 2018-03-26
  created_date: 2019-04-02
  last_modified_date: 2019-04-02
  credit:
  - boskostan
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174073
- id: snykio:packagist:magento/community-edition:174075
  title: Information disclosure
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Information
    disclosure. The default configuration allows public access to custom PHP
    settings.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-200
  disclosed_date: 2018-03-26
  created_date: 2019-04-02
  last_modified_date: 2019-04-02
  credit:
  - Willem de Groot
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174075
- id: snykio:packagist:magento/community-edition:174076
  title: Information Exposure
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Information
    Exposure. An authenticated user can view Personally identifiable details
    of another user.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-200
  disclosed_date: 2018-03-26
  created_date: 2019-04-02
  last_modified_date: 2019-04-02
  credit:
  - jealousbat
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174076
- id: snykio:packagist:magento/community-edition:174078
  title: Information Disclousure
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Information
    Disclousure. Exception error reports capture administrative credentials
    in clear text format.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-200
  disclosed_date: 2018-03-26
  created_date: 2019-04-02
  last_modified_date: 2019-04-02
  credit:
  - magecraze
  - Matt Hamm
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174078
- id: snykio:packagist:magento/community-edition:174079
  title: Information Exposure
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Information
    Exposure. An authenticated user can enumerate and access unauthorised
    wish list.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-200
  disclosed_date: 2018-03-26
  created_date: 2019-04-02
  last_modified_date: 2019-04-02
  credit:
  - Roberto Suggi Liverani
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174079
- id: snykio:packagist:magento/community-edition:174080
  title: Script Injections
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Script Injections.
    An authenticated user can add and execute a malicious script on an HTML
    page through a vulnerable CLI command due to lack of data validation.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-94
  disclosed_date: 2018-03-26
  created_date: 2019-04-02
  last_modified_date: 2019-04-02
  credit:
  - scottsb
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174080
- id: snykio:packagist:magento/community-edition:174081
  title: Cross-site Scripting (XSS)
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). An authenticated user can insert embedded malicious code through
    a stored cross-site scripting vulnerability in the `Catalog` section by
    manipulating `attribute_code`.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1  <2.1.17"
  - ">=2.2  <2.2.8"
  - ">=2.3  <2.3.1"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2018-03-26
  created_date: 2019-04-01
  last_modified_date: 2019-04-01
  credit:
  - Pete O'Callaghan
  references:
  - https://magento.com/security/patches/magento-2.3.1-2.2.8-and-2.1.17-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-174081
- id: snykio:packagist:magento/community-edition:456784
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). An authenticated user with privileges to modify currency symbols
    can inject malicious javascript.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7945
  cwe:
  - CWE-79
  disclosed_date: 2019-08-02
  created_date: 2019-08-06
  last_modified_date: 2019-08-06
  credit:
  - Unknown
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-23
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-456784
- id: snykio:packagist:magento/community-edition:456786
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in the admin panel. This could be exploited by an authenticated
    user with privileges to email templates.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7909
  cwe:
  - CWE-79
  disclosed_date: 2019-08-02
  created_date: 2019-08-06
  last_modified_date: 2019-08-06
  credit:
  - Peter O'Callaghan
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-23
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-456786
- id: snykio:packagist:magento/community-edition:458138
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). This can be exploited by an authenticated user to escalate
    privileges.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.2  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7881
  cwe:
  - CWE-79
  disclosed_date: 2019-08-02
  created_date: 2019-08-07
  last_modified_date: 2019-08-07
  credit:
  - Max Chadwick
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-23
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458138
- id: snykio:packagist:magento/community-edition:458139
  title: Server-side Request Forgery (SSRF)
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Server-side Request
    Forgery (SSRF). This can be exploited by authenticated user with admin
    privileges to manipulate shipment settings to execute arbitrary code.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-7923
  cwe:
  - CWE-918
  disclosed_date: 2019-08-02
  created_date: 2019-08-07
  last_modified_date: 2019-08-07
  credit:
  - Max Chadwick
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-13
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458139
- id: snykio:packagist:magento/community-edition:458140
  title: Cross-site Request Forgery (CSRF)
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF). An attacker can cause unwanted items to be added to a
    shopper\'s cart due to an insufficiently robust anti-CSRF token
    implementation.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7857
  cwe:
  - CWE-352
  disclosed_date: 2019-08-02
  created_date: 2019-08-07
  last_modified_date: 2019-08-07
  credit:
  - Unknown
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-33
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458140
- id: snykio:packagist:magento/community-edition:458141
  title: Denial of Service (DoS)
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). By abusing insufficient brute-forcing defenses in the token
    exchange protocol, an unauthenticated attacker could disrupt
    transactions between the Magento merchant and PayPal.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-7928
  cwe:
  - CWE-400
  disclosed_date: 2019-08-02
  created_date: 2019-08-07
  last_modified_date: 2019-08-07
  credit:
  - Unknown
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-13
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458141
- id: snykio:packagist:magento/community-edition:458142
  title: Information Exposure
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Information
    Exposure. Requests for a specific file path could result in a redirect
    to the URL of the Magento admin panel, disclosing its location to
    potentially unauthorized parties.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7852
  cwe:
  - CWE-200
  disclosed_date: 2019-08-02
  created_date: 2019-08-07
  last_modified_date: 2019-08-07
  credit:
  - Max Chadwick
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-33
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458142
- id: snykio:packagist:magento/community-edition:458143
  title: Information Exposure
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Information
    Exposure. A SOAP web service endpoint does not properly enforce
    parameters related to access control. This can be abused to leak
    customer information via crafted SOAP requests.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-7951
  cwe:
  - CWE-200
  disclosed_date: 2019-08-02
  created_date: 2019-08-07
  last_modified_date: 2019-08-07
  credit:
  - Unknown
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-13
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458143
- id: snykio:packagist:magento/community-edition:458144
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). This can be exploited by an authenticated user with privileges to
    modify content block titles to inject malicious javascript.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7936
  cwe:
  - CWE-79
  disclosed_date: 2019-08-02
  created_date: 2019-08-07
  last_modified_date: 2019-08-07
  credit:
  - Max Chadwick
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-13
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458144
- id: snykio:packagist:magento/community-edition:458145
  title: Unsafe File Upload
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Unsafe File Upload.
    An authenticated user with administrator privileges to the import
    feature can make modifications to a configuration file, resulting in
    potentially unauthorized removal of file upload restrictions. This can
    result in arbitrary code execution when a malicious file is then
    uploaded and executed on the system.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-7930
  cwe:
  - CWE-434
  disclosed_date: 2019-08-02
  created_date: 2019-08-07
  last_modified_date: 2019-08-07
  credit:
  - sambecks
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-13
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458145
- id: snykio:packagist:magento/community-edition:458146
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). This can be exploited by an authenticated user with access to
    manage orders and order status.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7867
  cwe:
  - CWE-79
  disclosed_date: 2019-08-02
  created_date: 2019-08-07
  last_modified_date: 2019-08-07
  credit:
  - DDV_UA
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-23
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458146
- id: snykio:packagist:magento/community-edition:458148
  title: Information Exposure
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Information
    Exposure. Names of disabled downloadable products could be disclosed due
    to inadequate validation of user input.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7899
  cwe:
  - CWE-200
  disclosed_date: 2019-08-02
  created_date: 2019-08-07
  last_modified_date: 2019-08-07
  credit:
  - Edgar BodaMajer
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-33
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458148
- id: snykio:packagist:magento/community-edition:458149
  title: Resource Injection
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Resource Injection
    in the RSS feed. This can lead to unauthorized access to order details.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7864
  cwe:
  - CWE-99
  disclosed_date: 2019-08-02
  created_date: 2019-08-07
  last_modified_date: 2019-08-07
  credit:
  - Roberto Suggi Liverani
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-33
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458149
- id: snykio:packagist:magento/community-edition:458150
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in the admin panel. An authenticated user with privileges to
    manage orders can inject malicious javascript.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-7877
  cwe:
  - CWE-79
  disclosed_date: 2019-08-02
  created_date: 2019-08-07
  last_modified_date: 2019-08-07
  credit:
  - Simon Scannell
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-13
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458150
- id: snykio:packagist:magento/community-edition:458614
  title: Directory Traversal
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Directory Traversal.
    This can result in unauthorized access to uploaded images due to
    insufficient access control.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7859
  cwe:
  - CWE-23
  disclosed_date: 2019-08-02
  created_date: 2019-08-07
  last_modified_date: 2019-08-07
  credit:
  - Unknown
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-23
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458614
- id: snykio:packagist:magento/community-edition:458615
  title: Improper Access Control
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Improper Access
    Control. An unauthenticated user can bypass access controls via REST API
    calls to assign themselves to an arbitrary company, thereby gaining read
    access to potentially confidental information.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-7950
  cwe:
  - CWE-284
  disclosed_date: 2019-08-02
  created_date: 2019-08-07
  last_modified_date: 2019-08-07
  credit:
  - Unknown
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-13
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458615
- id: snykio:packagist:magento/community-edition:458617
  title: Cross-site Request Forgery (CSRF)
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF) in the `GiftCardAccount` removal feature.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7947
  cwe:
  - CWE-352
  disclosed_date: 2019-08-02
  created_date: 2019-08-07
  last_modified_date: 2019-08-07
  credit:
  - Unknown
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-33
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458617
- id: snykio:packagist:magento/community-edition:458618
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in the admin panel. This could be exploited by an authenticated
    user with privileges to the admin panel to inject malicious javascript.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.2  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7862
  cwe:
  - CWE-79
  disclosed_date: 2019-08-02
  created_date: 2019-08-07
  last_modified_date: 2019-08-07
  credit:
  - Magecraze
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-13
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458618
- id: snykio:packagist:magento/community-edition:458619
  title: Information Exposure
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Information
    Exposure. An authenticated user with privileges to create email
    templates could leak sensitive data via a malicious email template.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.2  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7888
  cwe:
  - CWE-200
  disclosed_date: 2019-08-02
  created_date: 2019-08-07
  last_modified_date: 2019-08-07
  credit:
  - Blaklis
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-33
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458619
- id: snykio:packagist:magento/community-edition:458620
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). This could be exploited by an authenticated user with privileges
    to marketing email templates to inject malicious javascript.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.2  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7880
  cwe:
  - CWE-79
  disclosed_date: 2019-08-02
  created_date: 2019-08-07
  last_modified_date: 2019-08-07
  credit:
  - Roberto Suggi Liverani
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-23
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458620
- id: snykio:packagist:magento/community-edition:458621
  title: Remote Code Execution (RCE)
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Remote Code
    Execution (RCE). An authenticated user with administrator privileges to
    layouts can execute arbitrary code through a combination of product
    import, crafted csv file and XML layout update.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.2  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-7896
  cwe:
  - CWE-94
  disclosed_date: 2019-08-02
  created_date: 2019-08-07
  last_modified_date: 2019-08-07
  credit:
  - Edgar BodaMajer
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-13
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458621
- id: snykio:packagist:magento/community-edition:458766
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). An authenticated user with privileges to the editor can inject
    malicious SWF files.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7882
  cwe:
  - CWE-79
  disclosed_date: 2019-08-02
  created_date: 2019-08-08
  last_modified_date: 2019-08-08
  credit:
  - KAnev
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-23
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458766
- id: snykio:packagist:magento/community-edition:458767
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) that can be exploited by an authenticated user with privileges to
    the product catalog to inject malicious javascript.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7921
  cwe:
  - CWE-79
  disclosed_date: 2019-08-02
  created_date: 2019-08-08
  last_modified_date: 2019-08-08
  credit:
  - Unknown
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-23
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458767
- id: snykio:packagist:magento/community-edition:458768
  title: Cross-site Request Forgery (CSRF)
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF) in the checkout cart item. This could be exploited at the
    time of editing or configuration.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: low
  package_manager: packagist
  cve:
  - CVE-2019-7865
  cwe:
  - CWE-352
  disclosed_date: 2019-08-02
  created_date: 2019-08-08
  last_modified_date: 2019-08-08
  credit:
  - Magecraze
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-33
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458768
- id: snykio:packagist:magento/community-edition:458770
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in the admin panel. This could be exploited by an authenticated
    user with privileges to customer configurations to inject malicious
    javascript.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7897
  cwe:
  - CWE-79
  disclosed_date: 2019-08-02
  created_date: 2019-08-08
  last_modified_date: 2019-08-08
  credit:
  - Karim El Ouerghemmi
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-13
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458770
- id: snykio:packagist:magento/community-edition:458772
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in the admin panel when the feature that adds a secret key to the
    Admin URL is disabled.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7887
  cwe:
  - CWE-79
  disclosed_date: 2019-08-02
  created_date: 2019-08-08
  last_modified_date: 2019-08-08
  credit:
  - SmashITs
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-23
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458772
- id: snykio:packagist:magento/community-edition:458773
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in the admin panel. This could be exploited by an authenticated
    user with privileges to edit product content pages to inject malicious
    javascript.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7927
  cwe:
  - CWE-79
  disclosed_date: 2019-08-02
  created_date: 2019-08-08
  last_modified_date: 2019-08-08
  credit:
  - Unknown
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-13
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458773
- id: snykio:packagist:magento/community-edition:458960
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). in the admin panel. This can be exploited by an authenticated
    user with privileges to edit newsletter templates to inject malicious
    javascript.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7934
  cwe:
  - CWE-79
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Roberto Suggi Liverani
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-23
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458960
- id: snykio:packagist:magento/community-edition:458961
  title: Arbitrary Code Execution
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution due to insufficient input validation in the config builder of
    the Elastic search module. This can be abused by an authenticated user
    with the ability to configure the catalog search.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-7885
  cwe:
  - CWE-94
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Simon Scannell
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-13
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458961
- id: snykio:packagist:magento/community-edition:458962
  title: Privilege Escalation
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Privilege Escalation
    due to insufficient enforcement of user access controls. This enables a
    low-privileged user to make unauthorized environment configuration
    changes.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-7904
  cwe:
  - CWE-269
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Edgar BodaMajer
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-13
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458962
- id: snykio:packagist:magento/community-edition:458963
  title: Improper Input Validation
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Improper Input
    Validation. This allows an attacker to bypass file upload restrictions.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7861
  cwe:
  - CWE-20
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Magento
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-13
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458963
- id: snykio:packagist:magento/community-edition:458965
  title: SQL Injection
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to SQL Injection. An
    authenticated user with marketing manipulation privileges can invoke
    methods that alter data of the underlying model followed by
    corresponding database modifications.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7889
  cwe:
  - CWE-89
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Blaklis
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-13
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458965
- id: snykio:packagist:magento/community-edition:458968
  title: Inadequate Encryption Strength
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Inadequate
    Encryption Strength. A weak cryptograhic mechanism is used to generate
    the intialization vector in multiple security relevant contexts.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: low
  package_manager: packagist
  cve:
  - CVE-2019-7886
  cwe:
  - CWE-326
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - rbsec
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-33
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458968
- id: snykio:packagist:magento/community-edition:458969
  title: Resource Injection
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Resource Injection.
    This can be abused by a user with admin privileges to add users to
    company accounts or modify existing user details.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7872
  cwe:
  - CWE-99
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - craiggene
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-13
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458969
- id: snykio:packagist:magento/community-edition:458970
  title: Remote Code Execution
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Remote Code
    Execution. An authenticated user with administrator privileges to access
    shipment settings can execute arbitrary code via server-side request
    forgery.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-7892
  cwe:
  - CWE-94
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Max Chadwick
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-13
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458970
- id: snykio:packagist:magento/community-edition:458971
  title: Remote Code Execution
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Remote Code
    Execution. An authenticated user with privileges to manipulate layouts
    can insert a malicious payload into the layout.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-7876
  cwe:
  - CWE-94
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Peter O'Callaghan
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-13
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458971
- id: snykio:packagist:magento/community-edition:458972
  title: Remote Code Execution
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Remote Code
    Execution. An authenticated user with admin privileges to layouts can
    execute arbitrary code through a crafted XML layout update.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-7895
  cwe:
  - CWE-94
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Blaklis
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-13
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458972
- id: snykio:packagist:magento/community-edition:458973
  title: Cross-site Request Forgery (CSRF)
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF). An attacker can delete all blocks causing the loss of
    data from customer pages within the context of an authenticated
    administrator\'s session.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7851
  cwe:
  - CWE-352
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Djordje Marjanovic
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-33
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458973
- id: snykio:packagist:magento/community-edition:458974
  title: Arbitrary File Upload
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Arbitrary File
    Upload. This can be exploited by an authenticated user with admin
    privileges to edit configuration keys to remove file extension filters,
    potentially resulting in the malicious upload and execution of malicious
    files on the server.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: low
  package_manager: packagist
  cve:
  - CVE-2019-7912
  cwe:
  - CWE-434
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Blaklis
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-33
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458974
- id: snykio:packagist:magento/community-edition:458975
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). This can be exploited by an authenticated user with privileges to
    store product attributes to inject malicious javascript.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7937
  cwe:
  - CWE-79
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Max Chadwick
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-13
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458975
- id: snykio:packagist:magento/community-edition:458977
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in the admin panel. This can be exploited by an authenticated user
    with privileges to modify catalog price rules to inject malicious
    javascript.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7938
  cwe:
  - CWE-79
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Karim El Ouerghemmi
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-23
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458977
- id: snykio:packagist:magento/community-edition:458979
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in the admin panel. This can be exploited by an authenticated user
    with privileges to modify content page titles to inject malicious
    javascript.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7935
  cwe:
  - CWE-79
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Max Chadwick
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-23
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458979
- id: snykio:packagist:magento/community-edition:458980
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). This can be exploited by an authenticated user with privileges to
    the tax notifications configuration in the Magento admin panel.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7853
  cwe:
  - CWE-79
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Max Chadwick
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-23
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458980
- id: snykio:packagist:magento/community-edition:458982
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in the admin panel. This can be exploited by an authenticated user
    with privileges to modify store currency options to inject malicious
    javascript.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7940
  cwe:
  - CWE-79
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Max Chadwick
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-23
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458982
- id: snykio:packagist:magento/community-edition:458983
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in the admin panel. This can be exploited by an authenticated user
    with access to products and categories.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7863
  cwe:
  - CWE-79
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - DDV_UA
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-23
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458983
- id: snykio:packagist:magento/community-edition:458984
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in the admin panel. This can be exploited by an authenticated user
    with access to edit Product information via the TinyMCE editor.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7866
  cwe:
  - CWE-79
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - DDV_UA
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-23
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458984
- id: snykio:packagist:magento/community-edition:458985
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in the admin panel. This can be exploited by an authenticated user
    with permissions to manage customer groups.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7869
  cwe:
  - CWE-79
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - DDV_UA
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-23
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458985
- id: snykio:packagist:magento/community-edition:458987
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in the admin panel. This can be exploited by an authenticated user
    with privileges to newsletter templates.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7875
  cwe:
  - CWE-79
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Roberto Suggi Liverani
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-23
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458987
- id: snykio:packagist:magento/community-edition:458988
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in the admin panel. This can be exploited by an authenticated user
    with privileges to modify product information.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7908
  cwe:
  - CWE-79
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Praveen Sutar
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-23
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458988
- id: snykio:packagist:magento/community-edition:458989
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in the admin panel. This can be exploited by an authenticated user
    with permissions to manage tax rules.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7868
  cwe:
  - CWE-79
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - DDV_UA
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-23
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458989
- id: snykio:packagist:magento/community-edition:458990
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in the admin panel. This can be exploited by an authenticated user
    with privileges to modify node attributes to inject malicious
    javascript.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7926
  cwe:
  - CWE-79
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Magento
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-23
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458990
- id: snykio:packagist:magento/community-edition:458992
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in the product comments field. An authenticated user with
    privileges to the Return Product comments field can inject malicious
    javascript.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7944
  cwe:
  - CWE-79
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Magento
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-23
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458992
- id: snykio:packagist:magento/community-edition:458993
  title: Cross-site Scripting (XSS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in the customer cart checkout page. This can be exploited by
    sending a victim a crafted URL that results in malicious javascript
    execution in the victim\'s browser.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7939
  cwe:
  - CWE-79
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Topi Viljanen
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-23
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458993
- id: snykio:packagist:magento/community-edition:458994
  title: Information Exposure
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Information
    Exposure. An authenticated user with administrator privileges may be
    able to view metadata of a trusted device used by another administrator
    via a crafted http request.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7929
  cwe:
  - CWE-200
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Max Chadwick
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-33
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458994
- id: snykio:packagist:magento/community-edition:458995
  title: Cross-site Request Forgery (CSRF)
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF). This can result in unintended deletion of user roles.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7874
  cwe:
  - CWE-352
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Djordje Marjanovic
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-13
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458995
- id: snykio:packagist:magento/community-edition:458996
  title: Cross-site Request Forgery (CSRF)
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF). This can result in unintended deletion of the store
    design schedule.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7873
  cwe:
  - CWE-352
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Djordje Marjanovic
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-33
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458996
- id: snykio:packagist:magento/community-edition:458997
  title: Remote Code Execution
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Remote Code
    Execution. An authenticated user with admin privileges to email
    templates can execute arbitrary code by previewing a malicious template.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-7903
  cwe:
  - CWE-94
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Karim El Ouerghemmi
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-13
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458997
- id: snykio:packagist:magento/community-edition:458999
  title: Remote Code Execution
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Remote Code
    Execution. An authenticated user with admin privileges to create
    sitemaps can execute arbitrary PHP code by creating a malicious sitemap
    file.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-7932
  cwe:
  - CWE-94
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Simon Scannell
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-13
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-458999
- id: snykio:packagist:magento/community-edition:459000
  title: Remote Code Execution
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Remote Code
    Execution. An authenticated user with admin privileges to create or edit
    a product can execute arbitrary code via malicious XML layout updates.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-7942
  cwe:
  - CWE-94
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Charles Fol
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-13
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-459000
- id: snykio:packagist:magento/community-edition:459001
  title: Denial of Service (DoS)
  description: |+
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). Under certain conditions, an unauthenticated attacker can force
    the Magento store\'s full page cache to serve a 404 page to customers.



    [1]: https://packagist.org/packages/magento/project-community-edition
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7915
  cwe:
  - CWE-400
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Matti Vapa
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-13
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-459001
- id: snykio:packagist:magento/community-edition:459002
  title: Server-side Request Forgery (SSRF)
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Server-side Request
    Forgery (SSRF). This can be exploited by an authenticated user with
    admin privileges to manipulate shipment methods to execute arbitrary
    code.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-7913
  cwe:
  - CWE-918
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Max Chadwick
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-13
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-459002
- id: snykio:packagist:magento/community-edition:459004
  title: Server-side Request Forgery (SSRF)
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Server-side Request
    Forgery (SSRF). This can be exploited by an authenticated user with
    access to the admin panel to manipulate system configuration and execute
    arbitrary code.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-7911
  cwe:
  - CWE-918
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Max Chadwick
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-13
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-459004
- id: snykio:packagist:magento/community-edition:459005
  title: Inadequate Encryption Strength
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Inadequate
    Encryption Strength. A cryptographically weak pseudo-rando number
    generator is used in multiple security relevant contexts.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: low
  package_manager: packagist
  cve:
  - CVE-2019-7860
  cwe:
  - CWE-326
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Magento
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-33
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-459005
- id: snykio:packagist:magento/community-edition:459006
  title: Inadequate Encryption Strength
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Inadequate
    Encryption Strength. A cryptograhic flaw can be abused by an
    unauthenticated user to discover an invariant used in gift card
    generation.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7855
  cwe:
  - CWE-326
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Max Chadwick
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-23
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-459006
- id: snykio:packagist:magento/community-edition:459009
  title: Inadequate Encryption Strength
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Inadequate
    Encryption Strength. A cryptographic flaw resulted in storage of
    sensitive information with an algorithm that is insufficiently resistant
    to brute force attacks.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7858
  cwe:
  - CWE-326
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Max Chadwick
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-23
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-459009
- id: snykio:packagist:magento/community-edition:459027
  title: Security Bypass (IDOR)
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Security Bypass
    (IDOR). Due to Insecure Direct Object Reference (IDOR) in downloadable
    products folder, it can be exploited by an administrator with limited
    privileges to delete the downloadable products folder.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7925
  cwe:
  - CWE-264
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Michael Reizelman
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-23
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-459027
- id: snykio:packagist:magento/community-edition:459028
  title: Information Exposure
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Information
    Exposure. This can lead to unauthorized disclosure of company credit
    history details.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-7854
  cwe:
  - CWE-200
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Max Chadwick
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-23
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-459028
- id: snykio:packagist:magento/community-edition:459029
  title: Resource Injection
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Resource Injection
    in the order processing workflow. This can lead to unauthorized access
    to order details.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7890
  cwe:
  - CWE-99
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Unknown
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-23
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-459029
- id: snykio:packagist:magento/community-edition:459035
  title: Security Bypass (PHP script injection)
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Security Bypass (PHP
    script injection). An authenticated user can bypass security protections
    that prevent arbitrary PHP script upload via form data injection.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-7871
  cwe:
  - CWE-358
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Max Chadwick
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-13
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-459035
- id: snykio:packagist:magento/community-edition:459037
  title: Session Fixation
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Session Fixation. A
    defense-in-depth check was added to mitigate inadequate session
    validation handling by 3rd party checkout modules.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: low
  package_manager: packagist
  cve:
  - CVE-2019-7849
  cwe:
  - CWE-384
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - RogerKeulen
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-33
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-459037
- id: snykio:packagist:magento/community-edition:459039
  title: Information Exposure
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Information
    Exposure. Samples of disabled downloadable products are accessible due
    to inadequate validation of user input.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.18"
  - ">=2.2.0  <2.2.9"
  - ">=2.3.0  <2.3.2"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2019-7898
  cwe:
  - CWE-200
  disclosed_date: 2019-08-02
  created_date: 2019-08-12
  last_modified_date: 2019-08-12
  credit:
  - Edgar BodaMajer
  references:
  - https://magento.com/security/patches/magento-2.3.2-2.2.9-and-2.1.18-security-update-23
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-459039
- id: snykio:packagist:magento/community-edition:472929
  title: Remote Code Execution (RCE)
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Remote Code
    Execution (RCE). An authenticated user with privileges to manipulate
    layouts and images can insert a malicious payload into the page layout.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.2.0  <2.2.10"
  - ">=2.3.0  <2.3.2-p2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-8150
  cwe:
  - CWE-94
  disclosed_date: 2019-10-08
  created_date: 2019-10-11
  last_modified_date: 2019-10-11
  credit:
  - Internal employee
  references:
  - https://magento.com/security/patches/magento-2.3.3-and-2.2.10-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-472929
- id: snykio:packagist:magento/community-edition:472930
  title: Remote Code Execution (RCE)
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Remote Code
    Execution (RCE). An authenticated user with privileges to manipulate CMS
    section of the website can trigger remote code execution via custom
    layout update



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.1.0  <2.1.19"
  - ">=2.2.0  <2.2.10"
  - ">=2.3.0  <2.3.2-p2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-8137
  cwe:
  - CWE-94
  disclosed_date: 2019-10-08
  created_date: 2019-10-11
  last_modified_date: 2019-10-11
  credit:
  - Luke Rodgers
  references:
  - https://magento.com/security/patches/magento-2.3.3-and-2.2.10-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-472930
- id: snykio:packagist:magento/community-edition:472931
  title: Remote Code Execution (RCE)
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Remote Code
    Execution (RCE). Dependency injection through Symphony framework allows
    service identifiers to be derived from user controlled data, which can
    lead to remote code execution.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.2.0  <2.2.10"
  - ">=2.3.0  <2.3.2-p2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-8135
  cwe:
  - CWE-94
  disclosed_date: 2019-10-08
  created_date: 2019-10-11
  last_modified_date: 2019-10-11
  credit:
  - Unknown
  references:
  - https://magento.com/security/patches/magento-2.3.3-and-2.2.10-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-472931
- id: snykio:packagist:magento/community-edition:472932
  title: Remote Code Execution (RCE)
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Remote Code
    Execution (RCE). An authenticated user can leverage email templates
    hiearachy to manipulate the interceptor class in a way that allows an
    attacker to execute arbitrary code.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.2.0  <2.2.10"
  - ">=2.3.0  <2.3.2-p2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-8110
  cwe:
  - CWE-94
  disclosed_date: 2019-10-08
  created_date: 2019-10-11
  last_modified_date: 2019-10-11
  credit:
  - Blaklis
  references:
  - https://magento.com/security/patches/magento-2.3.3-and-2.2.10-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-472932
- id: snykio:packagist:magento/community-edition:472933
  title: Remote Code Execution (RCE)
  description: |
    [magento/community-edition][1] is a modern cloud eCommerce platform.

    Affected versions of this package are vulnerable to Remote Code
    Execution (RCE). A remote code execution vulnerability exists in Magento
    2.1 prior to 2.1.19, Magento 2.2 prior to 2.2.10, Magento 2.3 prior to
    2.3.3. An authenticated user with privileges to modify product catalogs
    can trigger PHP file inclusion through a crafted XML file that specifies
    product design update.



    [1]: https://packagist.org/packages/magento/project-community-edition
  affected_package: magento/community-edition
  vulnerable_versions:
  - ">=2.2.0  <2.2.10"
  - ">=2.3.0  <2.3.2-p2"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-8154
  cwe:
  - CWE-94
  disclosed_date: 2019-10-08
  created_date: 2019-10-11
  last_modified_date: 2019-10-11
  credit:
  - Edgar BodaMajer
  references:
  - https://magento.com/security/patches/magento-2.3.3-and-2.2.10-security-update
  source_url: https://snyk.io/vuln/SNYK-PHP-MAGENTOCOMMUNITYEDITION-472933
