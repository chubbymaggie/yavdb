---
- id: friendsofphp:packagist:league/commonmark:CVE-2018-20583
  title: XSS vulnerability with unsafe link protocols
  affected_package: league/commonmark
  vulnerable_versions:
  - ">=0.15.6 <0.18.1"
  package_manager: packagist
  cve:
  - CVE-2018-20583
  disclosed_date: 2018-12-29
  created_date: 2018-12-29
  last_modified_date: 2018-12-29
  credit:
  - FriendsOfPHP
  references:
  - https://github.com/thephpleague/commonmark/issues/337
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/league/commonmark/CVE-2018-20583.yaml
- id: snykio:packagist:league/commonmark:173996
  title: Cross-site Scripting (XSS)
  description: |+
    [league/commonmark][1] is a PHP-based Markdown parser which supports the
    full CommonMark spec. It is based on the CommonMark JS reference
    implementation.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Malicious users can insert double-encoded HTML entities into
    their Markdown.



    [1]: https://packagist.org/packages/league/commonmark
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: league/commonmark
  vulnerable_versions:
  - "<0.18.3"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2019-03-22
  created_date: 2019-03-22
  last_modified_date: 2019-03-22
  credit:
  - Sebastiaan Knijnenburg
  references:
  - https://github.com/thephpleague/commonmark/commit/6f16c6eb893f760d3b4f9a03c94c62653c4ac829
  - https://github.com/thephpleague/commonmark/commit/edde218c179b6503d153035b3801f14a9ada542b
  - https://github.com/thephpleague/commonmark/commit/f1453b9fdb516436d79ff17af555f8d6e2321472
  - https://github.com/thephpleague/commonmark/issues/353
  source_url: https://snyk.io/vuln/SNYK-PHP-LEAGUECOMMONMARK-173996
- id: snykio:packagist:league/commonmark:72744
  title: Cross-site Scripting (XSS)
  description: |
    [league/commonmark][1] is a PHP-based Markdown parser which supports the
    full CommonMark spec. It is based on the CommonMark JS reference
    implementation.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). Malicious users can bypass the \"unsafe links\" restrictions by
    inserting an encoded newline character (%0a) into the URL\'s protocol
    like so:

        [Click me](javascri%0apt:alert('XSS'))

    The vulnerable library would attempt to decode but will fail to
    re-encode that newline, resulting in the following HTML:

        <p><a href="javascri
        pt:alert('XSS')">Click me</a></p>

    The browser will ignore the newline and execute javascript (instead of
    javascri + \\n + pt). This way, JS is allowed to be executed when the
    link is clicked.

    # Detailes   {#detailes}

    Cross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.



    [1]: https://packagist.org/packages/league/commonmark
  affected_package: league/commonmark
  vulnerable_versions:
  - "<0.18.1"
  - ">=0.15.6"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  disclosed_date: 2018-12-30
  created_date: 2018-12-30
  last_modified_date: 2018-12-30
  credit:
  - Austin H. and Graham Campbell
  references:
  - https://github.com/thephpleague/commonmark/commit/7d91ca0655f24a98cf7f3b5c9f257f0c2f8abcfd
  - https://github.com/thephpleague/commonmark/issues/337
  source_url: https://snyk.io/vuln/SNYK-PHP-LEAGUECOMMONMARK-72744
- id: snykio:packagist:league/commonmark:73652
  title: Cross-site Scripting (XSS)
  description: |+
    [league/commonmark][1] is a PHP-based Markdown parser which supports the
    full CommonMark spec. It is based on the CommonMark JS reference
    implementation.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). A remote attacker could insert unsafe URLs into HTML via a
    newline character.



    [1]: https://packagist.org/packages/league/commonmark
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: league/commonmark
  vulnerable_versions:
  - ">=0.15.6  <0.18.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-20583
  cwe:
  - CWE-79
  disclosed_date: 2018-12-30
  created_date: 2019-02-10
  last_modified_date: 2019-02-10
  credit:
  - Unknown
  references:
  - https://github.com/thephpleague/commonmark/commit/e959590a21d06b675beb7f45fac18673407efe49
  - https://github.com/thephpleague/commonmark/issues/337
  - https://github.com/thephpleague/commonmark/releases/tag/0.18.1
  source_url: https://snyk.io/vuln/SNYK-PHP-LEAGUECOMMONMARK-73652
