---
- id: snykio:packagist:baserproject/basercms:2018-05-18
  title: Access Restriction Bypass
  description: |
    [baserproject/basercms][1] is a Content management system based on
    CakePHP.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass via the mail form. An attacker could view a file which is
    uploaded by a site user.



    [1]: https://packagist.org/packages/baserproject/basercms
    \n[baserproject/basercms][1] is a Content management system based on
    CakePHP.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass via the mail form. An attacker could view a file which is
    uploaded by a site user.



    [1]: https://packagist.org/packages/baserproject/basercms
    \n[baserproject/basercms][1] is a Content management system based on
    CakePHP.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass via the mail form. An attacker could view a file which is
    uploaded by a site user.



    [1]: https://packagist.org/packages/baserproject/basercms
  affected_package: baserproject/basercms
  vulnerable_versions:
  - "<3.0.16 || >=4.0.0"
  - "<4.1.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-0575
  cwe:
  - CWE-284
  credit:
  - Unknown
  references:
  - https://basercms.net/security/JVN67881316
  source_url: https://snyk.io/vuln/SNYK-PHP-BASERPROJECTBASERCMS-72224
- id: snykio:packagist:baserproject/basercms:2018-05-18
  title: Access Restriction Bypass
  description: |
    [baserproject/basercms][1] is a Content management system based on
    CakePHP.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass. An attacker could view a file which is uploaded by a site user.



    [1]: https://packagist.org/packages/baserproject/basercms
    \n[baserproject/basercms][1] is a Content management system based on
    CakePHP.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass. An attacker could view a file which is uploaded by a site user.



    [1]: https://packagist.org/packages/baserproject/basercms
    \n[baserproject/basercms][1] is a Content management system based on
    CakePHP.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass. An attacker could view a file which is uploaded by a site user.



    [1]: https://packagist.org/packages/baserproject/basercms
  affected_package: baserproject/basercms
  vulnerable_versions:
  - "<3.0.16 || >=4.0.0"
  - "<4.1.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-0573
  cwe:
  - CWE-284
  credit:
  - Unknown
  references:
  - https://basercms.net/security/JVN67881316
  source_url: https://snyk.io/vuln/SNYK-PHP-BASERPROJECTBASERCMS-72223
- id: snykio:packagist:baserproject/basercms:2018-05-18
  title: Arbitrary File Upload
  description: |
    [baserproject/basercms][1] is a Content management system based on
    CakePHP.

    Affected versions of this package are vulnerable to Arbitrary File
    Upload. A remote attacker with a site operator privilege could upload
    arbitrary files.



    [1]: https://packagist.org/packages/baserproject/basercms
    \n[baserproject/basercms][1] is a Content management system based on
    CakePHP.

    Affected versions of this package are vulnerable to Arbitrary File
    Upload. A remote attacker with a site operator privilege could upload
    arbitrary files.



    [1]: https://packagist.org/packages/baserproject/basercms
    \n[baserproject/basercms][1] is a Content management system based on
    CakePHP.

    Affected versions of this package are vulnerable to Arbitrary File
    Upload. A remote attacker with a site operator privilege could upload
    arbitrary files.



    [1]: https://packagist.org/packages/baserproject/basercms
  affected_package: baserproject/basercms
  vulnerable_versions:
  - "<3.0.16 || >=4.0.0"
  - "<4.1.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-0571
  cwe:
  - CWE-285
  credit:
  - Unknown
  references:
  - https://basercms.net/security/JVN67881316
  source_url: https://snyk.io/vuln/SNYK-PHP-BASERPROJECTBASERCMS-72222
- id: snykio:packagist:baserproject/basercms:2018-05-18
  title: Cross-site Scripting (XSS)
  description: |+
    [baserproject/basercms][1] is a Content management system based on
    CakePHP.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks.



    [1]: https://packagist.org/packages/baserproject/basercms
    \n[baserproject/basercms][1] is a Content management system based on
    CakePHP.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks.



    [1]: https://packagist.org/packages/baserproject/basercms
    \n[baserproject/basercms][1] is a Content management system based on
    CakePHP.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks.



    [1]: https://packagist.org/packages/baserproject/basercms
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: baserproject/basercms
  vulnerable_versions:
  - "<3.0.16 || >=4.0.0"
  - "<4.1.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-0570
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://basercms.net/security/JVN67881316
  source_url: https://snyk.io/vuln/SNYK-PHP-BASERPROJECTBASERCMS-72220
- id: snykio:packagist:baserproject/basercms:2018-05-18
  title: Access Restriction Bypass
  description: |
    [baserproject/basercms][1] is a Content management system based on
    CakePHP.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass.



    [1]: https://packagist.org/packages/baserproject/basercms
    \n[baserproject/basercms][1] is a Content management system based on
    CakePHP.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass.



    [1]: https://packagist.org/packages/baserproject/basercms
    \n[baserproject/basercms][1] is a Content management system based on
    CakePHP.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass.



    [1]: https://packagist.org/packages/baserproject/basercms
  affected_package: baserproject/basercms
  vulnerable_versions:
  - "<3.0.16 || >=4.0.0"
  - "<4.1.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-0572
  cwe:
  - CWE-284
  credit:
  - Unknown
  references:
  - https://basercms.net/security/JVN67881316
  source_url: https://snyk.io/vuln/SNYK-PHP-BASERPROJECTBASERCMS-72219
- id: snykio:packagist:baserproject/basercms:2018-06-18
  title: Arbitrary Code Execution
  description: |
    [baserproject/basercms][1] is a Content management system based on
    CakePHP.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution.



    [1]: https://packagist.org/packages/baserproject/basercms
    \n[baserproject/basercms][1] is a Content management system based on
    CakePHP.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution.



    [1]: https://packagist.org/packages/baserproject/basercms
    \n[baserproject/basercms][1] is a Content management system based on
    CakePHP.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution.



    [1]: https://packagist.org/packages/baserproject/basercms
  affected_package: baserproject/basercms
  vulnerable_versions:
  - "<3.0.16 || >=4.0.0"
  - "<4.1.1"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2018-0569
  cwe:
  - CWE-94
  credit:
  - Unknown
  references:
  - https://basercms.net/security/JVN67881316
  source_url: https://snyk.io/vuln/SNYK-PHP-BASERPROJECTBASERCMS-72218
- id: snykio:packagist:baserproject/basercms:2018-05-18
  title: Cross-site Scripting (XSS)
  description: |+
    [baserproject/basercms][1] is a Content management system based on
    CakePHP.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks.



    [1]: https://packagist.org/packages/baserproject/basercms
    \n[baserproject/basercms][1] is a Content management system based on
    CakePHP.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks.



    [1]: https://packagist.org/packages/baserproject/basercms
    \n[baserproject/basercms][1] is a Content management system based on
    CakePHP.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks.



    [1]: https://packagist.org/packages/baserproject/basercms
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: baserproject/basercms
  vulnerable_versions:
  - "<3.0.16 || >=4.0.0"
  - "<4.1.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-0574
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://basercms.net/security/JVN67881316
  source_url: https://snyk.io/vuln/SNYK-PHP-BASERPROJECTBASERCMS-72217
