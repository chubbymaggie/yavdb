---
- id: friendsofphp:packagist:zendframework/zend-xmlrpc:2014-02-26
  title: 'Potential XXE/XEE attacks using PHP functions: simplexml_load_*, DOMDocument::loadXML,
    and xml_parse'
  affected_package: zendframework/zend-xmlrpc
  vulnerable_versions:
  - ">=2.1.0 <2.1.6"
  - ">=2.2.0 <2.2.6"
  package_manager: packagist
  credit:
  - FriendsOfPHP
  references:
  - https://framework.zend.com/security/advisory/ZF2014-01
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/stormpath/sdk/2017-11-20.yaml/blob/master/dompdf/dompdf/CVE-2014-5013.yaml/blob/master/dompdf/dompdf/CVE-2014-5011.yaml/blob/master/dompdf/dompdf/CVE-2014-2383.yaml/blob/master/dompdf/dompdf/CVE-2010-4879.yaml/blob/master/dompdf/dompdf/CVE-2014-5012.yaml/blob/master/phpunit/phpunit/CVE-2017-9841.yaml/blob/master/serluck/phpwhois/CVE-2015-5243.yaml/blob/master/sylius/sylius/2018-07-09.yaml/blob/master/sylius/admin-bundle/2018-07-09.yaml/blob/master/silverstripe/cms/SS-2015-005-1.yaml/blob/master/silverstripe/cms/SS-2015-003-1.yaml/blob/master/silverstripe/cms/SS-2015-008-1.yaml/blob/master/silverstripe/framework/SS-2015-014-1.yaml/blob/master/silverstripe/framework/SS-2015-027-1.yaml/blob/master/silverstripe/framework/SS-2015-015-1.yaml/blob/master/silverstripe/framework/SS-2016-003-1.yaml/blob/master/silverstripe/framework/SS-2015-026-1.yaml/blob/master/silverstripe/framework/SS-2015-009-1.yaml/blob/master/silverstripe/framework/SS-2015-012-1.yaml/blob/master/silverstripe/framework/SS-2015-013-1.yaml/blob/master/silverstripe/framework/SS-2015-010-1.yaml/blob/master/silverstripe/framework/SS-2015-016-1.yaml/blob/master/silverstripe/framework/SS-2015-004-1.yaml/blob/master/silverstripe/framework/SS-2015-006-1.yaml/blob/master/silverstripe/framework/SS-2015-011-1.yaml/blob/master/silverstripe/framework/SS-2015-028-1.yaml/blob/master/silverstripe/framework/SS-2014-015-1.yaml/blob/master/silverstripe/framework/SS-2015-007-1.yaml/blob/master/silverstripe/framework/SS-2014-017-1.yaml/blob/master/silverstripe/framework/SS-2016-002-1.yaml/blob/master/silverstripe/userforms/SS-2015-018-1.yaml/blob/master/silverstripe/forum/SS-2015-017-1.yaml/blob/master/amphp/artax/CVE-2016-5385.yaml/blob/master/amphp/artax/2017-05-09.yaml/blob/master/amphp/http/2018-03-15.yaml/blob/master/phpwhois/phpwhois/CVE-2015-5243.yaml/blob/master/socalnick/scn-social-auth/2015-01-15.yaml/blob/master/aws/aws-sdk-php/2015-08-31.yaml/blob/master/laravel/socialite/2015-08-03.yaml/blob/master/laravel/socialite/2015-07-23.yaml/blob/master/laravel/framework/CVE-2017-14775.yaml/blob/master/laravel/framework/2014-04-15.yaml/blob/master/laravel/framework/2014-05-20.yaml/blob/master/laravel/framework/CVE-2017-9303.yaml/blob/master/laravel/framework/2018-08-08-1.yaml/blob/master/laravel/framework/2018-03-30-1.yaml/blob/master/codeigniter/framework/2015-10-31-1.yaml/blob/master/codeigniter/framework/2016-07-26-1.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-18122.yaml/blob/master/simplesamlphp/simplesamlphp/201606-01.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2018-6520.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2016-3124.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12872.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2018-6521.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12868.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12870.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12873.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12871.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12869.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2016-9955.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12867.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-18121.yaml/blob/master/simplesamlphp/simplesamlphp/201710-01.yaml/blob/master/simplesamlphp/simplesamlphp-module-infocard/CVE-2017-12874.yaml/blob/master/simplesamlphp/saml2/CVE-2018-7711.yaml/blob/master/simplesamlphp/saml2/CVE-2018-6519.yaml/blob/master/simplesamlphp/saml2/CVE-2018-7644.yaml/blob/master/simplesamlphp/saml2/CVE-2016-9814.yaml/blob/master/shopware/shopware/2017-01-24.yaml/blob/master/shopware/shopware/2018-01-22.yaml/blob/master/shopware/shopware/2017-01-25.yaml/blob/master/shopware/shopware/CVE-2016-3109.yaml/blob/master/shopware/shopware/2017-06-22.yaml/blob/master/asymmetricrypt/asymmetricrypt/2017-11-20.yaml/blob/master/fuel/core/2018-04-14-1.yaml/blob/master/fuel/core/2016-06-29-1.yaml/blob/master/cartalyst/sentry/2016-09-05.yaml/blob/master/kazist/phpwhois/CVE-2015-5243.yaml/blob/master/simple-updates/phpwhois/CVE-2015-5243.yaml/blob/master/zf-commons/zfc-user/2015-01-08.yaml/blob/master/drupal/core/CVE-2018-7600.yaml/blob/master/drupal/core/CVE-2017-6929.yaml/blob/master/drupal/core/CVE-2016-7571.yaml/blob/master/drupal/core/CVE-2017-6923.yaml/blob/master/drupal/core/CVE-2016-9449.yaml/blob/master/drupal/core/CVE-2017-6925.yaml/blob/master/drupal/core/CVE-2017-6931.yaml/blob/master/drupal/core/CVE-2016-3164.yaml/blob/master/drupal/core/CVE-2016-3168.yaml/blob/master/drupal/core/CVE-2017-6932.yaml/blob/master/drupal/core/CVE-2017-6377.yaml/blob/master/drupal/core/CVE-2016-3163.yaml/blob/master/drupal/core/CVE-2016-6211.yaml/blob/master/drupal/core/CVE-2017-6379.yaml/blob/master/drupal/core/CVE-2017-6930.yaml/blob/master/drupal/core/2018-04-18.yaml/blob/master/drupal/core/CVE-2016-6212.yaml/blob/master/drupal/core/CVE-2017-6921.yaml/blob/master/drupal/core/CVE-2017-6926.yaml/blob/master/drupal/core/CVE-2016-3170.yaml/blob/master/drupal/core/CVE-2016-5385.yaml/blob/master/drupal/core/CVE-2017-6928.yaml/blob/master/drupal/core/CVE-2016-7572.yaml/blob/master/drupal/core/CVE-2017-6922.yaml/blob/master/drupal/core/CVE-2016-3169.yaml/blob/master/drupal/core/CVE-2016-3165.yaml/blob/master/drupal/core/CVE-2018-7602.yaml/blob/master/drupal/core/CVE-2016-7570.yaml/blob/master/drupal/core/CVE-2016-9450.yaml/blob/master/drupal/core/CVE-2016-3167.yaml/blob/master/drupal/core/CVE-2016-3171.yaml/blob/master/drupal/core/CVE-2017-6924.yaml/blob/master/drupal/core/CVE-2017-6919.yaml/blob/master/drupal/core/CVE-2016-3166.yaml/blob/master/drupal/core/CVE-2016-9452.yaml/blob/master/drupal/core/CVE-2017-6381.yaml/blob/master/drupal/core/CVE-2017-6920.yaml/blob/master/drupal/core/CVE-2016-3162.yaml/blob/master/drupal/core/CVE-2017-6927.yaml/blob/master/drupal/drupal/CVE-2018-7600.yaml/blob/master/drupal/drupal/CVE-2017-6929.yaml/blob/master/drupal/drupal/CVE-2016-7571.yaml/blob/master/drupal/drupal/CVE-2017-6923.yaml/blob/master/drupal/drupal/CVE-2016-9449.yaml/blob/master/drupal/drupal/CVE-2017-6925.yaml/blob/master/drupal/drupal/CVE-2017-6931.yaml/blob/master/drupal/drupal/CVE-2016-3164.yaml/blob/master/drupal/drupal/CVE-2016-3168.yaml/blob/master/drupal/drupal/CVE-2017-6932.yaml/blob/master/drupal/drupal/CVE-2017-6377.yaml/blob/master/drupal/drupal/CVE-2016-3163.yaml/blob/master/drupal/drupal/CVE-2016-6211.yaml/blob/master/drupal/drupal/CVE-2017-6379.yaml/blob/master/drupal/drupal/CVE-2017-6930.yaml/blob/master/drupal/drupal/2018-04-18.yaml/blob/master/drupal/drupal/CVE-2016-6212.yaml/blob/master/drupal/drupal/CVE-2017-6921.yaml/blob/master/drupal/drupal/CVE-2017-6926.yaml/blob/master/drupal/drupal/CVE-2016-3170.yaml/blob/master/drupal/drupal/CVE-2016-5385.yaml/blob/master/drupal/drupal/CVE-2017-6928.yaml/blob/master/drupal/drupal/CVE-2016-7572.yaml/blob/master/drupal/drupal/CVE-2017-6922.yaml/blob/master/drupal/drupal/CVE-2016-3169.yaml/blob/master/drupal/drupal/CVE-2016-3165.yaml/blob/master/drupal/drupal/CVE-2018-7602.yaml/blob/master/drupal/drupal/CVE-2016-7570.yaml/blob/master/drupal/drupal/CVE-2016-9450.yaml/blob/master/drupal/drupal/CVE-2016-3167.yaml/blob/master/drupal/drupal/CVE-2016-3171.yaml/blob/master/drupal/drupal/CVE-2017-6924.yaml/blob/master/drupal/drupal/CVE-2017-6919.yaml/blob/master/drupal/drupal/CVE-2016-3166.yaml/blob/master/drupal/drupal/CVE-2016-9452.yaml/blob/master/drupal/drupal/CVE-2017-6381.yaml/blob/master/drupal/drupal/CVE-2017-6920.yaml/blob/master/drupal/drupal/CVE-2016-3162.yaml/blob/master/drupal/drupal/CVE-2017-6927.yaml/blob/master/theonedemon/phpwhois/CVE-2015-5243.yaml/blob/master/joomla/session/2015-12-14.yaml/blob/master/monolog/monolog/2014-12-29-1.yaml/blob/master/sabre/dav/CVE-2013-1939.yaml/blob/master/sabre/dav/CVE-2014-2055.yaml/blob/master/firebase/php-jwt/2015-04-02.yaml/blob/master/3f/pygmentize/2017-05-15.yaml/blob/master/gregwar/rst/2016-10-31.yaml/blob/master/onelogin/php-saml/2017-02-28.yaml/blob/master/onelogin/php-saml/2016-10-04.yaml/blob/master/zendframework/zend-session/ZF2015-01.yaml/blob/master/zendframework/zend-crypt/2015-11-23.yaml/blob/master/zendframework/zend-validator/ZF2015-03.yaml/blob/master/zendframework/zendxml/ZF2015-06.yaml/blob/master/zendframework/zend-captcha/ZF2015-09.yaml/blob/master/zendframework/zendopenid/ZF2014-02.yaml/blob/master/zendframework/zend-form/ZF2014-03.yaml/blob/master/zendframework/zend-json/ZF2014-01.yaml/blob/master/zendframework/zendframework/ZF2014-03.yaml/blob/master/zendframework/zendframework/ZF2016-04.yaml/blob/master/zendframework/zendframework/ZF2015-02.yaml/blob/master/zendframework/zendframework/ZF2015-09.yaml/blob/master/zendframework/zendframework/ZF2012-04.yaml/blob/master/zendframework/zendframework/ZF2015-06.yaml/blob/master/zendframework/zendframework/ZF2014-05.yaml/blob/master/zendframework/zendframework/ZF2013-02.yaml/blob/master/zendframework/zendframework/ZF2012-03.yaml/blob/master/zendframework/zendframework/ZF2013-01.yaml/blob/master/zendframework/zendframework/ZF2013-04.yaml/blob/master/zendframework/zendframework/ZF2014-01.yaml/blob/master/zendframework/zendframework/ZF2015-04.yaml/blob/master/zendframework/zendframework/ZF2013-03.yaml/blob/master/zendframework/zendframework/ZF2014-06.yaml/blob/master/zendframework/zendframework/ZF2015-03.yaml/blob/master/zendframework/zendframework/ZF2015-10.yaml/blob/master/zendframework/zendframework/ZF2015-07.yaml/blob/master/zendframework/zendframework/ZF2018-01.yaml/blob/master/zendframework/zendframework/ZF2015-01.yaml/blob/master/zendframework/zend-http/ZF2015-04.yaml/blob/master/zendframework/zend-http/ZF2018-01.yaml/blob/master/zendframework/zend-xmlrpc/ZF2014-01.yaml
- id: ossindex:packagist:zendframework/zend-xmlrpc:2016-06-05
  title: '"Potential XXE/XEE attacks using PHP functions: simplexml_load_*, DOMDocument::loadXML,
    and xml_parse"'
  description: '"Potential XXE/XEE attacks using PHP functions: simplexml_load_*,
    DOMDocument::loadXML, and xml_parse"'
  affected_package: zendframework/zend-xmlrpc
  vulnerable_versions:
  - ">=2.1.0 <2.1.6"
  - ">=2.2.0 <2.2.6"
  package_manager: packagist
  credit:
  - OSSIndex
  references:
  - http://framework.zend.com/security/advisory/ZF2014-01
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/zendframework/zend-xmlrpc/ZF2014-01.yaml
  source_url: https://ossindex.net/resource/package/8397710750/vulnerabilities
- id: snykio:packagist:zendframework/zend-xmlrpc:2014-02-26
  title: XML External Entity (XXE) Injection
  description: |+
    Affected versions of [`zendframework/zend-xmlrpc`][1] are vulnerable to
    XML External Entity (XXE) Injection.



    [1]: https://packagist.org/packages/zendframework/zend-xmlrpc
    \nAffected versions of [`zendframework/zend-xmlrpc`][1] are vulnerable to
    XML External Entity (XXE) Injection.



    [1]: https://packagist.org/packages/zendframework/zend-xmlrpc
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: zendframework/zend-xmlrpc
  vulnerable_versions:
  - ">=2.1.0"
  - "<2.1.6 || >=2.2.0"
  - "<2.2.6"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-611
  credit:
  - Lukas Reschke
  references:
  - https://framework.zend.com/security/advisory/ZF2014-01
  source_url: https://snyk.io/vuln/SNYK-PHP-ZENDFRAMEWORKZENDXMLRPC-70318
