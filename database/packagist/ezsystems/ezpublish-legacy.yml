---
- id: friendsofphp:packagist:ezsystems/ezpublish-legacy:2017-08-21
  title: EZSA-2017-006 Information disclosure in backend content tree menu
  affected_package: ezsystems/ezpublish-legacy
  vulnerable_versions:
  - ">=2017.8.0 <2017.8.1.1"
  - ">=5.4.0 <5.4.10.1"
  - ">=5.3.0 <5.3.12.2"
  package_manager: packagist
  credit:
  - FriendsOfPHP
  references:
  - http://share.ez.no/community-project/security-advisories/ezsa-2017-006-information-disclosure-in-backend-content-tree-menu
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/amphp/artax/CVE-2016-5385.yaml/blob/master/amphp/artax/2017-05-09.yaml/blob/master/amphp/http/2018-03-15.yaml/blob/master/phpxmlrpc/extras/2017-10-29.yaml/blob/master/zfr/zfr-oauth2-server-module/2014-04-26.yaml/blob/master/kazist/phpwhois/CVE-2015-5243.yaml/blob/master/phpwhois/phpwhois/CVE-2015-5243.yaml/blob/master/phpunit/phpunit/CVE-2017-9841.yaml/blob/master/bugsnag/bugsnag-laravel/CVE-2016-5385.yaml/blob/master/paypal/merchant-sdk-php/CVE-2017-6099.yaml/blob/master/paragonie/random_compat/2016-03-16.yaml/blob/master/codeigniter/framework/2016-07-26-1.yaml/blob/master/codeigniter/framework/2015-10-31-1.yaml/blob/master/pagarme/pagarme-php/2017-11-20.yaml/blob/master/sylius/sylius/2018-07-09.yaml/blob/master/sylius/admin-bundle/2018-07-09.yaml/blob/master/illuminate/auth/CVE-2017-9303.yaml/blob/master/illuminate/auth/CVE-2017-14775.yaml/blob/master/illuminate/auth/2014-04-15.yaml/blob/master/illuminate/database/2014-05-20.yaml/blob/master/illuminate/encryption/2018-03-30-1.yaml/blob/master/illuminate/cookie/2018-08-08-1.yaml/blob/master/gree/jose/2016-08-30.yaml/blob/master/friendsofsymfony/rest-bundle/2014-01-22-1.yaml/blob/master/friendsofsymfony/user-bundle/2012-07-10-1.yaml/blob/master/friendsofsymfony/user-bundle/2014-09-04-1.yaml/blob/master/friendsofsymfony/user-bundle/2012-07-10-2.yaml/blob/master/friendsofsymfony/user-bundle/CVE-2013-5750.yaml/blob/master/jsmitty12/phpwhois/CVE-2015-5243.yaml/blob/master/thelia/thelia/2015-02-24-1.yaml/blob/master/thelia/thelia/2015-04-13-1.yaml/blob/master/thelia/backoffice-default-template/2015-02-24-1.yaml/blob/master/zetacomponents/mail/2017-11-15-1.yaml/blob/master/guzzlehttp/guzzle/CVE-2016-5385.yaml/blob/master/willdurand/js-translation-bundle/2014-07-29-1.yaml/blob/master/doctrine/dbal/2011-09-25.yaml/blob/master/doctrine/cache/2015-08-31.yaml/blob/master/doctrine/orm/2015-08-31.yaml/blob/master/doctrine/orm/2011-09-25.yaml/blob/master/doctrine/doctrine-module/2013-05-16.yaml/blob/master/doctrine/mongodb-odm-bundle/2015-08-31.yaml/blob/master/doctrine/annotations/2015-08-31.yaml/blob/master/doctrine/mongodb-odm/2015-08-31.yaml/blob/master/doctrine/common/2015-08-31.yaml/blob/master/doctrine/doctrine-bundle/2015-08-31.yaml/blob/master/socalnick/scn-social-auth/2015-01-15.yaml/blob/master/composer/composer/CVE-2015-8371.yaml/blob/master/magento/product-community-edition/2018-06-27.yaml/blob/master/magento/product-community-edition/2016-07-19.yaml/blob/master/magento/magento1ee/2017-02-07.yaml/blob/master/magento/magento1ce/2018-06-29.yaml/blob/master/magento/magento1ce/2017-02-07.yaml/blob/master/firebase/php-jwt/2015-04-02.yaml/blob/master/alterphp/easyadmin-extension-bundle/2018-10-02.yaml/blob/master/ezsystems/ezpublish-legacy/2017-09-11-1.yaml
- id: friendsofphp:packagist:ezsystems/ezpublish-legacy:2017-08-18
  title: EZSA-2017-005 XSS issue in search
  affected_package: ezsystems/ezpublish-legacy
  vulnerable_versions:
  - ">=5.4.0 <5.4.10"
  - ">=5.3.0 <5.3.12.1"
  package_manager: packagist
  cve:
  - CVE-2017-1000431
  credit:
  - FriendsOfPHP
  references:
  - http://share.ez.no/community-project/security-advisories/ezsa-2017-005-xss-issue-in-search
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/amphp/artax/CVE-2016-5385.yaml/blob/master/amphp/artax/2017-05-09.yaml/blob/master/amphp/http/2018-03-15.yaml/blob/master/phpxmlrpc/extras/2017-10-29.yaml/blob/master/zfr/zfr-oauth2-server-module/2014-04-26.yaml/blob/master/kazist/phpwhois/CVE-2015-5243.yaml/blob/master/phpwhois/phpwhois/CVE-2015-5243.yaml/blob/master/phpunit/phpunit/CVE-2017-9841.yaml/blob/master/bugsnag/bugsnag-laravel/CVE-2016-5385.yaml/blob/master/paypal/merchant-sdk-php/CVE-2017-6099.yaml/blob/master/paragonie/random_compat/2016-03-16.yaml/blob/master/codeigniter/framework/2016-07-26-1.yaml/blob/master/codeigniter/framework/2015-10-31-1.yaml/blob/master/pagarme/pagarme-php/2017-11-20.yaml/blob/master/sylius/sylius/2018-07-09.yaml/blob/master/sylius/admin-bundle/2018-07-09.yaml/blob/master/illuminate/auth/CVE-2017-9303.yaml/blob/master/illuminate/auth/CVE-2017-14775.yaml/blob/master/illuminate/auth/2014-04-15.yaml/blob/master/illuminate/database/2014-05-20.yaml/blob/master/illuminate/encryption/2018-03-30-1.yaml/blob/master/illuminate/cookie/2018-08-08-1.yaml/blob/master/gree/jose/2016-08-30.yaml/blob/master/friendsofsymfony/rest-bundle/2014-01-22-1.yaml/blob/master/friendsofsymfony/user-bundle/2012-07-10-1.yaml/blob/master/friendsofsymfony/user-bundle/2014-09-04-1.yaml/blob/master/friendsofsymfony/user-bundle/2012-07-10-2.yaml/blob/master/friendsofsymfony/user-bundle/CVE-2013-5750.yaml/blob/master/jsmitty12/phpwhois/CVE-2015-5243.yaml/blob/master/thelia/thelia/2015-02-24-1.yaml/blob/master/thelia/thelia/2015-04-13-1.yaml/blob/master/thelia/backoffice-default-template/2015-02-24-1.yaml/blob/master/zetacomponents/mail/2017-11-15-1.yaml/blob/master/guzzlehttp/guzzle/CVE-2016-5385.yaml/blob/master/willdurand/js-translation-bundle/2014-07-29-1.yaml/blob/master/doctrine/dbal/2011-09-25.yaml/blob/master/doctrine/cache/2015-08-31.yaml/blob/master/doctrine/orm/2015-08-31.yaml/blob/master/doctrine/orm/2011-09-25.yaml/blob/master/doctrine/doctrine-module/2013-05-16.yaml/blob/master/doctrine/mongodb-odm-bundle/2015-08-31.yaml/blob/master/doctrine/annotations/2015-08-31.yaml/blob/master/doctrine/mongodb-odm/2015-08-31.yaml/blob/master/doctrine/common/2015-08-31.yaml/blob/master/doctrine/doctrine-bundle/2015-08-31.yaml/blob/master/socalnick/scn-social-auth/2015-01-15.yaml/blob/master/composer/composer/CVE-2015-8371.yaml/blob/master/magento/product-community-edition/2018-06-27.yaml/blob/master/magento/product-community-edition/2016-07-19.yaml/blob/master/magento/magento1ee/2017-02-07.yaml/blob/master/magento/magento1ce/2018-06-29.yaml/blob/master/magento/magento1ce/2017-02-07.yaml/blob/master/firebase/php-jwt/2015-04-02.yaml/blob/master/alterphp/easyadmin-extension-bundle/2018-10-02.yaml/blob/master/ezsystems/ezpublish-legacy/2017-09-11-1.yaml/blob/master/ezsystems/ezpublish-legacy/2017-08-22-1.yaml
- id: friendsofphp:packagist:ezsystems/ezpublish-legacy:2018-02-06
  title: EZSA-2018-001 Several vulnerabilities in Forgot password, Information collector,
    XML text, and Matrix field type features
  affected_package: ezsystems/ezpublish-legacy
  vulnerable_versions:
  - ">=2017.12.0 <2017.12.2.1"
  - ">=5.4.0 <5.4.11.3"
  - ">=5.3.0 <5.3.12.3"
  package_manager: packagist
  credit:
  - FriendsOfPHP
  references:
  - http://share.ez.no/community-project/security-advisories/ezsa-2018-001-several-vulnerabilities-in-forgot-password-information-collector-xml-text-and-matrix-field-type-features
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/amphp/artax/CVE-2016-5385.yaml/blob/master/amphp/artax/2017-05-09.yaml/blob/master/amphp/http/2018-03-15.yaml/blob/master/phpxmlrpc/extras/2017-10-29.yaml/blob/master/zfr/zfr-oauth2-server-module/2014-04-26.yaml/blob/master/kazist/phpwhois/CVE-2015-5243.yaml/blob/master/phpwhois/phpwhois/CVE-2015-5243.yaml/blob/master/phpunit/phpunit/CVE-2017-9841.yaml/blob/master/bugsnag/bugsnag-laravel/CVE-2016-5385.yaml/blob/master/paypal/merchant-sdk-php/CVE-2017-6099.yaml/blob/master/paragonie/random_compat/2016-03-16.yaml/blob/master/codeigniter/framework/2016-07-26-1.yaml/blob/master/codeigniter/framework/2015-10-31-1.yaml/blob/master/pagarme/pagarme-php/2017-11-20.yaml/blob/master/sylius/sylius/2018-07-09.yaml/blob/master/sylius/admin-bundle/2018-07-09.yaml/blob/master/illuminate/auth/CVE-2017-9303.yaml/blob/master/illuminate/auth/CVE-2017-14775.yaml/blob/master/illuminate/auth/2014-04-15.yaml/blob/master/illuminate/database/2014-05-20.yaml/blob/master/illuminate/encryption/2018-03-30-1.yaml/blob/master/illuminate/cookie/2018-08-08-1.yaml/blob/master/gree/jose/2016-08-30.yaml/blob/master/friendsofsymfony/rest-bundle/2014-01-22-1.yaml/blob/master/friendsofsymfony/user-bundle/2012-07-10-1.yaml/blob/master/friendsofsymfony/user-bundle/2014-09-04-1.yaml/blob/master/friendsofsymfony/user-bundle/2012-07-10-2.yaml/blob/master/friendsofsymfony/user-bundle/CVE-2013-5750.yaml/blob/master/jsmitty12/phpwhois/CVE-2015-5243.yaml/blob/master/thelia/thelia/2015-02-24-1.yaml/blob/master/thelia/thelia/2015-04-13-1.yaml/blob/master/thelia/backoffice-default-template/2015-02-24-1.yaml/blob/master/zetacomponents/mail/2017-11-15-1.yaml/blob/master/guzzlehttp/guzzle/CVE-2016-5385.yaml/blob/master/willdurand/js-translation-bundle/2014-07-29-1.yaml/blob/master/doctrine/dbal/2011-09-25.yaml/blob/master/doctrine/cache/2015-08-31.yaml/blob/master/doctrine/orm/2015-08-31.yaml/blob/master/doctrine/orm/2011-09-25.yaml/blob/master/doctrine/doctrine-module/2013-05-16.yaml/blob/master/doctrine/mongodb-odm-bundle/2015-08-31.yaml/blob/master/doctrine/annotations/2015-08-31.yaml/blob/master/doctrine/mongodb-odm/2015-08-31.yaml/blob/master/doctrine/common/2015-08-31.yaml/blob/master/doctrine/doctrine-bundle/2015-08-31.yaml/blob/master/socalnick/scn-social-auth/2015-01-15.yaml/blob/master/composer/composer/CVE-2015-8371.yaml/blob/master/magento/product-community-edition/2018-06-27.yaml/blob/master/magento/product-community-edition/2016-07-19.yaml/blob/master/magento/magento1ee/2017-02-07.yaml/blob/master/magento/magento1ce/2018-06-29.yaml/blob/master/magento/magento1ce/2017-02-07.yaml/blob/master/firebase/php-jwt/2015-04-02.yaml/blob/master/alterphp/easyadmin-extension-bundle/2018-10-02.yaml/blob/master/ezsystems/ezpublish-legacy/2017-09-11-1.yaml/blob/master/ezsystems/ezpublish-legacy/2017-08-22-1.yaml/blob/master/ezsystems/ezpublish-legacy/2018-02-26-1.yaml
- id: snykio:packagist:ezsystems/ezpublish-legacy:2016-02-24
  title: Cross-Site Scripting (XSS)
  description: |+
    [ezsystems/ezpublish-legacy][1] is a PHP application framework with
    advanced CMS (content management system) functionality.

    Affected versions of this project are vulnerable to Cross-Site Scripting
    (XSS) attacks via the search module.



    [1]: https://packagist.org/packages/ezsystems/ezpublish-legacy
    \n[ezsystems/ezpublish-legacy][1] is a PHP application framework with
    advanced CMS (content management system) functionality.

    Affected versions of this project are vulnerable to Cross-Site Scripting
    (XSS) attacks via the search module.



    [1]: https://packagist.org/packages/ezsystems/ezpublish-legacy
    \n[ezsystems/ezpublish-legacy][1] is a PHP application framework with
    advanced CMS (content management system) functionality.

    Affected versions of this project are vulnerable to Cross-Site Scripting
    (XSS) attacks via the search module.



    [1]: https://packagist.org/packages/ezsystems/ezpublish-legacy
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: ezsystems/ezpublish-legacy
  vulnerable_versions:
  - "<2017.08.0"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2017-1000431
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - http://share.ez.no/community-project/security-advisories/ezsa-2017-005-xss-issue-in-search
  - https://github.com/ezsystems/ezpublish-legacy/commit/c7174295fa0b9bd81bd4af908082464b0b80f278
  source_url: https://snyk.io/vuln/SNYK-PHP-EZSYSTEMSEZPUBLISHLEGACY-72008
- id: snykio:packagist:ezsystems/ezpublish-legacy:2017-08-21
  title: Information Exposure
  description: |
    Affected versions of [`ezsystems/ezpublish-legacy`][1] are vulnerable to
    Information Exposure in the backend content tree menu. If a view has
    been disabled in `site.ini` Rules, and an attacker accesses the backend
    with the URL to this module, then the tree menu may be displayed. Since
    the tree menu may contain hidden items, this may lead to information
    disclosure



    [1]: https://packagist.org/packages/ezsystems/ezpublish-legacy
    \nAffected versions of [`ezsystems/ezpublish-legacy`][1] are vulnerable to
    Information Exposure in the backend content tree menu. If a view has
    been disabled in `site.ini` Rules, and an attacker accesses the backend
    with the URL to this module, then the tree menu may be displayed. Since
    the tree menu may contain hidden items, this may lead to information
    disclosure



    [1]: https://packagist.org/packages/ezsystems/ezpublish-legacy
  affected_package: ezsystems/ezpublish-legacy
  vulnerable_versions:
  - ">=2017.8.0 &&  <2017.8.1.1 || >=5.4.0 &&  <5.4.10.1 || >=5.3.0 &&  <5.3.12.2"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-200
  credit:
  - Unknown
  references:
  - http://share.ez.no/community-project/security-advisories/ezsa-2017-006-information-disclosure-in-backend-content-tree-menu
  - https://github.com/ezsystems/ezpublish-legacy/commit/a4a0470f8d80f012fe14e4f8ab11c7d14375986c
  source_url: https://snyk.io/vuln/SNYK-PHP-EZSYSTEMSEZPUBLISHLEGACY-70096
- id: snykio:packagist:ezsystems/ezpublish-legacy:2017-08-18
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`ezsystems/ezpublish-legacy`][1] are vulnerable to
    Cross-site Scripting (XSS).



    [1]: https://packagist.org/packages/ezsystems/ezpublish-legacy
    \nAffected versions of [`ezsystems/ezpublish-legacy`][1] are vulnerable to
    Cross-site Scripting (XSS).



    [1]: https://packagist.org/packages/ezsystems/ezpublish-legacy
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: ezsystems/ezpublish-legacy
  vulnerable_versions:
  - ">=5.4.0 &&  <5.4.10 || >=5.3.0 &&  <5.3.12.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - http://share.ez.no/community-project/security-advisories/ezsa-2017-005-xss-issue-in-search
  source_url: https://snyk.io/vuln/SNYK-PHP-EZSYSTEMSEZPUBLISHLEGACY-70095
