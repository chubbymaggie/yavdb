---
- id: friendsofphp:packagist:typo3/flow:2015-11-23
  title: Arbitrary file upload and XML External Entity processing
  affected_package: typo3/flow
  vulnerable_versions:
  - ">=2.3.0 <2.3.7"
  - ">=3.0.0 <3.0.1"
  package_manager: packagist
  credit:
  - FriendsOfPHP
  references:
  - https://www.neos.io/news/flow-sa-2015-001.html
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/swiftmailer/swiftmailer/CVE-2016-10074.yaml/blob/master/swiftmailer/swiftmailer/2014-06-13.yaml/blob/master/ezsystems/ezpublish-legacy/2018-02-26-1.yaml/blob/master/ezsystems/ezpublish-legacy/2017-08-22-1.yaml/blob/master/ezsystems/ezpublish-legacy/2017-09-11-1.yaml/blob/master/monolog/monolog/2014-12-29-1.yaml/blob/master/illuminate/auth/CVE-2017-9303.yaml/blob/master/illuminate/auth/2014-04-15.yaml/blob/master/illuminate/auth/CVE-2017-14775.yaml/blob/master/illuminate/encryption/2018-03-30-1.yaml/blob/master/illuminate/database/2014-05-20.yaml/blob/master/illuminate/cookie/2018-08-08-1.yaml/blob/master/propel/propel/2018-02-14.yaml/blob/master/propel/propel1/2018-02-14.yaml/blob/master/alterphp/easyadmin-extension-bundle/2018-10-02.yaml/blob/master/yiisoft/yii2-jui/CVE-2015-3397.yaml/blob/master/yiisoft/yii2-elasticsearch/CVE-2018-8074.yaml/blob/master/yiisoft/yii2-gii/CVE-2015-3397.yaml/blob/master/yiisoft/yii2/CVE-2015-5467.yaml/blob/master/yiisoft/yii2/CVE-2015-3397.yaml/blob/master/yiisoft/yii2/CVE-2018-6009.yaml/blob/master/yiisoft/yii2/CVE-2018-7269.yaml/blob/master/yiisoft/yii2/CVE-2018-6010.yaml/blob/master/yiisoft/yii2-dev/CVE-2015-5467.yaml/blob/master/yiisoft/yii2-dev/CVE-2015-3397.yaml/blob/master/yiisoft/yii2-dev/CVE-2018-6009.yaml/blob/master/yiisoft/yii2-dev/CVE-2018-7269.yaml/blob/master/yiisoft/yii2-dev/CVE-2018-6010.yaml/blob/master/yiisoft/yii2-redis/CVE-2018-8073.yaml/blob/master/yiisoft/yii2-bootstrap/CVE-2015-3397.yaml/blob/master/yiisoft/yii/CVE-2014-4672.yaml/blob/master/james-heinrich/getid3/CVE-2014-2053.yaml/blob/master/erusev/parsedown/2017-05-01.yaml/blob/master/squizlabs/php_codesniffer/2017-03-01.yaml/blob/master/squizlabs/php_codesniffer/2017-05-18.yaml/blob/master/pagarme/pagarme-php/2017-11-20.yaml/blob/master/gree/jose/2016-08-30.yaml/blob/master/typo3/cms-core/2018-07-12-3.yaml/blob/master/typo3/cms-core/2018-07-12-1.yaml/blob/master/typo3/cms-core/2018-07-12-4.yaml/blob/master/typo3/cms-core/2018-07-12-2.yaml/blob/master/typo3/cms/2017-09-05-3.yaml/blob/master/typo3/cms/2017-09-05-4.yaml/blob/master/typo3/cms/2017-09-05-2.yaml/blob/master/typo3/cms/2016-07-19-5.yaml/blob/master/typo3/cms/2016-07-19-3.yaml/blob/master/typo3/cms/2016-09-14-1.yaml/blob/master/typo3/cms/CVE-2015-5956.yaml/blob/master/typo3/cms/2016-05-24-1.yaml/blob/master/typo3/cms/2015-09-08-1.yaml/blob/master/typo3/cms/CVE-2014-3946.yaml/blob/master/typo3/cms/2015-07-01-2.yaml/blob/master/typo3/cms/2016-02-23-1.yaml/blob/master/typo3/cms/2016-04-12-2.yaml/blob/master/typo3/cms/2017-02-28-2.yaml/blob/master/typo3/cms/2015-07-01-3.yaml/blob/master/typo3/cms/CVE-2014-3943.yaml/blob/master/typo3/cms/2014-10-22-2.yaml/blob/master/typo3/cms/CVE-2014-3944.yaml/blob/master/typo3/cms/2018-07-12-3.yaml/blob/master/typo3/cms/2016-02-16-3.yaml/blob/master/typo3/cms/2016-11-22-1.yaml/blob/master/typo3/cms/2014-05-22-1.yaml/blob/master/typo3/cms/2017-02-28-1.yaml/blob/master/typo3/cms/2015-12-15-3.yaml/blob/master/typo3/cms/2015-12-15-4.yaml/blob/master/typo3/cms/2016-04-12-3.yaml/blob/master/typo3/cms/2016-02-16-4.yaml/blob/master/typo3/cms/2016-11-22-2.yaml/blob/master/typo3/cms/CVE-2014-3941.yaml/blob/master/typo3/cms/2015-07-01-6.yaml/blob/master/typo3/cms/2014-12-09-1.yaml/blob/master/typo3/cms/2016-02-23-2.yaml/blob/master/typo3/cms/2016-02-23-4.yaml/blob/master/typo3/cms/2017-01-03-1.yaml/blob/master/typo3/cms/2015-12-15-5.yaml/blob/master/typo3/cms/2016-02-16-2.yaml/blob/master/typo3/cms/2016-02-16-1.yaml/blob/master/typo3/cms/2015-07-01-4.yaml/blob/master/typo3/cms/2018-07-12-1.yaml/blob/master/typo3/cms/2016-07-19-1.yaml/blob/master/typo3/cms/2015-12-15-2.yaml/blob/master/typo3/cms/2018-07-12-4.yaml/blob/master/typo3/cms/2016-02-23-3.yaml/blob/master/typo3/cms/2016-07-19-6.yaml/blob/master/typo3/cms/2014-10-22-1.yaml/blob/master/typo3/cms/2015-07-01-1.yaml/blob/master/typo3/cms/2017-09-05-1.yaml/blob/master/typo3/cms/2016-07-19-7.yaml/blob/master/typo3/cms/2016-07-19-2.yaml/blob/master/typo3/cms/2016-04-12-4.yaml/blob/master/typo3/cms/2018-07-12-2.yaml/blob/master/typo3/cms/2015-07-01-5.yaml/blob/master/typo3/cms/2015-12-15-1.yaml/blob/master/typo3/cms/2014-12-09-2.yaml/blob/master/typo3/cms/2016-07-19-4.yaml/blob/master/typo3/cms/2016-09-14-2.yaml/blob/master/typo3/cms/2016-04-12-1.yaml/blob/master/typo3/neos/2015-03-28.yaml/blob/master/typo3/neos/2015-11-23.yaml/blob/master/typo3/flow/2015-11-23.yaml
- id: friendsofphp:packagist:typo3/flow:2013-12-10
  title: Cross-Site Scripting in TYPO3 Flow
  affected_package: typo3/flow
  vulnerable_versions:
  - ">=1.1.0 <1.1.1"
  - ">=2.0.0 <2.0.1"
  package_manager: packagist
  cve:
  - CVE-2013-7082
  credit:
  - FriendsOfPHP
  references:
  - https://www.neos.io/news/flow-sa-2013-001.html
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/swiftmailer/swiftmailer/CVE-2016-10074.yaml/blob/master/swiftmailer/swiftmailer/2014-06-13.yaml/blob/master/ezsystems/ezpublish-legacy/2018-02-26-1.yaml/blob/master/ezsystems/ezpublish-legacy/2017-08-22-1.yaml/blob/master/ezsystems/ezpublish-legacy/2017-09-11-1.yaml/blob/master/monolog/monolog/2014-12-29-1.yaml/blob/master/illuminate/auth/CVE-2017-9303.yaml/blob/master/illuminate/auth/2014-04-15.yaml/blob/master/illuminate/auth/CVE-2017-14775.yaml/blob/master/illuminate/encryption/2018-03-30-1.yaml/blob/master/illuminate/database/2014-05-20.yaml/blob/master/illuminate/cookie/2018-08-08-1.yaml/blob/master/propel/propel/2018-02-14.yaml/blob/master/propel/propel1/2018-02-14.yaml/blob/master/alterphp/easyadmin-extension-bundle/2018-10-02.yaml/blob/master/yiisoft/yii2-jui/CVE-2015-3397.yaml/blob/master/yiisoft/yii2-elasticsearch/CVE-2018-8074.yaml/blob/master/yiisoft/yii2-gii/CVE-2015-3397.yaml/blob/master/yiisoft/yii2/CVE-2015-5467.yaml/blob/master/yiisoft/yii2/CVE-2015-3397.yaml/blob/master/yiisoft/yii2/CVE-2018-6009.yaml/blob/master/yiisoft/yii2/CVE-2018-7269.yaml/blob/master/yiisoft/yii2/CVE-2018-6010.yaml/blob/master/yiisoft/yii2-dev/CVE-2015-5467.yaml/blob/master/yiisoft/yii2-dev/CVE-2015-3397.yaml/blob/master/yiisoft/yii2-dev/CVE-2018-6009.yaml/blob/master/yiisoft/yii2-dev/CVE-2018-7269.yaml/blob/master/yiisoft/yii2-dev/CVE-2018-6010.yaml/blob/master/yiisoft/yii2-redis/CVE-2018-8073.yaml/blob/master/yiisoft/yii2-bootstrap/CVE-2015-3397.yaml/blob/master/yiisoft/yii/CVE-2014-4672.yaml/blob/master/james-heinrich/getid3/CVE-2014-2053.yaml/blob/master/erusev/parsedown/2017-05-01.yaml/blob/master/squizlabs/php_codesniffer/2017-03-01.yaml/blob/master/squizlabs/php_codesniffer/2017-05-18.yaml/blob/master/pagarme/pagarme-php/2017-11-20.yaml/blob/master/gree/jose/2016-08-30.yaml/blob/master/typo3/cms-core/2018-07-12-3.yaml/blob/master/typo3/cms-core/2018-07-12-1.yaml/blob/master/typo3/cms-core/2018-07-12-4.yaml/blob/master/typo3/cms-core/2018-07-12-2.yaml/blob/master/typo3/cms/2017-09-05-3.yaml/blob/master/typo3/cms/2017-09-05-4.yaml/blob/master/typo3/cms/2017-09-05-2.yaml/blob/master/typo3/cms/2016-07-19-5.yaml/blob/master/typo3/cms/2016-07-19-3.yaml/blob/master/typo3/cms/2016-09-14-1.yaml/blob/master/typo3/cms/CVE-2015-5956.yaml/blob/master/typo3/cms/2016-05-24-1.yaml/blob/master/typo3/cms/2015-09-08-1.yaml/blob/master/typo3/cms/CVE-2014-3946.yaml/blob/master/typo3/cms/2015-07-01-2.yaml/blob/master/typo3/cms/2016-02-23-1.yaml/blob/master/typo3/cms/2016-04-12-2.yaml/blob/master/typo3/cms/2017-02-28-2.yaml/blob/master/typo3/cms/2015-07-01-3.yaml/blob/master/typo3/cms/CVE-2014-3943.yaml/blob/master/typo3/cms/2014-10-22-2.yaml/blob/master/typo3/cms/CVE-2014-3944.yaml/blob/master/typo3/cms/2018-07-12-3.yaml/blob/master/typo3/cms/2016-02-16-3.yaml/blob/master/typo3/cms/2016-11-22-1.yaml/blob/master/typo3/cms/2014-05-22-1.yaml/blob/master/typo3/cms/2017-02-28-1.yaml/blob/master/typo3/cms/2015-12-15-3.yaml/blob/master/typo3/cms/2015-12-15-4.yaml/blob/master/typo3/cms/2016-04-12-3.yaml/blob/master/typo3/cms/2016-02-16-4.yaml/blob/master/typo3/cms/2016-11-22-2.yaml/blob/master/typo3/cms/CVE-2014-3941.yaml/blob/master/typo3/cms/2015-07-01-6.yaml/blob/master/typo3/cms/2014-12-09-1.yaml/blob/master/typo3/cms/2016-02-23-2.yaml/blob/master/typo3/cms/2016-02-23-4.yaml/blob/master/typo3/cms/2017-01-03-1.yaml/blob/master/typo3/cms/2015-12-15-5.yaml/blob/master/typo3/cms/2016-02-16-2.yaml/blob/master/typo3/cms/2016-02-16-1.yaml/blob/master/typo3/cms/2015-07-01-4.yaml/blob/master/typo3/cms/2018-07-12-1.yaml/blob/master/typo3/cms/2016-07-19-1.yaml/blob/master/typo3/cms/2015-12-15-2.yaml/blob/master/typo3/cms/2018-07-12-4.yaml/blob/master/typo3/cms/2016-02-23-3.yaml/blob/master/typo3/cms/2016-07-19-6.yaml/blob/master/typo3/cms/2014-10-22-1.yaml/blob/master/typo3/cms/2015-07-01-1.yaml/blob/master/typo3/cms/2017-09-05-1.yaml/blob/master/typo3/cms/2016-07-19-7.yaml/blob/master/typo3/cms/2016-07-19-2.yaml/blob/master/typo3/cms/2016-04-12-4.yaml/blob/master/typo3/cms/2018-07-12-2.yaml/blob/master/typo3/cms/2015-07-01-5.yaml/blob/master/typo3/cms/2015-12-15-1.yaml/blob/master/typo3/cms/2014-12-09-2.yaml/blob/master/typo3/cms/2016-07-19-4.yaml/blob/master/typo3/cms/2016-09-14-2.yaml/blob/master/typo3/cms/2016-04-12-1.yaml/blob/master/typo3/neos/2015-03-28.yaml/blob/master/typo3/neos/2015-11-23.yaml/blob/master/typo3/flow/2015-11-23.yaml/blob/master/typo3/flow/CVE-2013-7082.yaml
- id: friendsofphp:packagist:typo3/flow:2012-03-28
  title: Insecure Unserialize Vulnerability in FLOW3
  affected_package: typo3/flow
  vulnerable_versions:
  - ">=1.0.0 <1.0.4"
  package_manager: packagist
  credit:
  - FriendsOfPHP
  references:
  - https://www.neos.io/news/flow-sa-2012-001.html
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/swiftmailer/swiftmailer/CVE-2016-10074.yaml/blob/master/swiftmailer/swiftmailer/2014-06-13.yaml/blob/master/ezsystems/ezpublish-legacy/2018-02-26-1.yaml/blob/master/ezsystems/ezpublish-legacy/2017-08-22-1.yaml/blob/master/ezsystems/ezpublish-legacy/2017-09-11-1.yaml/blob/master/monolog/monolog/2014-12-29-1.yaml/blob/master/illuminate/auth/CVE-2017-9303.yaml/blob/master/illuminate/auth/2014-04-15.yaml/blob/master/illuminate/auth/CVE-2017-14775.yaml/blob/master/illuminate/encryption/2018-03-30-1.yaml/blob/master/illuminate/database/2014-05-20.yaml/blob/master/illuminate/cookie/2018-08-08-1.yaml/blob/master/propel/propel/2018-02-14.yaml/blob/master/propel/propel1/2018-02-14.yaml/blob/master/alterphp/easyadmin-extension-bundle/2018-10-02.yaml/blob/master/yiisoft/yii2-jui/CVE-2015-3397.yaml/blob/master/yiisoft/yii2-elasticsearch/CVE-2018-8074.yaml/blob/master/yiisoft/yii2-gii/CVE-2015-3397.yaml/blob/master/yiisoft/yii2/CVE-2015-5467.yaml/blob/master/yiisoft/yii2/CVE-2015-3397.yaml/blob/master/yiisoft/yii2/CVE-2018-6009.yaml/blob/master/yiisoft/yii2/CVE-2018-7269.yaml/blob/master/yiisoft/yii2/CVE-2018-6010.yaml/blob/master/yiisoft/yii2-dev/CVE-2015-5467.yaml/blob/master/yiisoft/yii2-dev/CVE-2015-3397.yaml/blob/master/yiisoft/yii2-dev/CVE-2018-6009.yaml/blob/master/yiisoft/yii2-dev/CVE-2018-7269.yaml/blob/master/yiisoft/yii2-dev/CVE-2018-6010.yaml/blob/master/yiisoft/yii2-redis/CVE-2018-8073.yaml/blob/master/yiisoft/yii2-bootstrap/CVE-2015-3397.yaml/blob/master/yiisoft/yii/CVE-2014-4672.yaml/blob/master/james-heinrich/getid3/CVE-2014-2053.yaml/blob/master/erusev/parsedown/2017-05-01.yaml/blob/master/squizlabs/php_codesniffer/2017-03-01.yaml/blob/master/squizlabs/php_codesniffer/2017-05-18.yaml/blob/master/pagarme/pagarme-php/2017-11-20.yaml/blob/master/gree/jose/2016-08-30.yaml/blob/master/typo3/cms-core/2018-07-12-3.yaml/blob/master/typo3/cms-core/2018-07-12-1.yaml/blob/master/typo3/cms-core/2018-07-12-4.yaml/blob/master/typo3/cms-core/2018-07-12-2.yaml/blob/master/typo3/cms/2017-09-05-3.yaml/blob/master/typo3/cms/2017-09-05-4.yaml/blob/master/typo3/cms/2017-09-05-2.yaml/blob/master/typo3/cms/2016-07-19-5.yaml/blob/master/typo3/cms/2016-07-19-3.yaml/blob/master/typo3/cms/2016-09-14-1.yaml/blob/master/typo3/cms/CVE-2015-5956.yaml/blob/master/typo3/cms/2016-05-24-1.yaml/blob/master/typo3/cms/2015-09-08-1.yaml/blob/master/typo3/cms/CVE-2014-3946.yaml/blob/master/typo3/cms/2015-07-01-2.yaml/blob/master/typo3/cms/2016-02-23-1.yaml/blob/master/typo3/cms/2016-04-12-2.yaml/blob/master/typo3/cms/2017-02-28-2.yaml/blob/master/typo3/cms/2015-07-01-3.yaml/blob/master/typo3/cms/CVE-2014-3943.yaml/blob/master/typo3/cms/2014-10-22-2.yaml/blob/master/typo3/cms/CVE-2014-3944.yaml/blob/master/typo3/cms/2018-07-12-3.yaml/blob/master/typo3/cms/2016-02-16-3.yaml/blob/master/typo3/cms/2016-11-22-1.yaml/blob/master/typo3/cms/2014-05-22-1.yaml/blob/master/typo3/cms/2017-02-28-1.yaml/blob/master/typo3/cms/2015-12-15-3.yaml/blob/master/typo3/cms/2015-12-15-4.yaml/blob/master/typo3/cms/2016-04-12-3.yaml/blob/master/typo3/cms/2016-02-16-4.yaml/blob/master/typo3/cms/2016-11-22-2.yaml/blob/master/typo3/cms/CVE-2014-3941.yaml/blob/master/typo3/cms/2015-07-01-6.yaml/blob/master/typo3/cms/2014-12-09-1.yaml/blob/master/typo3/cms/2016-02-23-2.yaml/blob/master/typo3/cms/2016-02-23-4.yaml/blob/master/typo3/cms/2017-01-03-1.yaml/blob/master/typo3/cms/2015-12-15-5.yaml/blob/master/typo3/cms/2016-02-16-2.yaml/blob/master/typo3/cms/2016-02-16-1.yaml/blob/master/typo3/cms/2015-07-01-4.yaml/blob/master/typo3/cms/2018-07-12-1.yaml/blob/master/typo3/cms/2016-07-19-1.yaml/blob/master/typo3/cms/2015-12-15-2.yaml/blob/master/typo3/cms/2018-07-12-4.yaml/blob/master/typo3/cms/2016-02-23-3.yaml/blob/master/typo3/cms/2016-07-19-6.yaml/blob/master/typo3/cms/2014-10-22-1.yaml/blob/master/typo3/cms/2015-07-01-1.yaml/blob/master/typo3/cms/2017-09-05-1.yaml/blob/master/typo3/cms/2016-07-19-7.yaml/blob/master/typo3/cms/2016-07-19-2.yaml/blob/master/typo3/cms/2016-04-12-4.yaml/blob/master/typo3/cms/2018-07-12-2.yaml/blob/master/typo3/cms/2015-07-01-5.yaml/blob/master/typo3/cms/2015-12-15-1.yaml/blob/master/typo3/cms/2014-12-09-2.yaml/blob/master/typo3/cms/2016-07-19-4.yaml/blob/master/typo3/cms/2016-09-14-2.yaml/blob/master/typo3/cms/2016-04-12-1.yaml/blob/master/typo3/neos/2015-03-28.yaml/blob/master/typo3/neos/2015-11-23.yaml/blob/master/typo3/flow/2015-11-23.yaml/blob/master/typo3/flow/CVE-2013-7082.yaml/blob/master/typo3/flow/2012-03-28.yaml
- id: friendsofphp:packagist:typo3/flow:2016-11-01
  title: Time-Based Information Disclosure Vulnerability in Flow
  affected_package: typo3/flow
  vulnerable_versions:
  - ">=2.3.0 <2.3.16"
  - ">=3.0.0 <3.0.10"
  - ">=3.1.0 <3.1.7"
  - ">=3.2.0 <3.2.7"
  - ">=3.3.0 <3.3.5"
  package_manager: packagist
  credit:
  - FriendsOfPHP
  references:
  - https://www.neos.io/blog/flow-sa-2016-001.html
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/swiftmailer/swiftmailer/CVE-2016-10074.yaml/blob/master/swiftmailer/swiftmailer/2014-06-13.yaml/blob/master/ezsystems/ezpublish-legacy/2018-02-26-1.yaml/blob/master/ezsystems/ezpublish-legacy/2017-08-22-1.yaml/blob/master/ezsystems/ezpublish-legacy/2017-09-11-1.yaml/blob/master/monolog/monolog/2014-12-29-1.yaml/blob/master/illuminate/auth/CVE-2017-9303.yaml/blob/master/illuminate/auth/2014-04-15.yaml/blob/master/illuminate/auth/CVE-2017-14775.yaml/blob/master/illuminate/encryption/2018-03-30-1.yaml/blob/master/illuminate/database/2014-05-20.yaml/blob/master/illuminate/cookie/2018-08-08-1.yaml/blob/master/propel/propel/2018-02-14.yaml/blob/master/propel/propel1/2018-02-14.yaml/blob/master/alterphp/easyadmin-extension-bundle/2018-10-02.yaml/blob/master/yiisoft/yii2-jui/CVE-2015-3397.yaml/blob/master/yiisoft/yii2-elasticsearch/CVE-2018-8074.yaml/blob/master/yiisoft/yii2-gii/CVE-2015-3397.yaml/blob/master/yiisoft/yii2/CVE-2015-5467.yaml/blob/master/yiisoft/yii2/CVE-2015-3397.yaml/blob/master/yiisoft/yii2/CVE-2018-6009.yaml/blob/master/yiisoft/yii2/CVE-2018-7269.yaml/blob/master/yiisoft/yii2/CVE-2018-6010.yaml/blob/master/yiisoft/yii2-dev/CVE-2015-5467.yaml/blob/master/yiisoft/yii2-dev/CVE-2015-3397.yaml/blob/master/yiisoft/yii2-dev/CVE-2018-6009.yaml/blob/master/yiisoft/yii2-dev/CVE-2018-7269.yaml/blob/master/yiisoft/yii2-dev/CVE-2018-6010.yaml/blob/master/yiisoft/yii2-redis/CVE-2018-8073.yaml/blob/master/yiisoft/yii2-bootstrap/CVE-2015-3397.yaml/blob/master/yiisoft/yii/CVE-2014-4672.yaml/blob/master/james-heinrich/getid3/CVE-2014-2053.yaml/blob/master/erusev/parsedown/2017-05-01.yaml/blob/master/squizlabs/php_codesniffer/2017-03-01.yaml/blob/master/squizlabs/php_codesniffer/2017-05-18.yaml/blob/master/pagarme/pagarme-php/2017-11-20.yaml/blob/master/gree/jose/2016-08-30.yaml/blob/master/typo3/cms-core/2018-07-12-3.yaml/blob/master/typo3/cms-core/2018-07-12-1.yaml/blob/master/typo3/cms-core/2018-07-12-4.yaml/blob/master/typo3/cms-core/2018-07-12-2.yaml/blob/master/typo3/cms/2017-09-05-3.yaml/blob/master/typo3/cms/2017-09-05-4.yaml/blob/master/typo3/cms/2017-09-05-2.yaml/blob/master/typo3/cms/2016-07-19-5.yaml/blob/master/typo3/cms/2016-07-19-3.yaml/blob/master/typo3/cms/2016-09-14-1.yaml/blob/master/typo3/cms/CVE-2015-5956.yaml/blob/master/typo3/cms/2016-05-24-1.yaml/blob/master/typo3/cms/2015-09-08-1.yaml/blob/master/typo3/cms/CVE-2014-3946.yaml/blob/master/typo3/cms/2015-07-01-2.yaml/blob/master/typo3/cms/2016-02-23-1.yaml/blob/master/typo3/cms/2016-04-12-2.yaml/blob/master/typo3/cms/2017-02-28-2.yaml/blob/master/typo3/cms/2015-07-01-3.yaml/blob/master/typo3/cms/CVE-2014-3943.yaml/blob/master/typo3/cms/2014-10-22-2.yaml/blob/master/typo3/cms/CVE-2014-3944.yaml/blob/master/typo3/cms/2018-07-12-3.yaml/blob/master/typo3/cms/2016-02-16-3.yaml/blob/master/typo3/cms/2016-11-22-1.yaml/blob/master/typo3/cms/2014-05-22-1.yaml/blob/master/typo3/cms/2017-02-28-1.yaml/blob/master/typo3/cms/2015-12-15-3.yaml/blob/master/typo3/cms/2015-12-15-4.yaml/blob/master/typo3/cms/2016-04-12-3.yaml/blob/master/typo3/cms/2016-02-16-4.yaml/blob/master/typo3/cms/2016-11-22-2.yaml/blob/master/typo3/cms/CVE-2014-3941.yaml/blob/master/typo3/cms/2015-07-01-6.yaml/blob/master/typo3/cms/2014-12-09-1.yaml/blob/master/typo3/cms/2016-02-23-2.yaml/blob/master/typo3/cms/2016-02-23-4.yaml/blob/master/typo3/cms/2017-01-03-1.yaml/blob/master/typo3/cms/2015-12-15-5.yaml/blob/master/typo3/cms/2016-02-16-2.yaml/blob/master/typo3/cms/2016-02-16-1.yaml/blob/master/typo3/cms/2015-07-01-4.yaml/blob/master/typo3/cms/2018-07-12-1.yaml/blob/master/typo3/cms/2016-07-19-1.yaml/blob/master/typo3/cms/2015-12-15-2.yaml/blob/master/typo3/cms/2018-07-12-4.yaml/blob/master/typo3/cms/2016-02-23-3.yaml/blob/master/typo3/cms/2016-07-19-6.yaml/blob/master/typo3/cms/2014-10-22-1.yaml/blob/master/typo3/cms/2015-07-01-1.yaml/blob/master/typo3/cms/2017-09-05-1.yaml/blob/master/typo3/cms/2016-07-19-7.yaml/blob/master/typo3/cms/2016-07-19-2.yaml/blob/master/typo3/cms/2016-04-12-4.yaml/blob/master/typo3/cms/2018-07-12-2.yaml/blob/master/typo3/cms/2015-07-01-5.yaml/blob/master/typo3/cms/2015-12-15-1.yaml/blob/master/typo3/cms/2014-12-09-2.yaml/blob/master/typo3/cms/2016-07-19-4.yaml/blob/master/typo3/cms/2016-09-14-2.yaml/blob/master/typo3/cms/2016-04-12-1.yaml/blob/master/typo3/neos/2015-03-28.yaml/blob/master/typo3/neos/2015-11-23.yaml/blob/master/typo3/flow/2015-11-23.yaml/blob/master/typo3/flow/CVE-2013-7082.yaml/blob/master/typo3/flow/2012-03-28.yaml/blob/master/typo3/flow/2016-11-01.yaml
- id: ossindex:packagist:typo3/flow:2016-06-05
  title: Cross-Site Scripting in TYPO3 Flow
  description: Cross-Site Scripting in TYPO3 Flow
  affected_package: typo3/flow
  vulnerable_versions:
  - ">=1.1.0 <1.1.1"
  - ">=2.0.0 <2.0.1"
  package_manager: packagist
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/flow/CVE-2013-7082.yaml
  - https://www.neos.io/news/flow-sa-2013-001.html
  source_url: https://ossindex.net/resource/package/8397659396/vulnerabilities
- id: ossindex:packagist:typo3/flow:2016-06-05
  title: Arbitrary file upload and XML External Entity processing
  description: Arbitrary file upload and XML External Entity processing
  affected_package: typo3/flow
  vulnerable_versions:
  - ">=2.3.0 <2.3.7"
  - ">=3.0.0 <3.0.1"
  package_manager: packagist
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/flow/2015-11-23.yaml
  - https://www.neos.io/news/flow-sa-2015-001.html
  source_url: https://ossindex.net/resource/package/8397659396/vulnerabilities
- id: ossindex:packagist:typo3/flow:2016-06-05
  title: Insecure Unserialize Vulnerability in FLOW3
  description: Insecure Unserialize Vulnerability in FLOW3
  affected_package: typo3/flow
  vulnerable_versions:
  - ">=1.0.0 <1.0.4"
  package_manager: packagist
  credit:
  - OSSIndex
  references:
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/typo3/flow/2012-03-28.yaml
  - https://www.neos.io/news/flow-sa-2012-001.html
  source_url: https://ossindex.net/resource/package/8397659396/vulnerabilities
- id: snykio:packagist:typo3/flow:2016-11-01
  title: Timing Attack
  description: |
    Affected versions of [`typo3/flow`][1] are vulnerable to Timng Attack.



    [1]: https://packagist.org/packages/typo3/flow
    \nAffected versions of [`typo3/flow`][1] are vulnerable to Timng Attack.



    [1]: https://packagist.org/packages/typo3/flow
  affected_package: typo3/flow
  vulnerable_versions:
  - ">=2.3.0 &&  <2.3.16 || >=3.3.0 &&  <3.3.5 || >=3.1.0 &&  <3.1.7 || >=3.2.0 &&
    \ <3.2.7 || >=3 &&  <3.0.10"
  severity: low
  package_manager: packagist
  cwe:
  - CWE-208
  credit:
  - Unknown
  references:
  - https://www.neos.io/blog/flow-sa-2016-001.html
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3FLOW-70290
- id: snykio:packagist:typo3/flow:2015-11-23
  title: XML External Entity (XXE) Injection
  description: |+
    Affected versions of [`typo3/flow`][1] are vulnerable to XML External
    Entity (XXE) Injection.



    [1]: https://packagist.org/packages/typo3/flow
    \nAffected versions of [`typo3/flow`][1] are vulnerable to XML External
    Entity (XXE) Injection.



    [1]: https://packagist.org/packages/typo3/flow
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: typo3/flow
  vulnerable_versions:
  - ">=2.3.0 &&  <2.3.7 || >=3 &&  <3.0.1"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-611
  credit:
  - Unknown
  references:
  - https://www.neos.io/news/flow-sa-2015-001.html
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3FLOW-70289
- id: snykio:packagist:typo3/flow:2013-12-10
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`typo3/flow`][1] are vulnerable to Cross-site
    Scripting (XSS).

    Cross-site Scripting (XSS) vulnerability in the errorAction method in
    the ActionController base class in TYPO3 Flow (formerly FLOW3) 1.1.x
    before 1.1.1 and 2.0.x before 2.0.1 allows remote attackers to inject
    arbitrary web script or HTML via unspecified input, which is returned in
    an error message.



    [1]: https://packagist.org/packages/typo3/flow
    \nAffected versions of [`typo3/flow`][1] are vulnerable to Cross-site
    Scripting (XSS).

    Cross-site Scripting (XSS) vulnerability in the errorAction method in
    the ActionController base class in TYPO3 Flow (formerly FLOW3) 1.1.x
    before 1.1.1 and 2.0.x before 2.0.1 allows remote attackers to inject
    arbitrary web script or HTML via unspecified input, which is returned in
    an error message.



    [1]: https://packagist.org/packages/typo3/flow
    \nAffected versions of [`typo3/flow`][1] are vulnerable to Cross-site
    Scripting (XSS).

    Cross-site Scripting (XSS) vulnerability in the errorAction method in
    the ActionController base class in TYPO3 Flow (formerly FLOW3) 1.1.x
    before 1.1.1 and 2.0.x before 2.0.1 allows remote attackers to inject
    arbitrary web script or HTML via unspecified input, which is returned in
    an error message.



    [1]: https://packagist.org/packages/typo3/flow
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: typo3/flow
  vulnerable_versions:
  - ">=1.1.0 &&  <1.1.1 || >=2 &&  <2.0.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2013-7082
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://www.neos.io/news/flow-sa-2013-001.html
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3FLOW-70291
- id: snykio:packagist:typo3/flow:2012-03-28
  title: Deserialization of Untrusted Data
  description: |
    Affected versions of [`typo3/flow`][1] are vulnerable to Deserialization
    of Untrusted Data.



    [1]: https://packagist.org/packages/typo3/flow
    \nAffected versions of [`typo3/flow`][1] are vulnerable to Deserialization
    of Untrusted Data.



    [1]: https://packagist.org/packages/typo3/flow
  affected_package: typo3/flow
  vulnerable_versions:
  - ">=1 &&  <1.0.4"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-502
  credit:
  - Unknown
  references:
  - https://www.neos.io/news/flow-sa-2012-001.html
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3FLOW-70288
