---
- id: snykio:packagist:typo3/phar-stream-wrapper:174616
  title: Deserialization of Untrusted Data
  description: |
    [typo3/phar-stream-wrapper][1] is a stream handler package for a popular
    content management system.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. Insecure deserialization is a vulnerability which occurs
    when untrusted data is used to abuse the logic of an application.

    Due to missing sanitisation of user input, Phar files can be invoked by
    manipulated URLs in TYPO3 backend forms. A valid backend user account is
    needed to exploit this vulnerability. This vulnerability can be
    triggered to bypass protection of the `PharStreamWrapper` interceptor
    through file invocations such as `file_exists` or `stat` in order to
    exploit path traversal attacks, which can lead to abusing application
    logic leading to deserialization attacks.



    [1]: https://github.com/TYPO3/phar-stream-wrapper
    \nSerialization is a process of converting an object into a sequence of
    bytes which can be persisted to a disk or database or can be sent
    through streams. The reverse process of creating object from sequence of
    bytes is called deserialization. Serialization is commonly used for
    communication (sharing objects between multiple hosts) and persistence
    (store the object state in a file or a database).

    *Deserialization of untrusted data* ([CWE-502][1]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.



    [1]: https://cwe.mitre.org/data/definitions/502.html
  affected_package: typo3/phar-stream-wrapper
  vulnerable_versions:
  - ">=2.0.0  <2.1.1"
  - ">=3.0.0  <3.1.1"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-11831
  cwe:
  - CWE-502
  disclosed_date: 2019-05-08
  created_date: 2019-05-09
  last_modified_date: 2019-05-09
  credit:
  - Daniel le Gall
  references:
  - https://github.com/TYPO3/phar-stream-wrapper/commit/eb6607fb147f607e0e0cca1d7e3896814f7c5616
  - https://typo3.org/security/advisory/typo3-psa-2019-007/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3PHARSTREAMWRAPPER-174616
- id: snykio:packagist:typo3/phar-stream-wrapper:174617
  title: Deserialization of Untrusted Data
  description: |
    [typo3/phar-stream-wrapper][1] is a stream handler package for a popular
    content management system.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data. `PharMetaDataInterceptor` is used to discover potential
    insecure serialized objects in the meta-data section of Phar archives.
    An attacker can abuse the Phar structure, which mishandles Phar stub
    parsing without actually invoking PHP’s native process. It\'s then
    possible to inject manipulated bundles that would to have been blocked
    by the mentioned `PharMetaDataInterceptor`.



    [1]: https://github.com/TYPO3/phar-stream-wrapper
    \nSerialization is a process of converting an object into a sequence of
    bytes which can be persisted to a disk or database or can be sent
    through streams. The reverse process of creating object from sequence of
    bytes is called deserialization. Serialization is commonly used for
    communication (sharing objects between multiple hosts) and persistence
    (store the object state in a file or a database).

    *Deserialization of untrusted data* ([CWE-502][1]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.



    [1]: https://cwe.mitre.org/data/definitions/502.html
  affected_package: typo3/phar-stream-wrapper
  vulnerable_versions:
  - ">=2.0.0  <2.1.1"
  - ">=3.0.0  <3.1.1"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2019-11830
  cwe:
  - CWE-502
  disclosed_date: 2019-05-08
  created_date: 2019-05-09
  last_modified_date: 2019-05-09
  credit:
  - Tom Klingenberg
  references:
  - https://github.com/TYPO3/phar-stream-wrapper/commit/f7df5c56e18a74f55af95177d3d2605365c53dc6
  - https://github.com/TYPO3/phar-stream-wrapper/issues/24
  - https://typo3.org/security/advisory/typo3-psa-2019-008/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3PHARSTREAMWRAPPER-174617
- id: snykio:packagist:typo3/phar-stream-wrapper:174618
  title: Deserialization of Untrusted Data
  description: |
    [typo3/phar-stream-wrapper][1] is a stream handler package for a popular
    content management system.

    Affected versions of this package are vulnerable to Deserialization of
    Untrusted Data by-passing protection of `PharStreamWrapper` Interceptor.

    Exception and error handlers in custom applications (e.g. TYPO3
    extensions) sometimes didn\'t return to the original operating sequence
    of the `PharStreamWrapper`. The stream wrapper overwrites the existing
    Phar handling of PHP, applies its own assertions and then restores the
    native PHP Phar handling for the corresponding commands e.g.
    `file_exists` , `include` , `fopen` to continue processing.After that,
    the native PHP Phar handling gets disabled and is overwritten by the
    logic of the PharStreamWrapper again.



    [1]: https://github.com/TYPO3/phar-stream-wrapper
    \nSerialization is a process of converting an object into a sequence of
    bytes which can be persisted to a disk or database or can be sent
    through streams. The reverse process of creating object from sequence of
    bytes is called deserialization. Serialization is commonly used for
    communication (sharing objects between multiple hosts) and persistence
    (store the object state in a file or a database).

    *Deserialization of untrusted data* ([CWE-502][1]), is when the
    application deserializes untrusted data without sufficiently verifying
    that the resulting data will be valid, letting the attacker to control
    the state or the flow of the execution.

    An attacker just needs to identify a piece of software that has both a
    vulnerable class on its path, and performs deserialization on untrusted
    data. Then all they need to do is send the payload into the
    deserializer, getting the command executed.



    [1]: https://cwe.mitre.org/data/definitions/502.html
  affected_package: typo3/phar-stream-wrapper
  vulnerable_versions:
  - ">=1.0.0  <2.0.1"
  - ">=3.0.0  <3.0.1"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-502
  disclosed_date: 2018-10-18
  created_date: 2019-05-09
  last_modified_date: 2019-05-09
  credit:
  - Martin Auswöger
  references:
  - https://github.com/TYPO3/phar-stream-wrapper/commit/e4edb5514813d845664c69b44300c2714349d9b0
  - https://typo3.org/security/advisory/typo3-psa-2018-001/
  source_url: https://snyk.io/vuln/SNYK-PHP-TYPO3PHARSTREAMWRAPPER-174618
