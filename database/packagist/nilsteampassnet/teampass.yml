---
- id: snykio:packagist:nilsteampassnet/teampass:2017-01-11
  title: Cross-site Scripting (XSS)
  description: |+
    [nilsteampassnet/teampass][1] is a Collaborative Passwords Manager.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) due to insufficient filtration of data in
    `/sources/folders.queries.php`. An attacker could execute arbitrary HTML
    and script code in a browser in the context of the vulnerable website.



    [1]: https://github.com/nilsteampassnet/teampass
    \n[nilsteampassnet/teampass][1] is a Collaborative Passwords Manager.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) due to insufficient filtration of data in
    `/sources/folders.queries.php`. An attacker could execute arbitrary HTML
    and script code in a browser in the context of the vulnerable website.



    [1]: https://github.com/nilsteampassnet/teampass
    \n[nilsteampassnet/teampass][1] is a Collaborative Passwords Manager.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) due to insufficient filtration of data in
    `/sources/folders.queries.php`. An attacker could execute arbitrary HTML
    and script code in a browser in the context of the vulnerable website.



    [1]: https://github.com/nilsteampassnet/teampass
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: nilsteampassnet/teampass
  vulnerable_versions:
  - "<2.1.27.9"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2017-15278
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://github.com/nilsteampassnet/teampass/commit/f5a765381f051fe624386866ddb1f6b5e7eb929b
  - https://github.com/nilsteampassnet/teampass/releases/tag/2.1.27.9
  - https://nvd.nist.gov/vuln/detail/CVE-2017-15278
  source_url: https://snyk.io/vuln/SNYK-PHP-NILSTEAMPASSNETTEAMPASS-72074
- id: snykio:packagist:nilsteampassnet/teampass:2017-09-30
  title: Access Restriction Bypass
  description: |
    [nilsteampassnet/teampass][1] is a Collaborative Passwords Manager.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass.It does not properly enforce item access control when requesting
    `items.queries.php.` It is then possible to copy any arbitrary item into
    a directory controlled by the attacker. To exploit the vulnerability, an
    authenticated attacker must tamper with the requests sent directly, for
    example by changing the `item_id` parameter when invoking `copy_item` on
    `items.queries.php`.



    [1]: https://github.com/nilsteampassnet/teampass
    \n[nilsteampassnet/teampass][1] is a Collaborative Passwords Manager.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass.It does not properly enforce item access control when requesting
    `items.queries.php.` It is then possible to copy any arbitrary item into
    a directory controlled by the attacker. To exploit the vulnerability, an
    authenticated attacker must tamper with the requests sent directly, for
    example by changing the `item_id` parameter when invoking `copy_item` on
    `items.queries.php`.



    [1]: https://github.com/nilsteampassnet/teampass
    \n[nilsteampassnet/teampass][1] is a Collaborative Passwords Manager.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass.It does not properly enforce item access control when requesting
    `items.queries.php.` It is then possible to copy any arbitrary item into
    a directory controlled by the attacker. To exploit the vulnerability, an
    authenticated attacker must tamper with the requests sent directly, for
    example by changing the `item_id` parameter when invoking `copy_item` on
    `items.queries.php`.



    [1]: https://github.com/nilsteampassnet/teampass
  affected_package: nilsteampassnet/teampass
  vulnerable_versions:
  - "<2.1.27.9"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2017-15055
  cwe:
  - CWE-284
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2017-15055
  - https://github.com/nilsteampassnet/teampass/commit/5f16f6bb132138ee04eb1e0debf2bdc7d7b7a15f
  - http://blog.amossys.fr/teampass-multiple-cve-01.html
  source_url: https://snyk.io/vuln/SNYK-PHP-NILSTEAMPASSNETTEAMPASS-72066
- id: snykio:packagist:nilsteampassnet/teampass:2017-10-02
  title: Arbitrary File Upload
  description: |
    [nilsteampassnet/teampass][1] is a Collaborative Passwords Manager.

    Affected versions of this package are vulnerable to Arbitrary File
    Upload. It allows remote authenticated users to upload arbitrary files
    leading to Remote Command Execution. To exploit this vulnerability, an
    authenticated attacker has to tamper with parameters of a request to
    `upload.files.php`, in order to select the correct branch and be able to
    upload any arbitrary file. From there, it can simply access the file to
    execute code on the server.



    [1]: https://github.com/nilsteampassnet/teampass
    \n[nilsteampassnet/teampass][1] is a Collaborative Passwords Manager.

    Affected versions of this package are vulnerable to Arbitrary File
    Upload. It allows remote authenticated users to upload arbitrary files
    leading to Remote Command Execution. To exploit this vulnerability, an
    authenticated attacker has to tamper with parameters of a request to
    `upload.files.php`, in order to select the correct branch and be able to
    upload any arbitrary file. From there, it can simply access the file to
    execute code on the server.



    [1]: https://github.com/nilsteampassnet/teampass
    \n[nilsteampassnet/teampass][1] is a Collaborative Passwords Manager.

    Affected versions of this package are vulnerable to Arbitrary File
    Upload. It allows remote authenticated users to upload arbitrary files
    leading to Remote Command Execution. To exploit this vulnerability, an
    authenticated attacker has to tamper with parameters of a request to
    `upload.files.php`, in order to select the correct branch and be able to
    upload any arbitrary file. From there, it can simply access the file to
    execute code on the server.



    [1]: https://github.com/nilsteampassnet/teampass
  affected_package: nilsteampassnet/teampass
  vulnerable_versions:
  - "<2.1.27.9"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2017-15054
  cwe:
  - CWE-434
  credit:
  - Unknown
  references:
  - https://github.com/nilsteampassnet/teampass/commit/9811c9d453da4bd1101ff7033250d1fbedf101fc
  - http://blog.amossys.fr/teampass-multiple-cve-01.html
  source_url: https://snyk.io/vuln/SNYK-PHP-NILSTEAMPASSNETTEAMPASS-72077
- id: snykio:packagist:nilsteampassnet/teampass:2017-10-04
  title: Access Restriction Bypass
  description: |
    [nilsteampassnet/teampass][1] is a Collaborative Passwords Manager.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass. When requesting `roles.queries.php.` It is then possible for a
    manager user to modify any arbitrary roles within the application, or
    delete any arbitrary role. To exploit the vulnerability, an
    authenticated attacker must have the manager rights on the application,
    then tamper with the requests sent directly, for example by changing the
    \"id\" parameter when invoking \"delete\_role\" on `roles.queries.php`.



    [1]: https://github.com/nilsteampassnet/teampass
    \n[nilsteampassnet/teampass][1] is a Collaborative Passwords Manager.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass. When requesting `roles.queries.php.` It is then possible for a
    manager user to modify any arbitrary roles within the application, or
    delete any arbitrary role. To exploit the vulnerability, an
    authenticated attacker must have the manager rights on the application,
    then tamper with the requests sent directly, for example by changing the
    \"id\" parameter when invoking \"delete\_role\" on `roles.queries.php`.



    [1]: https://github.com/nilsteampassnet/teampass
    \n[nilsteampassnet/teampass][1] is a Collaborative Passwords Manager.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass. When requesting `roles.queries.php.` It is then possible for a
    manager user to modify any arbitrary roles within the application, or
    delete any arbitrary role. To exploit the vulnerability, an
    authenticated attacker must have the manager rights on the application,
    then tamper with the requests sent directly, for example by changing the
    \"id\" parameter when invoking \"delete\_role\" on `roles.queries.php`.



    [1]: https://github.com/nilsteampassnet/teampass
  affected_package: nilsteampassnet/teampass
  vulnerable_versions:
  - "< 2.1.27.9"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2017-15053
  cwe:
  - CWE-284
  credit:
  - Unknown
  references:
  - https://github.com/nilsteampassnet/teampass/commit/ef32e9c28b6ddc33cee8a25255bc8da54434af3e
  - https://nvd.nist.gov/vuln/detail/CVE-2017-15053
  - http://blog.amossys.fr/teampass-multiple-cve-01.html
  source_url: https://snyk.io/vuln/SNYK-PHP-NILSTEAMPASSNETTEAMPASS-72076
- id: snykio:packagist:nilsteampassnet/teampass:2018-02-27
  title: Cross-site Scripting (XSS)
  description: |+
    [nilsteampassnet/teampass][1] is a Collaborative Passwords Manager.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It allows authenticated remote attackers to inject arbitrary web
    script or HTML via the (1) URL value of an item or (2) user log history.
    To exploit the vulnerability, the attacker must be first authenticated
    to the application. For the first one, the attacker has to simply inject
    XSS code within the URL field of a shared item. For the second one
    however, the attacker must prepare a payload within its profile, and
    then ask an administrator to modify its profile. From there, whenever
    the administrator accesses the log, it can be XSS\'ed.



    [1]: https://github.com/nilsteampassnet/teampass
    \n[nilsteampassnet/teampass][1] is a Collaborative Passwords Manager.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It allows authenticated remote attackers to inject arbitrary web
    script or HTML via the (1) URL value of an item or (2) user log history.
    To exploit the vulnerability, the attacker must be first authenticated
    to the application. For the first one, the attacker has to simply inject
    XSS code within the URL field of a shared item. For the second one
    however, the attacker must prepare a payload within its profile, and
    then ask an administrator to modify its profile. From there, whenever
    the administrator accesses the log, it can be XSS\'ed.



    [1]: https://github.com/nilsteampassnet/teampass
    \n[nilsteampassnet/teampass][1] is a Collaborative Passwords Manager.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It allows authenticated remote attackers to inject arbitrary web
    script or HTML via the (1) URL value of an item or (2) user log history.
    To exploit the vulnerability, the attacker must be first authenticated
    to the application. For the first one, the attacker has to simply inject
    XSS code within the URL field of a shared item. For the second one
    however, the attacker must prepare a payload within its profile, and
    then ask an administrator to modify its profile. From there, whenever
    the administrator accesses the log, it can be XSS\'ed.



    [1]: https://github.com/nilsteampassnet/teampass
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: nilsteampassnet/teampass
  vulnerable_versions:
  - "<2.1.27.9"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2017-15051
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://github.com/nilsteampassnet/teampass/commit/5f16f6bb132138ee04eb1e0debf2bdc7d7b7a15f
  - https://nvd.nist.gov/vuln/detail/CVE-2017-15051
  source_url: https://snyk.io/vuln/SNYK-PHP-NILSTEAMPASSNETTEAMPASS-70401
- id: snykio:packagist:nilsteampassnet/teampass:2018-09-30
  title: Access Restriction Bypass
  description: |
    [nilsteampassnet/teampass][1] is a Collaborative Passwords Manager.

    Affcted versions of this package are vulnerable to Access Restriction
    Bypass. It does not properly enforce manager access control when
    requesting `users.queries.php`. It is then possible for a manager user
    to delete an arbitrary user (including admin), or modify attributes of
    any arbitrary user except administrator. To exploit the vulnerability,
    an authenticated attacker must have the manager rights on the
    application, then tamper with the requests sent directly, for example by
    changing the \"id\" parameter when invoking \"delete\_user\" on
    `users.queries.php`.



    [1]: https://github.com/nilsteampassnet/teampass/blob/master/composer.json
    \n[nilsteampassnet/teampass][1] is a Collaborative Passwords Manager.

    Affcted versions of this package are vulnerable to Access Restriction
    Bypass. It does not properly enforce manager access control when
    requesting `users.queries.php`. It is then possible for a manager user
    to delete an arbitrary user (including admin), or modify attributes of
    any arbitrary user except administrator. To exploit the vulnerability,
    an authenticated attacker must have the manager rights on the
    application, then tamper with the requests sent directly, for example by
    changing the \"id\" parameter when invoking \"delete\_user\" on
    `users.queries.php`.



    [1]: https://github.com/nilsteampassnet/teampass/blob/master/composer.json
    \n[nilsteampassnet/teampass][1] is a Collaborative Passwords Manager.

    Affcted versions of this package are vulnerable to Access Restriction
    Bypass. It does not properly enforce manager access control when
    requesting `users.queries.php`. It is then possible for a manager user
    to delete an arbitrary user (including admin), or modify attributes of
    any arbitrary user except administrator. To exploit the vulnerability,
    an authenticated attacker must have the manager rights on the
    application, then tamper with the requests sent directly, for example by
    changing the \"id\" parameter when invoking \"delete\_user\" on
    `users.queries.php`.



    [1]: https://github.com/nilsteampassnet/teampass/blob/master/composer.json
  affected_package: nilsteampassnet/teampass
  vulnerable_versions:
  - "<2.1.27.9"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2017-15052
  cwe:
  - CWE-284
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2017-15052
  - https://github.com/nilsteampassnet/teampass/commit/8f2d51dd6c24f76e4f259d0df22cff9b275f2dd1
  source_url: https://snyk.io/vuln/SNYK-PHP-NILSTEAMPASSNETTEAMPASS-72075
