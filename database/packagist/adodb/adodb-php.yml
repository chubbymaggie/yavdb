---
- id: friendsofphp:packagist:adodb/adodb-php:2016-08-28
  title: XSS vulnerability in old test script
  affected_package: adodb/adodb-php
  vulnerable_versions:
  - "<5.20.6"
  package_manager: packagist
  cve:
  - CVE-2016-4855
  credit:
  - FriendsOfPHP
  references:
  - https://github.com/ADOdb/ADOdb/issues/274
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/pusher/pusher-php-server/2015-05-13.yaml/blob/master/gregwar/rst/2016-10-31.yaml/blob/master/smarty/smarty/CVE-2018-13982.yaml/blob/master/willdurand/js-translation-bundle/2014-07-29-1.yaml/blob/master/openid/php-openid/CVE-2013-4701.yaml/blob/master/sylius/sylius/2018-07-09.yaml/blob/master/sylius/admin-bundle/2018-07-09.yaml/blob/master/truckersmp/phpwhois/CVE-2015-5243.yaml/blob/master/cart2quote/module-quotation/2017-02-01.yaml/blob/master/serluck/phpwhois/CVE-2015-5243.yaml/blob/master/alterphp/easyadmin-extension-bundle/2018-10-02.yaml/blob/master/onelogin/php-saml/2016-10-04.yaml/blob/master/onelogin/php-saml/2017-02-28.yaml/blob/master/padraic/humbug_get_contents/CVE-2016-5385.yaml/blob/master/phpmailer/phpmailer/CVE-2016-10033.yaml/blob/master/phpmailer/phpmailer/CVE-2015-8476.yaml/blob/master/phpmailer/phpmailer/CVE-2016-10045.yaml/blob/master/phpmailer/phpmailer/CVE-2017-11503.yaml/blob/master/phpmailer/phpmailer/CVE-2017-5223.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2016-3124.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12869.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12870.yaml/blob/master/simplesamlphp/simplesamlphp/201710-01.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-18122.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2018-6521.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-18121.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12873.yaml/blob/master/simplesamlphp/simplesamlphp/201606-01.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12868.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2016-9955.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2018-6520.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12867.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12871.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12872.yaml/blob/master/simplesamlphp/simplesamlphp-module-infocard/CVE-2017-12874.yaml/blob/master/simplesamlphp/saml2/CVE-2018-7644.yaml/blob/master/simplesamlphp/saml2/CVE-2018-7711.yaml/blob/master/simplesamlphp/saml2/CVE-2018-6519.yaml/blob/master/simplesamlphp/saml2/CVE-2016-9814.yaml/blob/master/oro/platform/2015-07-08.yaml/blob/master/oro/crm/2015-07-08.yaml/blob/master/paypal/merchant-sdk-php/CVE-2017-6099.yaml/blob/master/amphp/http/2018-03-15.yaml/blob/master/amphp/artax/2017-05-09.yaml/blob/master/amphp/artax/CVE-2016-5385.yaml/blob/master/brightlocal/phpwhois/CVE-2015-5243.yaml/blob/master/dompdf/dompdf/CVE-2014-5013.yaml/blob/master/dompdf/dompdf/CVE-2014-5012.yaml/blob/master/dompdf/dompdf/CVE-2014-5011.yaml/blob/master/dompdf/dompdf/CVE-2014-2383.yaml/blob/master/dompdf/dompdf/CVE-2010-4879.yaml/blob/master/adodb/adodb-php/CVE-2016-4855.yaml
- id: friendsofphp:packagist:adodb/adodb-php:2018-03-06
  title: Potential SQL injection vector
  affected_package: adodb/adodb-php
  vulnerable_versions:
  - "<5.20.12"
  package_manager: packagist
  credit:
  - FriendsOfPHP
  references:
  - https://github.com/ADOdb/ADOdb/pull/401
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/pusher/pusher-php-server/2015-05-13.yaml/blob/master/gregwar/rst/2016-10-31.yaml/blob/master/smarty/smarty/CVE-2018-13982.yaml/blob/master/willdurand/js-translation-bundle/2014-07-29-1.yaml/blob/master/openid/php-openid/CVE-2013-4701.yaml/blob/master/sylius/sylius/2018-07-09.yaml/blob/master/sylius/admin-bundle/2018-07-09.yaml/blob/master/truckersmp/phpwhois/CVE-2015-5243.yaml/blob/master/cart2quote/module-quotation/2017-02-01.yaml/blob/master/serluck/phpwhois/CVE-2015-5243.yaml/blob/master/alterphp/easyadmin-extension-bundle/2018-10-02.yaml/blob/master/onelogin/php-saml/2016-10-04.yaml/blob/master/onelogin/php-saml/2017-02-28.yaml/blob/master/padraic/humbug_get_contents/CVE-2016-5385.yaml/blob/master/phpmailer/phpmailer/CVE-2016-10033.yaml/blob/master/phpmailer/phpmailer/CVE-2015-8476.yaml/blob/master/phpmailer/phpmailer/CVE-2016-10045.yaml/blob/master/phpmailer/phpmailer/CVE-2017-11503.yaml/blob/master/phpmailer/phpmailer/CVE-2017-5223.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2016-3124.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12869.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12870.yaml/blob/master/simplesamlphp/simplesamlphp/201710-01.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-18122.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2018-6521.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-18121.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12873.yaml/blob/master/simplesamlphp/simplesamlphp/201606-01.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12868.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2016-9955.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2018-6520.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12867.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12871.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12872.yaml/blob/master/simplesamlphp/simplesamlphp-module-infocard/CVE-2017-12874.yaml/blob/master/simplesamlphp/saml2/CVE-2018-7644.yaml/blob/master/simplesamlphp/saml2/CVE-2018-7711.yaml/blob/master/simplesamlphp/saml2/CVE-2018-6519.yaml/blob/master/simplesamlphp/saml2/CVE-2016-9814.yaml/blob/master/oro/platform/2015-07-08.yaml/blob/master/oro/crm/2015-07-08.yaml/blob/master/paypal/merchant-sdk-php/CVE-2017-6099.yaml/blob/master/amphp/http/2018-03-15.yaml/blob/master/amphp/artax/2017-05-09.yaml/blob/master/amphp/artax/CVE-2016-5385.yaml/blob/master/brightlocal/phpwhois/CVE-2015-5243.yaml/blob/master/dompdf/dompdf/CVE-2014-5013.yaml/blob/master/dompdf/dompdf/CVE-2014-5012.yaml/blob/master/dompdf/dompdf/CVE-2014-5011.yaml/blob/master/dompdf/dompdf/CVE-2014-2383.yaml/blob/master/dompdf/dompdf/CVE-2010-4879.yaml/blob/master/adodb/adodb-php/CVE-2016-4855.yaml/blob/master/adodb/adodb-php/2018-03-06.yaml
- id: ossindex:packagist:adodb/adodb-php:2016-10-03
  title: "[CVE-2016-7405]  Improper Neutralization of Special Elements used in an
    SQL Command (SQL Injection)"
  description: The qstr method in the PDO driver in the ADOdb Library for PHP before
    5.x before 5.20.7 might allow remote attackers to conduct SQL injection attacks
    via vectors related to incorrect quoting.
  affected_package: adodb/adodb-php
  vulnerable_versions:
  - '5.19'
  - '5.00'
  - '5.03'
  - '5.11'
  - 5.20.0
  - '5.01'
  - '5.04'
  - '5.12'
  - 5.20.1
  - '5.02'
  - '5.05'
  - '5.13'
  - '5.14'
  - 5.20.2
  - '5.06'
  - '5.15'
  - 5.20.3
  - '5.07'
  - '5.16'
  - 5.20.4
  - '5.08'
  - '5.17'
  - 5.20.5
  - '5.09'
  - '5.18'
  - 5.20.6
  - '5.10'
  package_manager: packagist
  cve:
  - CVE-2016-7405
  credit:
  - OSSIndex
  references:
  - http://www.openwall.com/lists/oss-security/2016/09/07/8
  - http://www.openwall.com/lists/oss-security/2016/09/15/1
  - http://www.securityfocus.com/bid/92969
  - https://github.com/ADOdb/ADOdb/blob/v5.20.7/docs/changelog.md
  - https://github.com/ADOdb/ADOdb/commit/bd9eca9f40220f9918ec3cc7ae9ef422b3e448b8
  - https://github.com/ADOdb/ADOdb/issues/226
  - https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/LT3WU77BRUJREZUYQ3ZQBMUIVIVIND4Y/
  source_url: https://ossindex.net/resource/package/8397170873/vulnerabilities
- id: ossindex:packagist:adodb/adodb-php:2016-10-22
  title: XSS vulnerability in old test script
  description: XSS vulnerability in old test script
  affected_package: adodb/adodb-php
  vulnerable_versions:
  - "<5.20.6"
  package_manager: packagist
  credit:
  - OSSIndex
  references:
  - https://github.com/ADOdb/ADOdb/issues/274
  - https://github.com/FriendsOfPHP/security-advisories/blob/master/adodb/adodb-php/CVE-2016-4855.yaml
  source_url: https://ossindex.net/resource/package/8397170873/vulnerabilities
- id: ossindex:packagist:adodb/adodb-php:2017-05-12
  title: '[CVE-2016-4855]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting vulnerability in ADOdb versions prior to 5.20.6
    allows remote attackers to inject arbitrary web script or HTML via unspecified
    vectors.
  affected_package: adodb/adodb-php
  vulnerable_versions:
  - 5.20.5
  package_manager: packagist
  cve:
  - CVE-2016-4855
  credit:
  - OSSIndex
  references:
  - http://jvn.jp/en/jp/JVN48237713/index.html
  - http://www.securityfocus.com/bid/92753
  - https://github.com/ADOdb/ADOdb/issues/274
  source_url: https://ossindex.net/resource/package/8397170873/vulnerabilities
- id: snykio:packagist:adodb/adodb-php:2016-08-28
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`adodb/adodb-php`][1] are vulnerable to Cross-site
    Scripting (XSS) vulnerability in old test script.

    Cross-site Scripting vulnerability in ADOdb versions prior to 5.20.6
    allows remote attackers to inject arbitrary web script or HTML via
    unspecified vectors.



    [1]: https://packagist.org/packages/adodb/adodb-php
    \nAffected versions of [`adodb/adodb-php`][1] are vulnerable to Cross-site
    Scripting (XSS) vulnerability in old test script.

    Cross-site Scripting vulnerability in ADOdb versions prior to 5.20.6
    allows remote attackers to inject arbitrary web script or HTML via
    unspecified vectors.



    [1]: https://packagist.org/packages/adodb/adodb-php
    \nAffected versions of [`adodb/adodb-php`][1] are vulnerable to Cross-site
    Scripting (XSS) vulnerability in old test script.

    Cross-site Scripting vulnerability in ADOdb versions prior to 5.20.6
    allows remote attackers to inject arbitrary web script or HTML via
    unspecified vectors.



    [1]: https://packagist.org/packages/adodb/adodb-php
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: adodb/adodb-php
  vulnerable_versions:
  - "<5.20.6"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2016-4855
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2016-4855
  - https://github.com/ADOdb/ADOdb/issues/274
  - https://github.com/ADOdb/ADOdb/commit/ecb93d8c1
  source_url: https://snyk.io/vuln/SNYK-PHP-ADODBADODBPHP-70000
- id: snykio:packagist:adodb/adodb-php:2018-04-30
  title: SQL injection
  description: |
    [adodb/adodb-php][1] is a PHP database abstraction layer library.

    Affected versions of this package are vulnerable to SQL injection. The
    `SelectLimit` function has a potential SQL exploit through the use of
    the `nrows` and `offset` parameters which are not forced to integers.



    [1]: https://packagist.org/packages/adodb/adodb-php
    \n[adodb/adodb-php][1] is a PHP database abstraction layer library.

    Affected versions of this package are vulnerable to SQL injection. The
    `SelectLimit` function has a potential SQL exploit through the use of
    the `nrows` and `offset` parameters which are not forced to integers.



    [1]: https://packagist.org/packages/adodb/adodb-php
    \n[adodb/adodb-php][1] is a PHP database abstraction layer library.

    Affected versions of this package are vulnerable to SQL injection. The
    `SelectLimit` function has a potential SQL exploit through the use of
    the `nrows` and `offset` parameters which are not forced to integers.



    [1]: https://packagist.org/packages/adodb/adodb-php
  affected_package: adodb/adodb-php
  vulnerable_versions:
  - "<5.20.12"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-564
  credit:
  - Unknown
  references:
  - https://github.com/ADOdb/ADOdb/pull/401
  source_url: https://snyk.io/vuln/SNYK-PHP-ADODBADODBPHP-72140
