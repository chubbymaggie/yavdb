---
- id: friendsofphp:packagist:stormpath/sdk:1970-01-01
  title: Insecure Random Number Generator
  affected_package: stormpath/sdk
  vulnerable_versions:
  - ">=0.0.0 <9.9.99"
  package_manager: packagist
  credit:
  - FriendsOfPHP
  references:
  - https://github.com/stormpath/stormpath-sdk-php/issues/132
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/stormpath/sdk/2017-11-20.yaml
- id: snykio:packagist:stormpath/sdk:2016-02-16
  title: Insecure Randomness
  description: |+
    [stormpath/sdk][1] is a complete user management API.

    Affected versions of this package are vulnerable to Insecure Randomness.



    [1]: https://github.com/stormpath/stormpath-sdk-php
    \n[stormpath/sdk][1] is a complete user management API.

    Affected versions of this package are vulnerable to Insecure Randomness.



    [1]: https://github.com/stormpath/stormpath-sdk-php
    \n[stormpath/sdk][1] is a complete user management API.

    Affected versions of this package are vulnerable to Insecure Randomness.



    [1]: https://github.com/stormpath/stormpath-sdk-php
    \nComputers are deterministic machines, and as such are unable to produce
    true randomness. Pseudo-Random Number Generators (PRNGs) approximate
    randomness algorithmically, starting with a seed from which subsequent
    values are calculated.

    There are two types of PRNGs: statistical and cryptographic. Statistical
    PRNGs provide useful statistical properties, but their output is highly
    predictable and forms an easy to reproduce numeric stream that is
    unsuitable for use in cases where security depends on generated values
    being unpredictable. Cryptographic PRNGs address this problem by
    generating output that is more difficult to predict. For a value to be
    cryptographically secure, it must be impossible or highly improbable for
    an attacker to distinguish between it and a truly random value. In
    general, if a PRNG algorithm is not advertised as being
    cryptographically secure, then it is probably a statistical PRNG and
    should not be used in security-sensitive contexts.

    \nComputers are deterministic machines, and as such are unable to produce
    true randomness. Pseudo-Random Number Generators (PRNGs) approximate
    randomness algorithmically, starting with a seed from which subsequent
    values are calculated.

    There are two types of PRNGs: statistical and cryptographic. Statistical
    PRNGs provide useful statistical properties, but their output is highly
    predictable and forms an easy to reproduce numeric stream that is
    unsuitable for use in cases where security depends on generated values
    being unpredictable. Cryptographic PRNGs address this problem by
    generating output that is more difficult to predict. For a value to be
    cryptographically secure, it must be impossible or highly improbable for
    an attacker to distinguish between it and a truly random value. In
    general, if a PRNG algorithm is not advertised as being
    cryptographically secure, then it is probably a statistical PRNG and
    should not be used in security-sensitive contexts.

    \nComputers are deterministic machines, and as such are unable to produce
    true randomness. Pseudo-Random Number Generators (PRNGs) approximate
    randomness algorithmically, starting with a seed from which subsequent
    values are calculated.

    There are two types of PRNGs: statistical and cryptographic. Statistical
    PRNGs provide useful statistical properties, but their output is highly
    predictable and forms an easy to reproduce numeric stream that is
    unsuitable for use in cases where security depends on generated values
    being unpredictable. Cryptographic PRNGs address this problem by
    generating output that is more difficult to predict. For a value to be
    cryptographically secure, it must be impossible or highly improbable for
    an attacker to distinguish between it and a truly random value. In
    general, if a PRNG algorithm is not advertised as being
    cryptographically secure, then it is probably a statistical PRNG and
    should not be used in security-sensitive contexts.

  affected_package: stormpath/sdk
  vulnerable_versions:
  - ">=0.0.0"
  severity: high
  package_manager: packagist
  cwe:
  - CWE-330
  credit:
  - Unknown
  references:
  - https://github.com/stormpath/stormpath-sdk-php/issues/132
  source_url: https://snyk.io/vuln/SNYK-PHP-STORMPATHSDK-72046
