---
- id: friendsofphp:packagist:simplesamlphp/simplesamlphp-module-infocard:2016-12-03
  title: Incorrect signature verification
  affected_package: simplesamlphp/simplesamlphp-module-infocard
  vulnerable_versions:
  - "<1.0.1"
  package_manager: packagist
  cve:
  - CVE-2017-12874
  credit:
  - FriendsOfPHP
  references:
  - https://simplesamlphp.org/security/201612-03
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/serluck/phpwhois/CVE-2015-5243.yaml/blob/master/laravel/socialite/2015-08-03.yaml/blob/master/laravel/socialite/2015-07-23.yaml/blob/master/laravel/framework/CVE-2017-14775.yaml/blob/master/laravel/framework/CVE-2017-9303.yaml/blob/master/laravel/framework/2014-05-20.yaml/blob/master/laravel/framework/2014-04-15.yaml/blob/master/laravel/framework/2018-03-30-1.yaml/blob/master/laravel/framework/2018-08-08-1.yaml/blob/master/gree/jose/2016-08-30.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-18122.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12870.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2018-6520.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2016-3124.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2018-6521.yaml/blob/master/simplesamlphp/simplesamlphp/201710-01.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12873.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12868.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12869.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-18121.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12867.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12872.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12871.yaml/blob/master/simplesamlphp/simplesamlphp/201606-01.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2016-9955.yaml/blob/master/simplesamlphp/saml2/CVE-2018-7644.yaml/blob/master/simplesamlphp/saml2/CVE-2016-9814.yaml/blob/master/simplesamlphp/saml2/CVE-2018-6519.yaml/blob/master/simplesamlphp/saml2/CVE-2018-7711.yaml/blob/master/simplesamlphp/simplesamlphp-module-infocard/CVE-2017-12874.yaml
- id: snykio:packagist:simplesamlphp/simplesamlphp-module-infocard:2016-12-03
  title: Incorrect Signature Verification
  description: "Affected versions of [`simplesamlphp/simplesamlphp-module-infocard`][1]\nare
    vulnerable to Incorrect signature verification.\n\n> The InfoCard SimpleSAMLphp
    module allows incorporates a series of\n> libraries provided by the Zend Framework.
    As part of this third-party\n> library, the class Zend\\_InfoCard\\_Xml\\_Security
    allows the\n> verification of the XML digital signature of XML chunks with a given\n>
    key. In particular, the validateXMLSignature() method receives an\n> string containing
    an XML document and a key to verify it, and throws\n> an exception in case there
    is any error, either caused by incorrect\n> input or an invalid signature. This
    method uses the openssl\\_verify()\n> function provided by the openssl PHP extension.\n\n>
    The openssl\\_verify() function returns 1 when the signature was\n> successfully
    verified, 0 if it failed to verify with the given key,\n> and -1 in case an error
    occurs. PHP allows translating numerical\n> values to boolean implicitly, with
    the following correspondences:\n> \n> * 0 equals false.\n> * Non-zero equals true.
    This means that an implicit conversion to\n>   boolean of the values returned
    by openssl\\_verify() will convert an\n>   error state, signaled by the value
    -1, to a successful verification\n>   of the signature (represented by the boolean
    true).\n\n> The aforementioned method was performing an implicit conversion to\n>
    boolean of the values returned by the openssl\\_verify() function. This\n> means
    an error during signature verification is treated as a\n> successful verification
    by the method.\n\n\n\n[1]: https://packagist.org/packages/simplesamlphp/simplesamlphp-module-infocard\n\\nAffected
    versions of [`simplesamlphp/simplesamlphp-module-infocard`][1]\nare vulnerable
    to Incorrect signature verification.\n\n> The InfoCard SimpleSAMLphp module allows
    incorporates a series of\n> libraries provided by the Zend Framework. As part
    of this third-party\n> library, the class Zend\\_InfoCard\\_Xml\\_Security allows
    the\n> verification of the XML digital signature of XML chunks with a given\n>
    key. In particular, the validateXMLSignature() method receives an\n> string containing
    an XML document and a key to verify it, and throws\n> an exception in case there
    is any error, either caused by incorrect\n> input or an invalid signature. This
    method uses the openssl\\_verify()\n> function provided by the openssl PHP extension.\n\n>
    The openssl\\_verify() function returns 1 when the signature was\n> successfully
    verified, 0 if it failed to verify with the given key,\n> and -1 in case an error
    occurs. PHP allows translating numerical\n> values to boolean implicitly, with
    the following correspondences:\n> \n> * 0 equals false.\n> * Non-zero equals true.
    This means that an implicit conversion to\n>   boolean of the values returned
    by openssl\\_verify() will convert an\n>   error state, signaled by the value
    -1, to a successful verification\n>   of the signature (represented by the boolean
    true).\n\n> The aforementioned method was performing an implicit conversion to\n>
    boolean of the values returned by the openssl\\_verify() function. This\n> means
    an error during signature verification is treated as a\n> successful verification
    by the method.\n\n\n\n[1]: https://packagist.org/packages/simplesamlphp/simplesamlphp-module-infocard\n\\nAffected
    versions of [`simplesamlphp/simplesamlphp-module-infocard`][1]\nare vulnerable
    to Incorrect signature verification.\n\n> The InfoCard SimpleSAMLphp module allows
    incorporates a series of\n> libraries provided by the Zend Framework. As part
    of this third-party\n> library, the class Zend\\_InfoCard\\_Xml\\_Security allows
    the\n> verification of the XML digital signature of XML chunks with a given\n>
    key. In particular, the validateXMLSignature() method receives an\n> string containing
    an XML document and a key to verify it, and throws\n> an exception in case there
    is any error, either caused by incorrect\n> input or an invalid signature. This
    method uses the openssl\\_verify()\n> function provided by the openssl PHP extension.\n\n>
    The openssl\\_verify() function returns 1 when the signature was\n> successfully
    verified, 0 if it failed to verify with the given key,\n> and -1 in case an error
    occurs. PHP allows translating numerical\n> values to boolean implicitly, with
    the following correspondences:\n> \n> * 0 equals false.\n> * Non-zero equals true.
    This means that an implicit conversion to\n>   boolean of the values returned
    by openssl\\_verify() will convert an\n>   error state, signaled by the value
    -1, to a successful verification\n>   of the signature (represented by the boolean
    true).\n\n> The aforementioned method was performing an implicit conversion to\n>
    boolean of the values returned by the openssl\\_verify() function. This\n> means
    an error during signature verification is treated as a\n> successful verification
    by the method.\n\n\n\n[1]: https://packagist.org/packages/simplesamlphp/simplesamlphp-module-infocard\n\\nAffected
    versions of [`simplesamlphp/simplesamlphp-module-infocard`][1]\nare vulnerable
    to Incorrect signature verification.\n\n> The InfoCard SimpleSAMLphp module allows
    incorporates a series of\n> libraries provided by the Zend Framework. As part
    of this third-party\n> library, the class Zend\\_InfoCard\\_Xml\\_Security allows
    the\n> verification of the XML digital signature of XML chunks with a given\n>
    key. In particular, the validateXMLSignature() method receives an\n> string containing
    an XML document and a key to verify it, and throws\n> an exception in case there
    is any error, either caused by incorrect\n> input or an invalid signature. This
    method uses the openssl\\_verify()\n> function provided by the openssl PHP extension.\n\n>
    The openssl\\_verify() function returns 1 when the signature was\n> successfully
    verified, 0 if it failed to verify with the given key,\n> and -1 in case an error
    occurs. PHP allows translating numerical\n> values to boolean implicitly, with
    the following correspondences:\n> \n> * 0 equals false.\n> * Non-zero equals true.
    This means that an implicit conversion to\n>   boolean of the values returned
    by openssl\\_verify() will convert an\n>   error state, signaled by the value
    -1, to a successful verification\n>   of the signature (represented by the boolean
    true).\n\n> The aforementioned method was performing an implicit conversion to\n>
    boolean of the values returned by the openssl\\_verify() function. This\n> means
    an error during signature verification is treated as a\n> successful verification
    by the method.\n\n\n\n[1]: https://packagist.org/packages/simplesamlphp/simplesamlphp-module-infocard\n\\nAffected
    versions of [`simplesamlphp/simplesamlphp-module-infocard`][1]\nare vulnerable
    to Incorrect signature verification.\n\n> The InfoCard SimpleSAMLphp module allows
    incorporates a series of\n> libraries provided by the Zend Framework. As part
    of this third-party\n> library, the class Zend\\_InfoCard\\_Xml\\_Security allows
    the\n> verification of the XML digital signature of XML chunks with a given\n>
    key. In particular, the validateXMLSignature() method receives an\n> string containing
    an XML document and a key to verify it, and throws\n> an exception in case there
    is any error, either caused by incorrect\n> input or an invalid signature. This
    method uses the openssl\\_verify()\n> function provided by the openssl PHP extension.\n\n>
    The openssl\\_verify() function returns 1 when the signature was\n> successfully
    verified, 0 if it failed to verify with the given key,\n> and -1 in case an error
    occurs. PHP allows translating numerical\n> values to boolean implicitly, with
    the following correspondences:\n> \n> * 0 equals false.\n> * Non-zero equals true.
    This means that an implicit conversion to\n>   boolean of the values returned
    by openssl\\_verify() will convert an\n>   error state, signaled by the value
    -1, to a successful verification\n>   of the signature (represented by the boolean
    true).\n\n> The aforementioned method was performing an implicit conversion to\n>
    boolean of the values returned by the openssl\\_verify() function. This\n> means
    an error during signature verification is treated as a\n> successful verification
    by the method.\n\n\n\n[1]: https://packagist.org/packages/simplesamlphp/simplesamlphp-module-infocard\n"
  affected_package: simplesamlphp/simplesamlphp-module-infocard
  vulnerable_versions:
  - "<1.0.1"
  severity: medium
  package_manager: packagist
  cwe:
  - CWE-345
  credit:
  - Unknown
  references:
  - https://simplesamlphp.org/security/201612-03
  source_url: https://snyk.io/vuln/SNYK-PHP-SIMPLESAMLPHPSIMPLESAMLPHPMODULEINFOCARD-70167
