---
- id: friendsofphp:packagist:simplesamlphp/saml2:2018-03-02
  title: Incorrect signature validation
  affected_package: simplesamlphp/saml2
  vulnerable_versions:
  - "<1.10.6"
  - ">=2.0 <2.3.8"
  - ">=3.0 <3.1.4"
  package_manager: packagist
  cve:
  - CVE-2018-7711
  credit:
  - FriendsOfPHP
  references:
  - https://simplesamlphp.org/security/201803-01
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/stormpath/sdk/2017-11-20.yaml/blob/master/dompdf/dompdf/CVE-2014-5013.yaml/blob/master/dompdf/dompdf/CVE-2014-5011.yaml/blob/master/dompdf/dompdf/CVE-2014-2383.yaml/blob/master/dompdf/dompdf/CVE-2010-4879.yaml/blob/master/dompdf/dompdf/CVE-2014-5012.yaml/blob/master/phpunit/phpunit/CVE-2017-9841.yaml/blob/master/serluck/phpwhois/CVE-2015-5243.yaml/blob/master/sylius/sylius/2018-07-09.yaml/blob/master/sylius/admin-bundle/2018-07-09.yaml/blob/master/silverstripe/cms/SS-2015-005-1.yaml/blob/master/silverstripe/cms/SS-2015-003-1.yaml/blob/master/silverstripe/cms/SS-2015-008-1.yaml/blob/master/silverstripe/framework/SS-2015-014-1.yaml/blob/master/silverstripe/framework/SS-2015-027-1.yaml/blob/master/silverstripe/framework/SS-2015-015-1.yaml/blob/master/silverstripe/framework/SS-2016-003-1.yaml/blob/master/silverstripe/framework/SS-2015-026-1.yaml/blob/master/silverstripe/framework/SS-2015-009-1.yaml/blob/master/silverstripe/framework/SS-2015-012-1.yaml/blob/master/silverstripe/framework/SS-2015-013-1.yaml/blob/master/silverstripe/framework/SS-2015-010-1.yaml/blob/master/silverstripe/framework/SS-2015-016-1.yaml/blob/master/silverstripe/framework/SS-2015-004-1.yaml/blob/master/silverstripe/framework/SS-2015-006-1.yaml/blob/master/silverstripe/framework/SS-2015-011-1.yaml/blob/master/silverstripe/framework/SS-2015-028-1.yaml/blob/master/silverstripe/framework/SS-2014-015-1.yaml/blob/master/silverstripe/framework/SS-2015-007-1.yaml/blob/master/silverstripe/framework/SS-2014-017-1.yaml/blob/master/silverstripe/framework/SS-2016-002-1.yaml/blob/master/silverstripe/userforms/SS-2015-018-1.yaml/blob/master/silverstripe/forum/SS-2015-017-1.yaml/blob/master/amphp/artax/CVE-2016-5385.yaml/blob/master/amphp/artax/2017-05-09.yaml/blob/master/amphp/http/2018-03-15.yaml/blob/master/phpwhois/phpwhois/CVE-2015-5243.yaml/blob/master/socalnick/scn-social-auth/2015-01-15.yaml/blob/master/aws/aws-sdk-php/2015-08-31.yaml/blob/master/laravel/socialite/2015-08-03.yaml/blob/master/laravel/socialite/2015-07-23.yaml/blob/master/laravel/framework/CVE-2017-14775.yaml/blob/master/laravel/framework/2014-04-15.yaml/blob/master/laravel/framework/2014-05-20.yaml/blob/master/laravel/framework/CVE-2017-9303.yaml/blob/master/laravel/framework/2018-08-08-1.yaml/blob/master/laravel/framework/2018-03-30-1.yaml/blob/master/codeigniter/framework/2015-10-31-1.yaml/blob/master/codeigniter/framework/2016-07-26-1.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-18122.yaml/blob/master/simplesamlphp/simplesamlphp/201606-01.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2018-6520.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2016-3124.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12872.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2018-6521.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12868.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12870.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12873.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12871.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12869.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2016-9955.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12867.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-18121.yaml/blob/master/simplesamlphp/simplesamlphp/201710-01.yaml/blob/master/simplesamlphp/simplesamlphp-module-infocard/CVE-2017-12874.yaml/blob/master/simplesamlphp/saml2/CVE-2018-7711.yaml
- id: friendsofphp:packagist:simplesamlphp/saml2:2018-01-25
  title: Denial of Service in timestamp validation function
  affected_package: simplesamlphp/saml2
  vulnerable_versions:
  - "<1.10.4"
  - ">=2.0 <2.3.5"
  - ">=3.0 <3.1.1"
  package_manager: packagist
  cve:
  - CVE-2018-6519
  credit:
  - FriendsOfPHP
  references:
  - https://simplesamlphp.org/security/201801-01
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/stormpath/sdk/2017-11-20.yaml/blob/master/dompdf/dompdf/CVE-2014-5013.yaml/blob/master/dompdf/dompdf/CVE-2014-5011.yaml/blob/master/dompdf/dompdf/CVE-2014-2383.yaml/blob/master/dompdf/dompdf/CVE-2010-4879.yaml/blob/master/dompdf/dompdf/CVE-2014-5012.yaml/blob/master/phpunit/phpunit/CVE-2017-9841.yaml/blob/master/serluck/phpwhois/CVE-2015-5243.yaml/blob/master/sylius/sylius/2018-07-09.yaml/blob/master/sylius/admin-bundle/2018-07-09.yaml/blob/master/silverstripe/cms/SS-2015-005-1.yaml/blob/master/silverstripe/cms/SS-2015-003-1.yaml/blob/master/silverstripe/cms/SS-2015-008-1.yaml/blob/master/silverstripe/framework/SS-2015-014-1.yaml/blob/master/silverstripe/framework/SS-2015-027-1.yaml/blob/master/silverstripe/framework/SS-2015-015-1.yaml/blob/master/silverstripe/framework/SS-2016-003-1.yaml/blob/master/silverstripe/framework/SS-2015-026-1.yaml/blob/master/silverstripe/framework/SS-2015-009-1.yaml/blob/master/silverstripe/framework/SS-2015-012-1.yaml/blob/master/silverstripe/framework/SS-2015-013-1.yaml/blob/master/silverstripe/framework/SS-2015-010-1.yaml/blob/master/silverstripe/framework/SS-2015-016-1.yaml/blob/master/silverstripe/framework/SS-2015-004-1.yaml/blob/master/silverstripe/framework/SS-2015-006-1.yaml/blob/master/silverstripe/framework/SS-2015-011-1.yaml/blob/master/silverstripe/framework/SS-2015-028-1.yaml/blob/master/silverstripe/framework/SS-2014-015-1.yaml/blob/master/silverstripe/framework/SS-2015-007-1.yaml/blob/master/silverstripe/framework/SS-2014-017-1.yaml/blob/master/silverstripe/framework/SS-2016-002-1.yaml/blob/master/silverstripe/userforms/SS-2015-018-1.yaml/blob/master/silverstripe/forum/SS-2015-017-1.yaml/blob/master/amphp/artax/CVE-2016-5385.yaml/blob/master/amphp/artax/2017-05-09.yaml/blob/master/amphp/http/2018-03-15.yaml/blob/master/phpwhois/phpwhois/CVE-2015-5243.yaml/blob/master/socalnick/scn-social-auth/2015-01-15.yaml/blob/master/aws/aws-sdk-php/2015-08-31.yaml/blob/master/laravel/socialite/2015-08-03.yaml/blob/master/laravel/socialite/2015-07-23.yaml/blob/master/laravel/framework/CVE-2017-14775.yaml/blob/master/laravel/framework/2014-04-15.yaml/blob/master/laravel/framework/2014-05-20.yaml/blob/master/laravel/framework/CVE-2017-9303.yaml/blob/master/laravel/framework/2018-08-08-1.yaml/blob/master/laravel/framework/2018-03-30-1.yaml/blob/master/codeigniter/framework/2015-10-31-1.yaml/blob/master/codeigniter/framework/2016-07-26-1.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-18122.yaml/blob/master/simplesamlphp/simplesamlphp/201606-01.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2018-6520.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2016-3124.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12872.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2018-6521.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12868.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12870.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12873.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12871.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12869.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2016-9955.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12867.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-18121.yaml/blob/master/simplesamlphp/simplesamlphp/201710-01.yaml/blob/master/simplesamlphp/simplesamlphp-module-infocard/CVE-2017-12874.yaml/blob/master/simplesamlphp/saml2/CVE-2018-7711.yaml/blob/master/simplesamlphp/saml2/CVE-2018-6519.yaml
- id: friendsofphp:packagist:simplesamlphp/saml2:2018-02-26
  title: Incorrect signature validation
  affected_package: simplesamlphp/saml2
  vulnerable_versions:
  - "<1.10.5"
  - ">=2.0 <2.3.7"
  - ">=3.0 <3.1.3"
  package_manager: packagist
  cve:
  - CVE-2018-7644
  credit:
  - FriendsOfPHP
  references:
  - https://simplesamlphp.org/security/201802-01
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/stormpath/sdk/2017-11-20.yaml/blob/master/dompdf/dompdf/CVE-2014-5013.yaml/blob/master/dompdf/dompdf/CVE-2014-5011.yaml/blob/master/dompdf/dompdf/CVE-2014-2383.yaml/blob/master/dompdf/dompdf/CVE-2010-4879.yaml/blob/master/dompdf/dompdf/CVE-2014-5012.yaml/blob/master/phpunit/phpunit/CVE-2017-9841.yaml/blob/master/serluck/phpwhois/CVE-2015-5243.yaml/blob/master/sylius/sylius/2018-07-09.yaml/blob/master/sylius/admin-bundle/2018-07-09.yaml/blob/master/silverstripe/cms/SS-2015-005-1.yaml/blob/master/silverstripe/cms/SS-2015-003-1.yaml/blob/master/silverstripe/cms/SS-2015-008-1.yaml/blob/master/silverstripe/framework/SS-2015-014-1.yaml/blob/master/silverstripe/framework/SS-2015-027-1.yaml/blob/master/silverstripe/framework/SS-2015-015-1.yaml/blob/master/silverstripe/framework/SS-2016-003-1.yaml/blob/master/silverstripe/framework/SS-2015-026-1.yaml/blob/master/silverstripe/framework/SS-2015-009-1.yaml/blob/master/silverstripe/framework/SS-2015-012-1.yaml/blob/master/silverstripe/framework/SS-2015-013-1.yaml/blob/master/silverstripe/framework/SS-2015-010-1.yaml/blob/master/silverstripe/framework/SS-2015-016-1.yaml/blob/master/silverstripe/framework/SS-2015-004-1.yaml/blob/master/silverstripe/framework/SS-2015-006-1.yaml/blob/master/silverstripe/framework/SS-2015-011-1.yaml/blob/master/silverstripe/framework/SS-2015-028-1.yaml/blob/master/silverstripe/framework/SS-2014-015-1.yaml/blob/master/silverstripe/framework/SS-2015-007-1.yaml/blob/master/silverstripe/framework/SS-2014-017-1.yaml/blob/master/silverstripe/framework/SS-2016-002-1.yaml/blob/master/silverstripe/userforms/SS-2015-018-1.yaml/blob/master/silverstripe/forum/SS-2015-017-1.yaml/blob/master/amphp/artax/CVE-2016-5385.yaml/blob/master/amphp/artax/2017-05-09.yaml/blob/master/amphp/http/2018-03-15.yaml/blob/master/phpwhois/phpwhois/CVE-2015-5243.yaml/blob/master/socalnick/scn-social-auth/2015-01-15.yaml/blob/master/aws/aws-sdk-php/2015-08-31.yaml/blob/master/laravel/socialite/2015-08-03.yaml/blob/master/laravel/socialite/2015-07-23.yaml/blob/master/laravel/framework/CVE-2017-14775.yaml/blob/master/laravel/framework/2014-04-15.yaml/blob/master/laravel/framework/2014-05-20.yaml/blob/master/laravel/framework/CVE-2017-9303.yaml/blob/master/laravel/framework/2018-08-08-1.yaml/blob/master/laravel/framework/2018-03-30-1.yaml/blob/master/codeigniter/framework/2015-10-31-1.yaml/blob/master/codeigniter/framework/2016-07-26-1.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-18122.yaml/blob/master/simplesamlphp/simplesamlphp/201606-01.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2018-6520.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2016-3124.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12872.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2018-6521.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12868.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12870.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12873.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12871.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12869.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2016-9955.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12867.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-18121.yaml/blob/master/simplesamlphp/simplesamlphp/201710-01.yaml/blob/master/simplesamlphp/simplesamlphp-module-infocard/CVE-2017-12874.yaml/blob/master/simplesamlphp/saml2/CVE-2018-7711.yaml/blob/master/simplesamlphp/saml2/CVE-2018-6519.yaml/blob/master/simplesamlphp/saml2/CVE-2018-7644.yaml
- id: friendsofphp:packagist:simplesamlphp/saml2:2016-11-29
  title: Incorrect signature verification
  affected_package: simplesamlphp/saml2
  vulnerable_versions:
  - "<1.8.1"
  - ">=1.9.0 <1.9.1"
  - ">=1.10 <1.10.3"
  - ">=2.0 <2.3.3"
  package_manager: packagist
  cve:
  - CVE-2016-9814
  credit:
  - FriendsOfPHP
  references:
  - https://simplesamlphp.org/security/201612-01
  source_url: https://github.com/FriendsOfPHP/security-advisories/blob/master/stormpath/sdk/2017-11-20.yaml/blob/master/dompdf/dompdf/CVE-2014-5013.yaml/blob/master/dompdf/dompdf/CVE-2014-5011.yaml/blob/master/dompdf/dompdf/CVE-2014-2383.yaml/blob/master/dompdf/dompdf/CVE-2010-4879.yaml/blob/master/dompdf/dompdf/CVE-2014-5012.yaml/blob/master/phpunit/phpunit/CVE-2017-9841.yaml/blob/master/serluck/phpwhois/CVE-2015-5243.yaml/blob/master/sylius/sylius/2018-07-09.yaml/blob/master/sylius/admin-bundle/2018-07-09.yaml/blob/master/silverstripe/cms/SS-2015-005-1.yaml/blob/master/silverstripe/cms/SS-2015-003-1.yaml/blob/master/silverstripe/cms/SS-2015-008-1.yaml/blob/master/silverstripe/framework/SS-2015-014-1.yaml/blob/master/silverstripe/framework/SS-2015-027-1.yaml/blob/master/silverstripe/framework/SS-2015-015-1.yaml/blob/master/silverstripe/framework/SS-2016-003-1.yaml/blob/master/silverstripe/framework/SS-2015-026-1.yaml/blob/master/silverstripe/framework/SS-2015-009-1.yaml/blob/master/silverstripe/framework/SS-2015-012-1.yaml/blob/master/silverstripe/framework/SS-2015-013-1.yaml/blob/master/silverstripe/framework/SS-2015-010-1.yaml/blob/master/silverstripe/framework/SS-2015-016-1.yaml/blob/master/silverstripe/framework/SS-2015-004-1.yaml/blob/master/silverstripe/framework/SS-2015-006-1.yaml/blob/master/silverstripe/framework/SS-2015-011-1.yaml/blob/master/silverstripe/framework/SS-2015-028-1.yaml/blob/master/silverstripe/framework/SS-2014-015-1.yaml/blob/master/silverstripe/framework/SS-2015-007-1.yaml/blob/master/silverstripe/framework/SS-2014-017-1.yaml/blob/master/silverstripe/framework/SS-2016-002-1.yaml/blob/master/silverstripe/userforms/SS-2015-018-1.yaml/blob/master/silverstripe/forum/SS-2015-017-1.yaml/blob/master/amphp/artax/CVE-2016-5385.yaml/blob/master/amphp/artax/2017-05-09.yaml/blob/master/amphp/http/2018-03-15.yaml/blob/master/phpwhois/phpwhois/CVE-2015-5243.yaml/blob/master/socalnick/scn-social-auth/2015-01-15.yaml/blob/master/aws/aws-sdk-php/2015-08-31.yaml/blob/master/laravel/socialite/2015-08-03.yaml/blob/master/laravel/socialite/2015-07-23.yaml/blob/master/laravel/framework/CVE-2017-14775.yaml/blob/master/laravel/framework/2014-04-15.yaml/blob/master/laravel/framework/2014-05-20.yaml/blob/master/laravel/framework/CVE-2017-9303.yaml/blob/master/laravel/framework/2018-08-08-1.yaml/blob/master/laravel/framework/2018-03-30-1.yaml/blob/master/codeigniter/framework/2015-10-31-1.yaml/blob/master/codeigniter/framework/2016-07-26-1.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-18122.yaml/blob/master/simplesamlphp/simplesamlphp/201606-01.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2018-6520.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2016-3124.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12872.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2018-6521.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12868.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12870.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12873.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12871.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12869.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2016-9955.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-12867.yaml/blob/master/simplesamlphp/simplesamlphp/CVE-2017-18121.yaml/blob/master/simplesamlphp/simplesamlphp/201710-01.yaml/blob/master/simplesamlphp/simplesamlphp-module-infocard/CVE-2017-12874.yaml/blob/master/simplesamlphp/saml2/CVE-2018-7711.yaml/blob/master/simplesamlphp/saml2/CVE-2018-6519.yaml/blob/master/simplesamlphp/saml2/CVE-2018-7644.yaml/blob/master/simplesamlphp/saml2/CVE-2016-9814.yaml
- id: snykio:packagist:simplesamlphp/saml2:2018-03-01
  title: Authentication Bypass
  description: |+
    [simplesamlphp/saml2][1] is an application written in native PHP that
    deals with authentication.

    Affected versions of this package are vulnerable to Authentication
    Bypass. An incorrect check of return values in the signature validation
    utilities allows an attacker to get invalid signatures accepted as valid
    by forcing an error during validation.



    [1]: https://github.com/simplesamlphp/saml2
    \n[simplesamlphp/saml2][1] is an application written in native PHP that
    deals with authentication.

    Affected versions of this package are vulnerable to Authentication
    Bypass. An incorrect check of return values in the signature validation
    utilities allows an attacker to get invalid signatures accepted as valid
    by forcing an error during validation.



    [1]: https://github.com/simplesamlphp/saml2
    \n[simplesamlphp/saml2][1] is an application written in native PHP that
    deals with authentication.

    Affected versions of this package are vulnerable to Authentication
    Bypass. An incorrect check of return values in the signature validation
    utilities allows an attacker to get invalid signatures accepted as valid
    by forcing an error during validation.



    [1]: https://github.com/simplesamlphp/saml2
    \nSecurity Assertion Markup Language (SAML) is an XML-based markup
    language for security assertions regarding authentication and
    permissions, most commonly used for single sign-on (SSO) services.

    Some XML DOM traversal and canonicalization APIs may be inconsistent in
    handling of comments within XML nodes. Incorrect use of these APIs by
    some SAML libraries results in incorrect parsing of the inner text of
    XML nodes such that any inner text after the comment is lost prior to
    cryptographically signing the SAML message. Text after the comment
    therefore has no impact on the signature on the SAML message.

    A remote attacker can modify SAML content for a SAML service provider
    without invalidating the cryptographic signature, which may allow
    attackers to bypass primary authentication for the affected SAML service
    provider.

    \nSecurity Assertion Markup Language (SAML) is an XML-based markup
    language for security assertions regarding authentication and
    permissions, most commonly used for single sign-on (SSO) services.

    Some XML DOM traversal and canonicalization APIs may be inconsistent in
    handling of comments within XML nodes. Incorrect use of these APIs by
    some SAML libraries results in incorrect parsing of the inner text of
    XML nodes such that any inner text after the comment is lost prior to
    cryptographically signing the SAML message. Text after the comment
    therefore has no impact on the signature on the SAML message.

    A remote attacker can modify SAML content for a SAML service provider
    without invalidating the cryptographic signature, which may allow
    attackers to bypass primary authentication for the affected SAML service
    provider.

    \nSecurity Assertion Markup Language (SAML) is an XML-based markup
    language for security assertions regarding authentication and
    permissions, most commonly used for single sign-on (SSO) services.

    Some XML DOM traversal and canonicalization APIs may be inconsistent in
    handling of comments within XML nodes. Incorrect use of these APIs by
    some SAML libraries results in incorrect parsing of the inner text of
    XML nodes such that any inner text after the comment is lost prior to
    cryptographically signing the SAML message. Text after the comment
    therefore has no impact on the signature on the SAML message.

    A remote attacker can modify SAML content for a SAML service provider
    without invalidating the cryptographic signature, which may allow
    attackers to bypass primary authentication for the affected SAML service
    provider.

    \nSecurity Assertion Markup Language (SAML) is an XML-based markup
    language for security assertions regarding authentication and
    permissions, most commonly used for single sign-on (SSO) services.

    Some XML DOM traversal and canonicalization APIs may be inconsistent in
    handling of comments within XML nodes. Incorrect use of these APIs by
    some SAML libraries results in incorrect parsing of the inner text of
    XML nodes such that any inner text after the comment is lost prior to
    cryptographically signing the SAML message. Text after the comment
    therefore has no impact on the signature on the SAML message.

    A remote attacker can modify SAML content for a SAML service provider
    without invalidating the cryptographic signature, which may allow
    attackers to bypass primary authentication for the affected SAML service
    provider.

  affected_package: simplesamlphp/saml2
  vulnerable_versions:
  - "<1.10.6 || >=1.11 &&  <1.15.4 || >=2.0 &&  <2.3.8 || >=3.0 &&  <3.1.4"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2018-7711
  cwe:
  - CWE-347
  credit:
  - Unknown
  references:
  - https://simplesamlphp.org/security/201803-01
  - https://github.com/simplesamlphp/saml2/commit/4f6af7f69f29df8555a18b9bb7b646906b45924d
  source_url: https://snyk.io/vuln/SNYK-PHP-SIMPLESAMLPHPSAML2-72118
- id: snykio:packagist:simplesamlphp/saml2:2018-03-01
  title: Authentication Bypass
  description: |+
    [simplesamlphp/saml2][1] is an application written in native PHP that
    deals with authentication.

    Affected versions of this package are vulnerable to Authentication
    Bypass. An incorrect check of return values in the signature validation
    utilities allows an attacker to get invalid signatures accepted as valid
    by forcing an error during validation.



    [1]: https://github.com/simplesamlphp/saml2
    \n[simplesamlphp/saml2][1] is an application written in native PHP that
    deals with authentication.

    Affected versions of this package are vulnerable to Authentication
    Bypass. An incorrect check of return values in the signature validation
    utilities allows an attacker to get invalid signatures accepted as valid
    by forcing an error during validation.



    [1]: https://github.com/simplesamlphp/saml2
    \n[simplesamlphp/saml2][1] is an application written in native PHP that
    deals with authentication.

    Affected versions of this package are vulnerable to Authentication
    Bypass. An incorrect check of return values in the signature validation
    utilities allows an attacker to get invalid signatures accepted as valid
    by forcing an error during validation.



    [1]: https://github.com/simplesamlphp/saml2
    \nSecurity Assertion Markup Language (SAML) is an XML-based markup
    language for security assertions regarding authentication and
    permissions, most commonly used for single sign-on (SSO) services.

    Some XML DOM traversal and canonicalization APIs may be inconsistent in
    handling of comments within XML nodes. Incorrect use of these APIs by
    some SAML libraries results in incorrect parsing of the inner text of
    XML nodes such that any inner text after the comment is lost prior to
    cryptographically signing the SAML message. Text after the comment
    therefore has no impact on the signature on the SAML message.

    A remote attacker can modify SAML content for a SAML service provider
    without invalidating the cryptographic signature, which may allow
    attackers to bypass primary authentication for the affected SAML service
    provider.

    \nSecurity Assertion Markup Language (SAML) is an XML-based markup
    language for security assertions regarding authentication and
    permissions, most commonly used for single sign-on (SSO) services.

    Some XML DOM traversal and canonicalization APIs may be inconsistent in
    handling of comments within XML nodes. Incorrect use of these APIs by
    some SAML libraries results in incorrect parsing of the inner text of
    XML nodes such that any inner text after the comment is lost prior to
    cryptographically signing the SAML message. Text after the comment
    therefore has no impact on the signature on the SAML message.

    A remote attacker can modify SAML content for a SAML service provider
    without invalidating the cryptographic signature, which may allow
    attackers to bypass primary authentication for the affected SAML service
    provider.

    \nSecurity Assertion Markup Language (SAML) is an XML-based markup
    language for security assertions regarding authentication and
    permissions, most commonly used for single sign-on (SSO) services.

    Some XML DOM traversal and canonicalization APIs may be inconsistent in
    handling of comments within XML nodes. Incorrect use of these APIs by
    some SAML libraries results in incorrect parsing of the inner text of
    XML nodes such that any inner text after the comment is lost prior to
    cryptographically signing the SAML message. Text after the comment
    therefore has no impact on the signature on the SAML message.

    A remote attacker can modify SAML content for a SAML service provider
    without invalidating the cryptographic signature, which may allow
    attackers to bypass primary authentication for the affected SAML service
    provider.

    \nSecurity Assertion Markup Language (SAML) is an XML-based markup
    language for security assertions regarding authentication and
    permissions, most commonly used for single sign-on (SSO) services.

    Some XML DOM traversal and canonicalization APIs may be inconsistent in
    handling of comments within XML nodes. Incorrect use of these APIs by
    some SAML libraries results in incorrect parsing of the inner text of
    XML nodes such that any inner text after the comment is lost prior to
    cryptographically signing the SAML message. Text after the comment
    therefore has no impact on the signature on the SAML message.

    A remote attacker can modify SAML content for a SAML service provider
    without invalidating the cryptographic signature, which may allow
    attackers to bypass primary authentication for the affected SAML service
    provider.

  affected_package: simplesamlphp/saml2
  vulnerable_versions:
  - "<1.10.6 || >=2.0 &&  <2.3.8 || >=3.0 &&  <3.1.4"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-7711
  cwe:
  - CWE-287
  credit:
  - Cure53
  - John Maguire
  - Adam Goodman
  references:
  - https://simplesamlphp.org/security/201803-01
  - https://github.com/simplesamlphp/saml2/commit/4f6af7f69f29df8555a18b9bb7b646906b45924d
  source_url: https://snyk.io/vuln/SNYK-PHP-SIMPLESAMLPHPSAML2-72102
- id: snykio:packagist:simplesamlphp/saml2:2018-03-06
  title: Signature Validation Bypass
  description: |
    [simplesamlphp/saml2][1] is a PHP library for SAML2 related
    functionality.

    Affected versions of this package are vulnerable to Signature Validation
    Bypass. It allows a remote attacker to construct a crafted SAML
    assertion on behalf of an Identity Provider that would pass as
    cryptographically valid, thereby allows them to impersonate a user from
    that Identity Provider, aka a key confusion issue.



    [1]: https://github.com/simplesamlphp/saml2
    \n[simplesamlphp/saml2][1] is a PHP library for SAML2 related
    functionality.

    Affected versions of this package are vulnerable to Signature Validation
    Bypass. It allows a remote attacker to construct a crafted SAML
    assertion on behalf of an Identity Provider that would pass as
    cryptographically valid, thereby allows them to impersonate a user from
    that Identity Provider, aka a key confusion issue.



    [1]: https://github.com/simplesamlphp/saml2
    \n[simplesamlphp/saml2][1] is a PHP library for SAML2 related
    functionality.

    Affected versions of this package are vulnerable to Signature Validation
    Bypass. It allows a remote attacker to construct a crafted SAML
    assertion on behalf of an Identity Provider that would pass as
    cryptographically valid, thereby allows them to impersonate a user from
    that Identity Provider, aka a key confusion issue.



    [1]: https://github.com/simplesamlphp/saml2
  affected_package: simplesamlphp/saml2
  vulnerable_versions:
  - "<1.10.5 || >=2.0 &&  <2.3.7 || >=3.0 &&  <3.1.3"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2018-7644
  cwe:
  - CWE-347
  credit:
  - Cure53
  references:
  - https://simplesamlphp.org/security/201802-01
  source_url: https://snyk.io/vuln/SNYK-PHP-SIMPLESAMLPHPSAML2-72101
- id: snykio:packagist:simplesamlphp/saml2:2018-02-01
  title: Denial of Service (DoS)
  description: |+
    [simplesamlphp/saml2][1] is a library from SimpleSAMLphp.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). The attacker may send a large number of digits as the fraction of
    a second in a timestamp, and make the processing script choke while
    evaluating the regular expression.



    [1]: https://packagist.org/packages/simplesamlphp/saml2
    \n[simplesamlphp/saml2][1] is a library from SimpleSAMLphp.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). The attacker may send a large number of digits as the fraction of
    a second in a timestamp, and make the processing script choke while
    evaluating the regular expression.



    [1]: https://packagist.org/packages/simplesamlphp/saml2
    \n[simplesamlphp/saml2][1] is a library from SimpleSAMLphp.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). The attacker may send a large number of digits as the fraction of
    a second in a timestamp, and make the processing script choke while
    evaluating the regular expression.



    [1]: https://packagist.org/packages/simplesamlphp/saml2
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: simplesamlphp/saml2
  vulnerable_versions:
  - "<1.10.4 || >=2.0.0 &&  <2.3.5 || >=3.0.0 &&  <3.1.1"
  severity: medium
  package_manager: packagist
  cve:
  - CVE-2018-6519
  cwe:
  - CWE-400
  credit:
  - Cure53
  references:
  - https://simplesamlphp.org/security/201801-01
  - https://nvd.nist.gov/vuln/detail/CVE-2018-6519
  source_url: https://snyk.io/vuln/SNYK-PHP-SIMPLESAMLPHPSAML2-72011
- id: snykio:packagist:simplesamlphp/saml2:2016-11-29
  title: Incorrect Signature Verification
  description: "Affected versions of [`simplesamlphp/saml2`][1] are vulnerable to\nIncorrect
    signature verification.\n\nThe validateSignature method in the SAML2\\\\Utils
    class in SimpleSAMLphp\nbefore 1.14.10 and simplesamlphp/saml2 library before
    1.9.1, 1.10.x\nbefore 1.10.3, and 2.x before 2.3.3 allows remote attackers to
    spoof\nSAML responses or possibly cause a denial of service (memory\nconsumption)
    by leveraging improper conversion of return values to\nboolean.\n\n> The SAML2\\\\Utils
    class offers a set of methods that allow to verify an\n> XML digital signature
    against a given key. In particular, the\n> validateSignature() method receives
    a signature and a key to verify\n> it, and throws an exception in case there is
    any error, either caused\n> by incorrect input or an invalid signature. This method
    uses the\n> verify() method from the RobRichards\\\\XMLSecDSig class to verify
    the\n> signature with the given key, which in turn will end up calling\n> openssl\\_verify()
    depending on the signature algorithm used.\n\n> The openssl\\_verify() function
    returns 1 when the signature was\n> successfully verified, 0 if it failed to verify
    with the given key,\n> and -1 in case an error occurs. PHP allows translating
    numerical\n> values to boolean implicitly, with the following correspondences:\n>
    \n> * 0 equals false.\n> * Non-zero equals true. This means that an implicit conversion
    to\n>   boolean of the values returned by openssl\\_verify() will convert an\n>
    \  error state, signaled by the value -1, to a successful verification\n>   of
    the signature (represented by the boolean true).\n\n> The aforementioned validateSignature()
    method was performing an\n> implicit conversion to boolean of the values returned
    by the verify()\n> method, which subsequently will return the same output as\n>
    openssl\\_verify() under most circumstances. This means an error during\n> signature
    verification is treated as a successful verification by the\n> method.\n\n\n\n[1]:
    https://packagist.org/packages/simplesamlphp/saml2\n\\nAffected versions of [`simplesamlphp/saml2`][1]
    are vulnerable to\nIncorrect signature verification.\n\nThe validateSignature
    method in the SAML2\\\\Utils class in SimpleSAMLphp\nbefore 1.14.10 and simplesamlphp/saml2
    library before 1.9.1, 1.10.x\nbefore 1.10.3, and 2.x before 2.3.3 allows remote
    attackers to spoof\nSAML responses or possibly cause a denial of service (memory\nconsumption)
    by leveraging improper conversion of return values to\nboolean.\n\n> The SAML2\\\\Utils
    class offers a set of methods that allow to verify an\n> XML digital signature
    against a given key. In particular, the\n> validateSignature() method receives
    a signature and a key to verify\n> it, and throws an exception in case there is
    any error, either caused\n> by incorrect input or an invalid signature. This method
    uses the\n> verify() method from the RobRichards\\\\XMLSecDSig class to verify
    the\n> signature with the given key, which in turn will end up calling\n> openssl\\_verify()
    depending on the signature algorithm used.\n\n> The openssl\\_verify() function
    returns 1 when the signature was\n> successfully verified, 0 if it failed to verify
    with the given key,\n> and -1 in case an error occurs. PHP allows translating
    numerical\n> values to boolean implicitly, with the following correspondences:\n>
    \n> * 0 equals false.\n> * Non-zero equals true. This means that an implicit conversion
    to\n>   boolean of the values returned by openssl\\_verify() will convert an\n>
    \  error state, signaled by the value -1, to a successful verification\n>   of
    the signature (represented by the boolean true).\n\n> The aforementioned validateSignature()
    method was performing an\n> implicit conversion to boolean of the values returned
    by the verify()\n> method, which subsequently will return the same output as\n>
    openssl\\_verify() under most circumstances. This means an error during\n> signature
    verification is treated as a successful verification by the\n> method.\n\n\n\n[1]:
    https://packagist.org/packages/simplesamlphp/saml2\n\\nAffected versions of [`simplesamlphp/saml2`][1]
    are vulnerable to\nIncorrect signature verification.\n\nThe validateSignature
    method in the SAML2\\\\Utils class in SimpleSAMLphp\nbefore 1.14.10 and simplesamlphp/saml2
    library before 1.9.1, 1.10.x\nbefore 1.10.3, and 2.x before 2.3.3 allows remote
    attackers to spoof\nSAML responses or possibly cause a denial of service (memory\nconsumption)
    by leveraging improper conversion of return values to\nboolean.\n\n> The SAML2\\\\Utils
    class offers a set of methods that allow to verify an\n> XML digital signature
    against a given key. In particular, the\n> validateSignature() method receives
    a signature and a key to verify\n> it, and throws an exception in case there is
    any error, either caused\n> by incorrect input or an invalid signature. This method
    uses the\n> verify() method from the RobRichards\\\\XMLSecDSig class to verify
    the\n> signature with the given key, which in turn will end up calling\n> openssl\\_verify()
    depending on the signature algorithm used.\n\n> The openssl\\_verify() function
    returns 1 when the signature was\n> successfully verified, 0 if it failed to verify
    with the given key,\n> and -1 in case an error occurs. PHP allows translating
    numerical\n> values to boolean implicitly, with the following correspondences:\n>
    \n> * 0 equals false.\n> * Non-zero equals true. This means that an implicit conversion
    to\n>   boolean of the values returned by openssl\\_verify() will convert an\n>
    \  error state, signaled by the value -1, to a successful verification\n>   of
    the signature (represented by the boolean true).\n\n> The aforementioned validateSignature()
    method was performing an\n> implicit conversion to boolean of the values returned
    by the verify()\n> method, which subsequently will return the same output as\n>
    openssl\\_verify() under most circumstances. This means an error during\n> signature
    verification is treated as a successful verification by the\n> method.\n\n\n\n[1]:
    https://packagist.org/packages/simplesamlphp/saml2\n\\nAffected versions of [`simplesamlphp/saml2`][1]
    are vulnerable to\nIncorrect signature verification.\n\nThe validateSignature
    method in the SAML2\\\\Utils class in SimpleSAMLphp\nbefore 1.14.10 and simplesamlphp/saml2
    library before 1.9.1, 1.10.x\nbefore 1.10.3, and 2.x before 2.3.3 allows remote
    attackers to spoof\nSAML responses or possibly cause a denial of service (memory\nconsumption)
    by leveraging improper conversion of return values to\nboolean.\n\n> The SAML2\\\\Utils
    class offers a set of methods that allow to verify an\n> XML digital signature
    against a given key. In particular, the\n> validateSignature() method receives
    a signature and a key to verify\n> it, and throws an exception in case there is
    any error, either caused\n> by incorrect input or an invalid signature. This method
    uses the\n> verify() method from the RobRichards\\\\XMLSecDSig class to verify
    the\n> signature with the given key, which in turn will end up calling\n> openssl\\_verify()
    depending on the signature algorithm used.\n\n> The openssl\\_verify() function
    returns 1 when the signature was\n> successfully verified, 0 if it failed to verify
    with the given key,\n> and -1 in case an error occurs. PHP allows translating
    numerical\n> values to boolean implicitly, with the following correspondences:\n>
    \n> * 0 equals false.\n> * Non-zero equals true. This means that an implicit conversion
    to\n>   boolean of the values returned by openssl\\_verify() will convert an\n>
    \  error state, signaled by the value -1, to a successful verification\n>   of
    the signature (represented by the boolean true).\n\n> The aforementioned validateSignature()
    method was performing an\n> implicit conversion to boolean of the values returned
    by the verify()\n> method, which subsequently will return the same output as\n>
    openssl\\_verify() under most circumstances. This means an error during\n> signature
    verification is treated as a successful verification by the\n> method.\n\n\n\n[1]:
    https://packagist.org/packages/simplesamlphp/saml2\n\\nAffected versions of [`simplesamlphp/saml2`][1]
    are vulnerable to\nIncorrect signature verification.\n\nThe validateSignature
    method in the SAML2\\\\Utils class in SimpleSAMLphp\nbefore 1.14.10 and simplesamlphp/saml2
    library before 1.9.1, 1.10.x\nbefore 1.10.3, and 2.x before 2.3.3 allows remote
    attackers to spoof\nSAML responses or possibly cause a denial of service (memory\nconsumption)
    by leveraging improper conversion of return values to\nboolean.\n\n> The SAML2\\\\Utils
    class offers a set of methods that allow to verify an\n> XML digital signature
    against a given key. In particular, the\n> validateSignature() method receives
    a signature and a key to verify\n> it, and throws an exception in case there is
    any error, either caused\n> by incorrect input or an invalid signature. This method
    uses the\n> verify() method from the RobRichards\\\\XMLSecDSig class to verify
    the\n> signature with the given key, which in turn will end up calling\n> openssl\\_verify()
    depending on the signature algorithm used.\n\n> The openssl\\_verify() function
    returns 1 when the signature was\n> successfully verified, 0 if it failed to verify
    with the given key,\n> and -1 in case an error occurs. PHP allows translating
    numerical\n> values to boolean implicitly, with the following correspondences:\n>
    \n> * 0 equals false.\n> * Non-zero equals true. This means that an implicit conversion
    to\n>   boolean of the values returned by openssl\\_verify() will convert an\n>
    \  error state, signaled by the value -1, to a successful verification\n>   of
    the signature (represented by the boolean true).\n\n> The aforementioned validateSignature()
    method was performing an\n> implicit conversion to boolean of the values returned
    by the verify()\n> method, which subsequently will return the same output as\n>
    openssl\\_verify() under most circumstances. This means an error during\n> signature
    verification is treated as a successful verification by the\n> method.\n\n\n\n[1]:
    https://packagist.org/packages/simplesamlphp/saml2\n\\nAffected versions of [`simplesamlphp/saml2`][1]
    are vulnerable to\nIncorrect signature verification.\n\nThe validateSignature
    method in the SAML2\\\\Utils class in SimpleSAMLphp\nbefore 1.14.10 and simplesamlphp/saml2
    library before 1.9.1, 1.10.x\nbefore 1.10.3, and 2.x before 2.3.3 allows remote
    attackers to spoof\nSAML responses or possibly cause a denial of service (memory\nconsumption)
    by leveraging improper conversion of return values to\nboolean.\n\n> The SAML2\\\\Utils
    class offers a set of methods that allow to verify an\n> XML digital signature
    against a given key. In particular, the\n> validateSignature() method receives
    a signature and a key to verify\n> it, and throws an exception in case there is
    any error, either caused\n> by incorrect input or an invalid signature. This method
    uses the\n> verify() method from the RobRichards\\\\XMLSecDSig class to verify
    the\n> signature with the given key, which in turn will end up calling\n> openssl\\_verify()
    depending on the signature algorithm used.\n\n> The openssl\\_verify() function
    returns 1 when the signature was\n> successfully verified, 0 if it failed to verify
    with the given key,\n> and -1 in case an error occurs. PHP allows translating
    numerical\n> values to boolean implicitly, with the following correspondences:\n>
    \n> * 0 equals false.\n> * Non-zero equals true. This means that an implicit conversion
    to\n>   boolean of the values returned by openssl\\_verify() will convert an\n>
    \  error state, signaled by the value -1, to a successful verification\n>   of
    the signature (represented by the boolean true).\n\n> The aforementioned validateSignature()
    method was performing an\n> implicit conversion to boolean of the values returned
    by the verify()\n> method, which subsequently will return the same output as\n>
    openssl\\_verify() under most circumstances. This means an error during\n> signature
    verification is treated as a successful verification by the\n> method.\n\n\n\n[1]:
    https://packagist.org/packages/simplesamlphp/saml2\n"
  affected_package: simplesamlphp/saml2
  vulnerable_versions:
  - "<1.9.1 || >=1.10 &&  <1.10.3 || >=2.0 &&  <2.3.3"
  severity: high
  package_manager: packagist
  cve:
  - CVE-2016-9814
  cwe:
  - CWE-345
  credit:
  - artemdiverta
  references:
  - https://simplesamlphp.org/security/201612-01
  source_url: https://snyk.io/vuln/SNYK-PHP-SIMPLESAMLPHPSAML2-70159
