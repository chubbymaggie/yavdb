---
- id: snykio:pypi:werkzeug:40482
  title: Cross-site Scripting (XSS)
  description: |+
    [`werkzeug`][1] is the Swiss Army knife of Python web development.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks via the `plaintext` variable in the debug page.



    [1]: https://pypi.python.org/pypi/werkzeug
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: werkzeug
  vulnerable_versions:
  - "< 0.11.11"
  severity: medium
  package_manager: pypi
  cwe:
  - CWE-79
  disclosed_date: 2016-08-31
  created_date: 2016-08-31
  last_modified_date: 2016-08-31
  credit:
  - neargle
  references:
  - https://github.com/pallets/werkzeug/commit/1034edc7f901dd645ec6e462754111b39002bd65
  - https://github.com/pallets/werkzeug/pull/1001
  source_url: https://snyk.io/vuln/SNYK-PYTHON-WERKZEUG-40482
- id: snykio:pypi:werkzeug:40487
  title: Cross-site Scripting (XSS)
  description: |+
    [`werkzeug`][1] is the Swiss Army knife of Python web development.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks due to the lack of sanitization of the redirect url links.



    [1]: https://pypi.python.org/pypi/werkzeug
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: werkzeug
  vulnerable_versions:
  - "< 0.8.3"
  severity: medium
  package_manager: pypi
  cwe:
  - CWE-79
  disclosed_date: 2012-02-05
  created_date: 2012-02-05
  last_modified_date: 2012-02-05
  credit:
  - Unknown
  references:
  - https://github.com/pallets/werkzeug/commit/7b8d887d33c768a77f40dd15ff5ac6ebbbab25b9
  source_url: https://snyk.io/vuln/SNYK-PYTHON-WERKZEUG-40487
- id: snykio:pypi:werkzeug:40739
  title: HTTP Response Splitting
  description: |
    Affected versions of [`werkzeug`][1] are vulnerable to HTTP Response
    Splitting. It allows newline characters in values in the header. An
    attacker can leverage this to inject arbitrary headers and conduct HTTP
    response splitting attacks.



    [1]: https://pypi.python.org/pypi/werkzeug
  affected_package: werkzeug
  vulnerable_versions:
  - "< 0.8"
  severity: medium
  package_manager: pypi
  cwe:
  - CWE-113
  disclosed_date: 2011-09-25
  created_date: 2017-12-04
  last_modified_date: 2017-12-04
  credit:
  - Unknown
  references:
  - https://github.com/pallets/werkzeug/blob/master/CHANGES#L722
  - https://github.com/pallets/werkzeug/commit/694aae3ec2b73292ffe6ab960807bc8cf8474b81
  source_url: https://snyk.io/vuln/SNYK-PYTHON-WERKZEUG-40739
- id: snykio:pypi:werkzeug:42069
  title: Cross-site Scripting (XSS)
  description: |+
    [werkzeug][1] is a comprehensive WSGI web application library.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). It allows remote attackers to inject arbitrary web script or HTML
    via a field that contains an exception message.



    [1]: http://pypi.python.org/pypi/werkzeug
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: werkzeug
  vulnerable_versions:
  - "< 0.11.11"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2016-10516
  cwe:
  - CWE-79
  disclosed_date: 2016-08-31
  created_date: 2018-02-25
  last_modified_date: 2018-02-25
  credit:
  - Unknown
  references:
  - https://github.com/pallets/werkzeug/pull/1001
  - https://nvd.nist.gov/vuln/detail/CVE-2016-10516
  source_url: https://snyk.io/vuln/SNYK-PYTHON-WERKZEUG-42069
