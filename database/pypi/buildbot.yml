---
- id: snykio:pypi:buildbot:42151
  title: Cross-site Scripting (XSS)
  description: |+
    [buildbot][1] is an open-source continuous integration framework for
    automating software build, test, and release processes.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. A malicious user could inject arbitrary web script or
    HTML via unspecified vectors.



    [1]: https://pypi.org/project/buildbot/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: buildbot
  vulnerable_versions:
  - ">= 0.7.6 < 0.7.11p3"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2009-2959
  cwe:
  - CWE-79
  disclosed_date: 2009-08-25
  created_date: 2018-06-06
  last_modified_date: 2018-06-06
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2009-2959
  - https://www.securityfocus.com/bid/36100
  source_url: https://snyk.io/vuln/SNYK-PYTHON-BUILDBOT-42151
- id: snykio:pypi:buildbot:42177
  title: Timing Attack
  description: |
    [buildbot][1] is an open-source continuous integration framework for
    automating software build, test, and release processes.

    Affected versions of this package are vulnerable to Timing Attack. It
    implemented a character to character comparison `!=`, and not a time
    constant string comparison. An attacker can use this difference to
    perform a timing attack, essentially allowing them to guess the
    encryption key one character at a time.



    [1]: https://pypi.org/project/buildbot/
  affected_package: buildbot
  vulnerable_versions:
  - "< 1.3.0"
  severity: high
  package_manager: pypi
  cwe:
  - CWE-208
  disclosed_date: 2018-01-30
  created_date: 2018-08-02
  last_modified_date: 2018-08-02
  credit:
  - Unknown
  references:
  - https://github.com/buildbot/buildbot/commit/e159e4ed0a2fee9c7e41e81ae81333b0c9557256
  - https://github.com/buildbot/buildbot/issues/4180
  source_url: https://snyk.io/vuln/SNYK-PYTHON-BUILDBOT-42177
- id: snykio:pypi:buildbot:73642
  title: CRLF injection
  description: |
    [buildbot][1] is a continuous integration framework for automating
    software build, test, and release processes.

    Affected versions of this package are vulnerable to CRLF injection in
    the Location header of `/auth/login` and `/auth/logout` via the redirect
    parameter. This affects other web sites in the same domain.



    [1]: https://pypi.org/project/buildbot/
  affected_package: buildbot
  vulnerable_versions:
  - "< 1.8.1"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2019-7313
  cwe:
  - CWE-93
  disclosed_date: 2019-01-29
  created_date: 2019-02-03
  last_modified_date: 2019-02-03
  credit:
  - Michele Romano (mik317)
  references:
  - https://github.com/buildbot/buildbot/commit/f0ccd5fd572ea8223b48bd57d8c2548b2f7d3ecf
  - https://github.com/buildbot/buildbot/pull/4584
  - https://github.com/buildbot/buildbot/wiki/CRLF-injection-in-Buildbot-login-and-logout-redirect-code
  source_url: https://snyk.io/vuln/SNYK-PYTHON-BUILDBOT-73642
