---
- id: snykio:pypi:mistune:40679
  title: Cross-site Scripting (XSS)
  description: |+
    [`mistune`][1] is the fastest markdown parser in pure Python.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks.



    [1]: https://pypi.python.org/pypi/mistune
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: mistune
  vulnerable_versions:
  - "< 0.7.2"
  severity: medium
  package_manager: pypi
  cwe:
  - CWE-79
  disclosed_date: 2016-02-24
  created_date: 2017-10-15
  last_modified_date: 2017-10-15
  credit:
  - Nicolas G
  references:
  - https://github.com/lepture/mistune/blob/master/CHANGES.rst#version-072
  - https://github.com/lepture/mistune/issues/87
  - https://github.com/lepture/mistune/commit/6a9d23d2fa5d9c5a530b2658d634d663f05171cb
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MISTUNE-40679
- id: snykio:pypi:mistune:CVE-2017-15612
  title: Cross-site Scripting (XSS)
  description: |
    [`mistune`][1] is the fastest markdown parser in pure Python.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks.



    [1]: http://pypi.python.org/pypi/mistune
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/marked-xss-vulnerability/
  affected_package: mistune
  vulnerable_versions:
  - "< 0.8"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2017-15612
  cwe:
  - CWE-79
  disclosed_date: 2017-10-18
  created_date: 2017-11-19
  last_modified_date: 2017-11-19
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2017-15612
  - https://github.com/lepture/mistune/pull/140
  - https://github.com/lepture/mistune/commit/ab8f7de8bc78c2a88f9e01522b8a3a0aa8cd9416
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MISTUNE-40698
- id: snykio:pypi:mistune:CVE-2017-16876
  title: Cross-site Scripting (XSS)
  description: |
    [`mistune`][1] is the fastest markdown parser in pure Python.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: http://pypi.python.org/pypi/mistune
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/xss-attacks-the-next-wave/
  affected_package: mistune
  vulnerable_versions:
  - "< 0.8.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2017-16876
  cwe:
  - CWE-79
  disclosed_date: 2017-11-19
  created_date: 2017-12-07
  last_modified_date: 2017-12-07
  credit:
  - Unknown
  references:
  - https://github.com/lepture/mistune/commit/5f06d724bc05580e7f203db2d4a4905fc1127f98
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MISTUNE-40765
