---
- id: snykio:pypi:django:2007-10-26
  title: Denial of Service (DoS)
  description: |+
    [django][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design. Thanks for checking it out.

    Affected versions of this package are vulnerable to Denial of Service.
    An attacker may send a large amount of HTTP requests with large
    Accept-Language headers, causing a high memory consumption in the
    server.



    [1]: https://pypi.org/project/Django/
    \n[django][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design. Thanks for checking it out.

    Affected versions of this package are vulnerable to Denial of Service.
    An attacker may send a large amount of HTTP requests with large
    Accept-Language headers, causing a high memory consumption in the
    server.



    [1]: https://pypi.org/project/Django/
    \n[django][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design. Thanks for checking it out.

    Affected versions of this package are vulnerable to Denial of Service.
    An attacker may send a large amount of HTTP requests with large
    Accept-Language headers, causing a high memory consumption in the
    server.



    [1]: https://pypi.org/project/Django/
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 0.91.1"
  - ">= 0.95 < 0.95.1"
  - ">= 0.96 < 0.96.1"
  severity: low
  package_manager: pypi
  cve:
  - CVE-2007-5712
  cwe:
  - CWE-399
  credit:
  - Unknown
  references:
  - https://www.djangoproject.com/weblog/2007/oct/26/security-fix/
  - https://nvd.nist.gov/vuln/detail/CVE-2007-5712
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-42158
- id: snykio:pypi:django:2010-09-09
  title: Cross-site Scripting (XSS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. It allows remote attackers to inject arbitrary web script
    or HTML via a `csrfmiddlewaretoken` (aka `csrf_token`) cookie.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. It allows remote attackers to inject arbitrary web script
    or HTML via a `csrfmiddlewaretoken` (aka `csrf_token`) cookie.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. It allows remote attackers to inject arbitrary web script
    or HTML via a `csrfmiddlewaretoken` (aka `csrf_token`) cookie.



    [1]: https://pypi.python.org/pypi/django
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: django
  vulnerable_versions:
  - ">= 1.2 < 1.2.2"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2010-3082
  cwe:
  - CWE-79
  credit:
  - Jeff Balogh
  references:
  - http://www.djangoproject.com/weblog/2010/sep/08/security-release/
  - https://bugzilla.redhat.com/show_bug.cgi?id=632239
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-3082
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40053
- id: snykio:pypi:django:2010-12-22
  title: Information Exposure
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package expose sensitive information due to
    not properly restricting the use of a query string that performs certain
    object filtering. An attacker may obtain sensitive information via a
    series of requests containing regular expressions, as demonstrated by a
    `created_by__password__regex` parameter.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package expose sensitive information due to
    not properly restricting the use of a query string that performs certain
    object filtering. An attacker may obtain sensitive information via a
    series of requests containing regular expressions, as demonstrated by a
    `created_by__password__regex` parameter.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package expose sensitive information due to
    not properly restricting the use of a query string that performs certain
    object filtering. An attacker may obtain sensitive information via a
    series of requests containing regular expressions, as demonstrated by a
    `created_by__password__regex` parameter.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.1.3"
  - ">= 1.2 < 1.2.4"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2010-4534
  cwe:
  - CWE-264
  credit:
  - Adam Baldwin
  references:
  - http://www.djangoproject.com/weblog/2010/dec/22/security/
  - https://github.com/django/django/commit/732198ed5c
  - https://bugzilla.redhat.com/show_bug.cgi?id=665373
  - http://www.openwall.com/lists/oss-security/2011/01/03/5
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-4534
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40055
- id: snykio:pypi:django:2010-12-22
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The length of a string representing a base36 timestamp
    was not validated, allowing remote attackers to cause a denial of
    service (resource consumption) via a URL that specifies a large base36
    integer.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The length of a string representing a base36 timestamp
    was not validated, allowing remote attackers to cause a denial of
    service (resource consumption) via a URL that specifies a large base36
    integer.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The length of a string representing a base36 timestamp
    was not validated, allowing remote attackers to cause a denial of
    service (resource consumption) via a URL that specifies a large base36
    integer.



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 1.1.3"
  - ">= 1.2 < 1.2.4"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2010-4535
  cwe:
  - CWE-20
  credit:
  - Paul McMillan
  references:
  - http://www.djangoproject.com/weblog/2010/dec/22/security
  - https://github.com/django/django/commit/6819be1ea1
  - https://bugzilla.redhat.com/show_bug.cgi?id=665373
  - http://www.openwall.com/lists/oss-security/2011/01/03/5
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2010-4535
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40056
- id: snykio:pypi:django:2011-02-08
  title: Cross-site Request Forgery (CSRF)
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF) attacks. It didn\'t properly validate HTTP requests
    containing an `X-Requested-With` header, which makes it easier for
    remote attackers to bypass CSRF protection with forged AJAX requests
    that leverage a \"combination of browser plugins and redirects\".



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF) attacks. It didn\'t properly validate HTTP requests
    containing an `X-Requested-With` header, which makes it easier for
    remote attackers to bypass CSRF protection with forged AJAX requests
    that leverage a \"combination of browser plugins and redirects\".



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF) attacks. It didn\'t properly validate HTTP requests
    containing an `X-Requested-With` header, which makes it easier for
    remote attackers to bypass CSRF protection with forged AJAX requests
    that leverage a \"combination of browser plugins and redirects\".



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.1.4"
  - ">= 1.2 < 1.2.5"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2011-0696
  cwe:
  - CWE-352
  credit:
  - Michael Koziarski
  references:
  - http://www.djangoproject.com/weblog/2011/feb/08/security/
  - http://openwall.com/lists/oss-security/2011/02/09/6
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-0696
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40058
- id: snykio:pypi:django:2011-02-08
  title: Cross-site Scripting (XSS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. A filename associated with a file upload was not escaped
    before rendering.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. A filename associated with a file upload was not escaped
    before rendering.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. A filename associated with a file upload was not escaped
    before rendering.



    [1]: https://pypi.python.org/pypi/django
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: django
  vulnerable_versions:
  - "< 1.1.4"
  - ">= 1.2 < 1.2.5"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2011-0697
  cwe:
  - CWE-79
  credit:
  - e.generalov
  references:
  - http://www.djangoproject.com/weblog/2011/feb/08/security/
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-0697
  - https://bugzilla.redhat.com/show_bug.cgi?id=676359
  - http://openwall.com/lists/oss-security/2011/02/09/6
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40059
- id: snykio:pypi:django:2011-02-08
  title: Directory Traversal
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Directory Traversal
    on Windows. If a `/` (slash) is present in a session cookie, an attacker
    may be able to read or execute files



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Directory Traversal
    on Windows. If a `/` (slash) is present in a session cookie, an attacker
    may be able to read or execute files



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Directory Traversal
    on Windows. If a `/` (slash) is present in a session cookie, an attacker
    may be able to read or execute files



    [1]: https://pypi.python.org/pypi/django
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: django
  vulnerable_versions:
  - "< 1.1.4"
  - ">= 1.2 < 1.2.5"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2011-0698
  cwe:
  - CWE-22
  credit:
  - Paul McMillan
  references:
  - http://www.djangoproject.com/weblog/2011/feb/08/security/
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-0698
  - http://openwall.com/lists/oss-security/2011/02/09/6
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40060
- id: snykio:pypi:django:2011-09-11
  title: Session Manipulation
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Session
    Manipulation. It stored session data in the cache using the root
    namespace for both session identifiers and application-data keys. This
    allows remote attackers to modify a session by triggering use of a key
    that is equal to that session\'s identifier.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Session
    Manipulation. It stored session data in the cache using the root
    namespace for both session identifiers and application-data keys. This
    allows remote attackers to modify a session by triggering use of a key
    that is equal to that session\'s identifier.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Session
    Manipulation. It stored session data in the cache using the root
    namespace for both session identifiers and application-data keys. This
    allows remote attackers to modify a session by triggering use of a key
    that is equal to that session\'s identifier.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.2.7"
  - ">= 1.3 < 1.3.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2011-4136
  cwe:
  - CWE-20
  credit:
  - Paul McMillan
  references:
  - https://www.djangoproject.com/weblog/2011/sep/09/security-releases-issued/
  - https://www.djangoproject.com/weblog/2011/sep/10/127/
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-4136
  - http://openwall.com/lists/oss-security/2011/09/11/1
  - https://bugzilla.redhat.com/show_bug.cgi?id=737366
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40079
- id: snykio:pypi:django:2011-09-11
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    attacks. The `verify_exists` functionality in the `URLField`
    implementation relies on Python libraries that attempt access to an
    arbitrary URL with no timeout. This allows remote attackers to cause a
    high resource consumption with a URL that can cause a timeout (a TCP
    connection with no application data sent, or a large amount of
    application data).



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    attacks. The `verify_exists` functionality in the `URLField`
    implementation relies on Python libraries that attempt access to an
    arbitrary URL with no timeout. This allows remote attackers to cause a
    high resource consumption with a URL that can cause a timeout (a TCP
    connection with no application data sent, or a large amount of
    application data).



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    attacks. The `verify_exists` functionality in the `URLField`
    implementation relies on Python libraries that attempt access to an
    arbitrary URL with no timeout. This allows remote attackers to cause a
    high resource consumption with a URL that can cause a timeout (a TCP
    connection with no application data sent, or a large amount of
    application data).



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 1.2.7"
  - ">= 1.3 < 1.3.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2011-4137
  cwe:
  - CWE-399
  credit:
  - Paul McMillan
  references:
  - https://www.djangoproject.com/weblog/2011/sep/09/security-releases-issued/
  - https://www.djangoproject.com/weblog/2011/sep/10/127/
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-4137
  - http://openwall.com/lists/oss-security/2011/09/11/1
  - https://bugzilla.redhat.com/show_bug.cgi?id=737366
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40081
- id: snykio:pypi:django:2011-09-11
  title: Arbitrary Request Generation
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable due to lack of request
    validation. The `verify_exists` functionality in the `URLField`
    originally tests a URL\'s validity through a HEAD request, but then uses
    a GET request for the new target URL in the case of a redirect. This may
    allow remote attackers to trigger arbitrary GET requests with an
    unintended source IP address via a crafted Location header.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable due to lack of request
    validation. The `verify_exists` functionality in the `URLField`
    originally tests a URL\'s validity through a HEAD request, but then uses
    a GET request for the new target URL in the case of a redirect. This may
    allow remote attackers to trigger arbitrary GET requests with an
    unintended source IP address via a crafted Location header.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable due to lack of request
    validation. The `verify_exists` functionality in the `URLField`
    originally tests a URL\'s validity through a HEAD request, but then uses
    a GET request for the new target URL in the case of a redirect. This may
    allow remote attackers to trigger arbitrary GET requests with an
    unintended source IP address via a crafted Location header.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.2.7"
  - ">= 1.3 < 1.3.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2011-4138
  cwe:
  - CWE-20
  credit:
  - Paul McMillan
  references:
  - https://www.djangoproject.com/weblog/2011/sep/09/security-releases-issued/
  - https://www.djangoproject.com/weblog/2011/sep/10/127/
  - http://openwall.com/lists/oss-security/2011/09/11/1
  - https://bugzilla.redhat.com/show_bug.cgi?id=737366
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-4138
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40082
- id: snykio:pypi:django:2011-09-11
  title: Cache Poisoning
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cache Poisoning. It
    used a request\'s HTTP Host header to construct a full URL. An attacker
    can submit a request with a Host header of his or her choice, receive a
    response which constructs URLs using that Host header, and If that
    response is cached, further requests will be served out of cache using
    URLs containing the attacker\'s host of choice.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cache Poisoning. It
    used a request\'s HTTP Host header to construct a full URL. An attacker
    can submit a request with a Host header of his or her choice, receive a
    response which constructs URLs using that Host header, and If that
    response is cached, further requests will be served out of cache using
    URLs containing the attacker\'s host of choice.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cache Poisoning. It
    used a request\'s HTTP Host header to construct a full URL. An attacker
    can submit a request with a Host header of his or her choice, receive a
    response which constructs URLs using that Host header, and If that
    response is cached, further requests will be served out of cache using
    URLs containing the attacker\'s host of choice.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.2.7"
  - ">= 1.3 < 1.3.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2011-4139
  cwe:
  - CWE-20
  credit:
  - Django Core Development Team
  references:
  - https://www.djangoproject.com/weblog/2011/sep/09/security-releases-issued/
  - https://www.djangoproject.com/weblog/2011/sep/10/127/
  - http://openwall.com/lists/oss-security/2011/09/11/1
  - https://bugzilla.redhat.com/show_bug.cgi?id=737366
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-4139
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40083
- id: snykio:pypi:django:2011-09-11
  title: Cross-site Request Forgery (CSRF)
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF). The CSRF protection mechanism does not properly handle
    web-server configurations supporting arbitrary HTTP Host headers, which
    allows remote attackers to trigger unauthenticated forged requests via
    vectors involving a DNS CNAME record and a web page containing
    JavaScript code.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF). The CSRF protection mechanism does not properly handle
    web-server configurations supporting arbitrary HTTP Host headers, which
    allows remote attackers to trigger unauthenticated forged requests via
    vectors involving a DNS CNAME record and a web page containing
    JavaScript code.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF). The CSRF protection mechanism does not properly handle
    web-server configurations supporting arbitrary HTTP Host headers, which
    allows remote attackers to trigger unauthenticated forged requests via
    vectors involving a DNS CNAME record and a web page containing
    JavaScript code.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.2.7"
  - ">= 1.3 < 1.3.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2011-4140
  cwe:
  - CWE-352
  credit:
  - Mozilla
  references:
  - https://www.djangoproject.com/weblog/2011/sep/09/security-releases-issued/
  - https://www.djangoproject.com/weblog/2011/sep/10/127/
  - http://openwall.com/lists/oss-security/2011/09/11/1
  - https://bugzilla.redhat.com/show_bug.cgi?id=737366
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-4140
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40084
- id: snykio:pypi:django:2011-09-11
  title: Information Exposure
  description: |
    [`Django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Information
    Exposure. When the `DEBUG` is set to `True`, Exceptions generate a
    formatted error page, including the full traceback and a display of the
    HTTP request and relevant settings. Sensitive settings are obscured in
    this display, but the data submitted with the HTTP request is not. An
    error in a login view could result in a DEBUG page displaying the
    plain-text password (from the POST data).



    [1]: https://pypi.python.org/pypi/Django
    \n[`Django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Information
    Exposure. When the `DEBUG` is set to `True`, Exceptions generate a
    formatted error page, including the full traceback and a display of the
    HTTP request and relevant settings. Sensitive settings are obscured in
    this display, but the data submitted with the HTTP request is not. An
    error in a login view could result in a DEBUG page displaying the
    plain-text password (from the POST data).



    [1]: https://pypi.python.org/pypi/Django
    \n[`Django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Information
    Exposure. When the `DEBUG` is set to `True`, Exceptions generate a
    formatted error page, including the full traceback and a display of the
    HTTP request and relevant settings. Sensitive settings are obscured in
    this display, but the data submitted with the HTTP request is not. An
    error in a login view could result in a DEBUG page displaying the
    plain-text password (from the POST data).



    [1]: https://pypi.python.org/pypi/Django
  affected_package: django
  vulnerable_versions:
  - "< 1.2.7"
  - ">= 1.3 < 1.3.1"
  severity: low
  package_manager: pypi
  cwe:
  - CWE-352
  credit:
  - Julien Phalip
  references:
  - https://www.djangoproject.com/weblog/2011/sep/09/security-releases-issued/
  - https://www.djangoproject.com/weblog/2011/sep/10/127/
  - http://openwall.com/lists/oss-security/2011/09/11/1
  - https://bugzilla.redhat.com/show_bug.cgi?id=737366
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40085
- id: snykio:pypi:django:2012-06-30
  title: Cross-site Scripting (XSS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The `HttpResponseRedirect` and `HttpResponsePermanentRedirect`
    classes do not validate the scheme of a redirect target, allowing
    attackers to use Data: URLs to conduct an attack.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The `HttpResponseRedirect` and `HttpResponsePermanentRedirect`
    classes do not validate the scheme of a redirect target, allowing
    attackers to use Data: URLs to conduct an attack.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The `HttpResponseRedirect` and `HttpResponsePermanentRedirect`
    classes do not validate the scheme of a redirect target, allowing
    attackers to use Data: URLs to conduct an attack.



    [1]: https://pypi.python.org/pypi/django
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: django
  vulnerable_versions:
  - "< 1.3.2"
  - ">= 1.4 < 1.4.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2012-3442
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://www.djangoproject.com/weblog/2012/jul/30/security-releases-issued/
  - http://www.openwall.com/lists/oss-security/2012/07/31/2
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-3442
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40098
- id: snykio:pypi:django:2012-06-30
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The `ImageField` class in the form system completely
    decompresses image data during image validation, which allows remote
    attackers to cause a denial of service (memory consumption) by uploading
    a malicious image file.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The `ImageField` class in the form system completely
    decompresses image data during image validation, which allows remote
    attackers to cause a denial of service (memory consumption) by uploading
    a malicious image file.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The `ImageField` class in the form system completely
    decompresses image data during image validation, which allows remote
    attackers to cause a denial of service (memory consumption) by uploading
    a malicious image file.



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 1.3.2"
  - ">= 1.4 < 1.4.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2012-3443
  cwe:
  - CWE-20
  credit:
  - Unknown
  references:
  - https://www.djangoproject.com/weblog/2012/jul/30/security-releases-issued/
  - http://www.openwall.com/lists/oss-security/2012/07/31/2
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-3443
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40099
- id: snykio:pypi:django:2012-06-30
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The `get_image_dimensions` function in the image-handling
    functionality uses a constant chunk size in all attempts to determine
    dimensions, which allows remote attackers to cause a high process or
    thread consumption via a large TIFF image.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The `get_image_dimensions` function in the image-handling
    functionality uses a constant chunk size in all attempts to determine
    dimensions, which allows remote attackers to cause a high process or
    thread consumption via a large TIFF image.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The `get_image_dimensions` function in the image-handling
    functionality uses a constant chunk size in all attempts to determine
    dimensions, which allows remote attackers to cause a high process or
    thread consumption via a large TIFF image.



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 1.3.2"
  - ">= 1.4 < 1.4.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2012-3444
  cwe:
  - CWE-119
  credit:
  - Jeroen Dekkers
  references:
  - https://www.djangoproject.com/weblog/2012/jul/30/security-releases-issued/
  - http://www.openwall.com/lists/oss-security/2012/07/31/2
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-3444
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40100
- id: snykio:pypi:django:2012-10-17
  title: Host Header Poisoning
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Host Header
    Poisoning. The `django.http.HttpRequest.get_host` function incorrectly
    handled username/password information in the header. This allows remote
    attackers to generate and display arbitrary URLs via crafted username
    and password Host header values.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Host Header
    Poisoning. The `django.http.HttpRequest.get_host` function incorrectly
    handled username/password information in the header. This allows remote
    attackers to generate and display arbitrary URLs via crafted username
    and password Host header values.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Host Header
    Poisoning. The `django.http.HttpRequest.get_host` function incorrectly
    handled username/password information in the header. This allows remote
    attackers to generate and display arbitrary URLs via crafted username
    and password Host header values.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.3.4"
  - ">= 1.4 < 1.4.2"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2012-4520
  cwe:
  - CWE-20
  credit:
  - James Kettle
  references:
  - https://www.djangoproject.com/weblog/2012/oct/17/security/
  - https://bugzilla.redhat.com/show_bug.cgi?id=865164
  - https://github.com/django/django/commit/b45c377f8f488955e0c7069cad3f3dd21910b071
  - https://github.com/django/django/commit/92d3430f12171f16f566c9050c40feefb830a4a3
  - https://github.com/django/django/commit/9305c0e12d43c4df999c3301a1f0c742264a657e
  - http://www.openwall.com/lists/oss-security/2012/10/30/4
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-4520
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40104
- id: snykio:pypi:django:2013-03-21
  title: XML External Entity (XXE) Injection
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to XML External Entity
    (XXE) attacks. An attacker may be able to read arbitrary files via an
    XML external entity declaration in conjunction with an entity reference.
    This vulnerability is related to CVE-2013-1665.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to XML External Entity
    (XXE) attacks. An attacker may be able to read arbitrary files via an
    XML external entity declaration in conjunction with an entity reference.
    This vulnerability is related to CVE-2013-1665.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to XML External Entity
    (XXE) attacks. An attacker may be able to read arbitrary files via an
    XML external entity declaration in conjunction with an entity reference.
    This vulnerability is related to CVE-2013-1665.



    [1]: https://pypi.python.org/pypi/django
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: django
  vulnerable_versions:
  - "< 1.3.6"
  - ">= 1.4 < 1.4.4"
  severity: medium
  package_manager: pypi
  cwe:
  - CWE-611
  credit:
  - Michael Koziarski
  references:
  - https://www.djangoproject.com/weblog/2013/feb/19/security/
  - http://rhn.redhat.com/errata/RHSA-2013-0670.html
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-1665
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40175
- id: snykio:pypi:django:2013-03-21
  title: Information Exposure
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Information
    Exposure. The administrative interface did not check permissions for the
    history view, which allows remote authenticated administrators to obtain
    sensitive object history information.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Information
    Exposure. The administrative interface did not check permissions for the
    history view, which allows remote authenticated administrators to obtain
    sensitive object history information.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Information
    Exposure. The administrative interface did not check permissions for the
    history view, which allows remote authenticated administrators to obtain
    sensitive object history information.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.3.6"
  - ">= 1.4 < 1.4.4"
  severity: low
  package_manager: pypi
  cve:
  - CVE-2013-0305
  cwe:
  - CWE-200
  credit:
  - Orange Tsai
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-0305
  - http://rhn.redhat.com/errata/RHSA-2013-0670.html
  - https://www.djangoproject.com/weblog/2013/feb/19/security/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40172
- id: snykio:pypi:django:2013-03-21
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The form library allows remote attackers to bypass
    intended resource limits for formsets by modifying the `max_num`
    parameter and cause high memory consumption, or trigger server errors.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The form library allows remote attackers to bypass
    intended resource limits for formsets by modifying the `max_num`
    parameter and cause high memory consumption, or trigger server errors.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The form library allows remote attackers to bypass
    intended resource limits for formsets by modifying the `max_num`
    parameter and cause high memory consumption, or trigger server errors.



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 1.3.6"
  - ">= 1.4 < 1.4.4"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2013-0306
  cwe:
  - CWE-189
  credit:
  - Mozilla
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-0306
  - http://rhn.redhat.com/errata/RHSA-2013-0670.html
  - https://www.djangoproject.com/weblog/2013/feb/19/security/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40173
- id: snykio:pypi:django:2013-08-13
  title: Cross-site Scripting (XSS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. The `AdminURLFieldWidget` widget in allows remote
    attackers to inject arbitrary web script or HTML via a URLField.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. The `AdminURLFieldWidget` widget in allows remote
    attackers to inject arbitrary web script or HTML via a URLField.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. The `AdminURLFieldWidget` widget in allows remote
    attackers to inject arbitrary web script or HTML via a URLField.



    [1]: https://pypi.python.org/pypi/django
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: django
  vulnerable_versions:
  - "< 1.4.6"
  - ">= 1.5 < 1.5.2"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2013-4249
  cwe:
  - CWE-79
  credit:
  - Łukasz Langa
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-4249
  - http://seclists.org/oss-sec/2013/q3/369
  - https://github.com/django/django/commit/90363e388c61874add3f3557ee654a996ec75d78
  - https://www.djangoproject.com/weblog/2013/aug/13/security-releases-issued
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40176
- id: snykio:pypi:django:2013-08-13
  title: Cross-site Scripting (XSS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. The `is_safe_url` function treats a URL\'s scheme\'s like
    `javascript: scheme` as safe even if it is not HTTP or HTTPS



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. The `is_safe_url` function treats a URL\'s scheme\'s like
    `javascript: scheme` as safe even if it is not HTTP or HTTPS



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. The `is_safe_url` function treats a URL\'s scheme\'s like
    `javascript: scheme` as safe even if it is not HTTP or HTTPS



    [1]: https://pypi.python.org/pypi/django
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: django
  vulnerable_versions:
  - "< 1.4.6"
  - ">= 1.5 < 1.5.2"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2013-6044
  cwe:
  - CWE-79
  credit:
  - Nick Bruun
  references:
  - https://www.djangoproject.com/weblog/2013/aug/13/security-releases-issued
  - http://seclists.org/oss-sec/2013/q3/369
  - https://github.com/django/django/commit/1a274ccd6bc1afbdac80344c9b6e5810c1162b5f
  - https://github.com/django/django/commit/ec67af0bd609c412b76eaa4cc89968a2a8e5ad6a
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-6044
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40177
- id: snykio:pypi:django:2013-09-15
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The authentication framework (`django.contrib.auth`)
    hashes passwords with a function that does repeated rounds of
    computation before finishing. If long password is entered, it may cause
    high CPU consumption. An attacker may send many of these passwords to be
    hashed and cause a denial of service.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The authentication framework (`django.contrib.auth`)
    hashes passwords with a function that does repeated rounds of
    computation before finishing. If long password is entered, it may cause
    high CPU consumption. An attacker may send many of these passwords to be
    hashed and cause a denial of service.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The authentication framework (`django.contrib.auth`)
    hashes passwords with a function that does repeated rounds of
    computation before finishing. If long password is entered, it may cause
    high CPU consumption. An attacker may send many of these passwords to be
    hashed and cause a denial of service.



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 1.4.8"
  - ">= 1.5 < 1.5.4"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2013-1443
  cwe:
  - CWE-287
  credit:
  - Josh Wright
  references:
  - https://www.djangoproject.com/weblog/2013/sep/15/security/
  - http://python.6.x6.nabble.com/Set-a-reasonable-upper-bound-on-password-length-td5032218.html
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-1443
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40220
- id: snykio:pypi:django:2013-11-14
  title: Directory Traversal
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Directory Traversal
    attacks. In the ssi template tag, the `ALLOWED_INCLUDE_ROOTS` setting is
    a path that, with the use of `..` (dot dot), allows an attacker to
    access files for reading.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Directory Traversal
    attacks. In the ssi template tag, the `ALLOWED_INCLUDE_ROOTS` setting is
    a path that, with the use of `..` (dot dot), allows an attacker to
    access files for reading.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Directory Traversal
    attacks. In the ssi template tag, the `ALLOWED_INCLUDE_ROOTS` setting is
    a path that, with the use of `..` (dot dot), allows an attacker to
    access files for reading.



    [1]: https://pypi.python.org/pypi/django
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
    \nA Directory Traversal attack (also known as path traversal) aims to
    access files and directories that are stored outside the intended
    folder. By manipulating files with \"dot-dot-slash (../)\" sequences and
    its variations, or by using absolute file paths, it may be possible to
    access arbitrary files and directories stored on file system, including
    application source code, configuration, and other critical system files.

    Directory Traversal vulnerabilities can be generally divided into two
    types:

    * **Information Disclosure**\: Allows the attacker to gain information
      about the folder structure or read the contents of sensitive files on
      the system.

    `st` is a module for serving static files on web pages, and contains a
    [vulnerability of this type][1]. In our example, we will serve files
    from the `public` route.

    If an attacker requests the following URL from our server, it will in
    turn leak the sensitive private key of the root user.

        curl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa

    **Note** `%2e` is the URL encoded version of `.` (dot).

    * **Writing arbitrary files**\: Allows the attacker to create or replace
      existing files. This type of vulnerability is also known as
      `Zip-Slip`.

    One way to achieve this is by using a malicious `zip` archive that holds
    path traversal filenames. When each filename in the zip archive gets
    concatenated to the target extraction folder, without validation, the
    final path ends up outside of the target folder. If an executable or a
    configuration file is overwritten with a file containing malicious code,
    the problem can turn into an arbitrary code execution issue quite
    easily.

    The following is an example of a `zip` archive with one benign file and
    one malicious file. Extracting the malicious file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        2018-04-15 22:04:29 .....           19           19  good.txt
        2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://snyk.io/vuln/npm:st:20140206
  affected_package: django
  vulnerable_versions:
  - "< 1.4.7"
  - ">= 1.5 < 1.5.3"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2013-4315
  cwe:
  - CWE-22
  credit:
  - Rainer Koirikivi
  references:
  - https://www.djangoproject.com/weblog/2013/sep/10/security-releases-issued/
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-4315
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40225
- id: snykio:pypi:django:2014-04-23
  title: Cross-site Request Forgery (CSRF)
  description: |
    [`Django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF) attacks. The caching framework reuses a cached CSRF token
    for all anonymous users, which allows remote attackers to bypass CSRF
    protections by reading the CSRF cookie for anonymous users.



    [1]: https://pypi.python.org/pypi/Django
    \n[`Django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF) attacks. The caching framework reuses a cached CSRF token
    for all anonymous users, which allows remote attackers to bypass CSRF
    protections by reading the CSRF cookie for anonymous users.



    [1]: https://pypi.python.org/pypi/Django
    \n[`Django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF) attacks. The caching framework reuses a cached CSRF token
    for all anonymous users, which allows remote attackers to bypass CSRF
    protections by reading the CSRF cookie for anonymous users.



    [1]: https://pypi.python.org/pypi/Django
  affected_package: django
  vulnerable_versions:
  - "< 1.4.11"
  - ">= 1.5 < 1.5.6"
  - ">= 1.6 < 1.6.3"
  - ">= 1.7 < 1.7b2"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2014-0473
  cwe:
  - CWE-264
  credit:
  - Paul McMillan
  references:
  - https://www.djangoproject.com/weblog/2014/apr/21/security/
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2014-0473
  - https://rhn.redhat.com/errata/RHSA-2014-0456.html
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40026
- id: snykio:pypi:django:2014-04-23
  title: Arbitrary Code Execution
  description: |
    [`Django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution attacks. The `django.core.urlresolvers.reverse` function
    allows remote attackers to import and execute arbitrary Python modules
    by leveraging a view that constructs URLs using user input and a
    \"dotted Python path.\"



    [1]: https://pypi.python.org/pypi/Django
    \n[`Django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution attacks. The `django.core.urlresolvers.reverse` function
    allows remote attackers to import and execute arbitrary Python modules
    by leveraging a view that constructs URLs using user input and a
    \"dotted Python path.\"



    [1]: https://pypi.python.org/pypi/Django
    \n[`Django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution attacks. The `django.core.urlresolvers.reverse` function
    allows remote attackers to import and execute arbitrary Python modules
    by leveraging a view that constructs URLs using user input and a
    \"dotted Python path.\"



    [1]: https://pypi.python.org/pypi/Django
  affected_package: django
  vulnerable_versions:
  - "< 1.4.11"
  - ">= 1.5 < 1.5.6"
  - ">= 1.6 < 1.6.3"
  - ">= 1.7 < 1.7b2"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2014-0472
  cwe:
  - CWE-94
  credit:
  - Benjamin Bach
  references:
  - https://www.djangoproject.com/weblog/2014/apr/21/security/
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2014-0472
  - https://rhn.redhat.com/errata/RHSA-2014-0456.html
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40025
- id: snykio:pypi:django:2014-04-23
  title: SQL Injection
  description: |
    [`Django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to SQL Injection
    attacks. The `FilePathField`, `GenericIPAddressField`, and
    `IPAddressField` model field classes in Django do not properly perform
    type conversion, which allows remote attackers to have unspecified
    impact and vectors, related to \"MySQL typecasting.\"



    [1]: https://pypi.python.org/pypi/Django
    \n[`Django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to SQL Injection
    attacks. The `FilePathField`, `GenericIPAddressField`, and
    `IPAddressField` model field classes in Django do not properly perform
    type conversion, which allows remote attackers to have unspecified
    impact and vectors, related to \"MySQL typecasting.\"



    [1]: https://pypi.python.org/pypi/Django
    \n[`Django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to SQL Injection
    attacks. The `FilePathField`, `GenericIPAddressField`, and
    `IPAddressField` model field classes in Django do not properly perform
    type conversion, which allows remote attackers to have unspecified
    impact and vectors, related to \"MySQL typecasting.\"



    [1]: https://pypi.python.org/pypi/Django
  affected_package: django
  vulnerable_versions:
  - "< 1.4.11"
  - ">= 1.5 < 1.5.6"
  - ">= 1.6 < 1.6.3"
  - ">= 1.7 < 1.7b2"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2014-0474
  cwe:
  - CWE-399
  credit:
  - Michael Koziarski
  references:
  - https://www.djangoproject.com/weblog/2014/apr/21/security/
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2014-0474
  - https://rhn.redhat.com/errata/RHSA-2014-0456.html
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40027
- id: snykio:pypi:django:2014-05-14
  title: Cache Poisoning
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cache Poisoning. It
    does not properly include the `Vary: Cookie` or `Cache-Control` header
    in responses, which allows remote attackers to obtain sensitive
    information or poison the cache via a request from certain browsers.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cache Poisoning. It
    does not properly include the `Vary: Cookie` or `Cache-Control` header
    in responses, which allows remote attackers to obtain sensitive
    information or poison the cache via a request from certain browsers.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cache Poisoning. It
    does not properly include the `Vary: Cookie` or `Cache-Control` header
    in responses, which allows remote attackers to obtain sensitive
    information or poison the cache via a request from certain browsers.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.4.13"
  - ">= 1.5 < 1.5.8"
  - ">= 1.6 < 1.6.5"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2014-1418
  cwe:
  - CWE-444
  credit:
  - Seth Arnold
  - Michael Nelson
  - Natalia Bidart
  - James Westby
  references:
  - https://www.djangoproject.com/weblog/2014/may/14/security-releases-issued/
  - http://www.openwall.com/lists/oss-security/2014/05/14/10
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-1418
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40256
- id: snykio:pypi:django:2014-05-14
  title: Session Hijacking
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Session Hijacking.
    The `RemoteUserMiddleware` when using the
    `contrib.auth.backends.RemoteUserBackend` backend, allows remote
    authenticated users to hijack web sessions via the `REMOTE_USER` header
    as logout/login actions are not checked.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Session Hijacking.
    The `RemoteUserMiddleware` when using the
    `contrib.auth.backends.RemoteUserBackend` backend, allows remote
    authenticated users to hijack web sessions via the `REMOTE_USER` header
    as logout/login actions are not checked.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Session Hijacking.
    The `RemoteUserMiddleware` when using the
    `contrib.auth.backends.RemoteUserBackend` backend, allows remote
    authenticated users to hijack web sessions via the `REMOTE_USER` header
    as logout/login actions are not checked.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.4.14"
  - ">= 1.5 < 1.5.9"
  - ">= 1.6 < 1.6.6"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2014-0482
  cwe:
  - CWE-287
  credit:
  - David Greisen
  references:
  - https://www.djangoproject.com/weblog/2014/aug/20/security/
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0482
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40261
- id: snykio:pypi:django:2014-05-14
  title: Open Redirect
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Open Redirecting.
    The `http.is_safe_url()` function does not properly validate URLs, like
    `http:\\\djangoproject.com.`, which This allows a user to be redirected
    to an unsafe URL unexpectedly.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Open Redirecting.
    The `http.is_safe_url()` function does not properly validate URLs, like
    `http:\\\djangoproject.com.`, which This allows a user to be redirected
    to an unsafe URL unexpectedly.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Open Redirecting.
    The `http.is_safe_url()` function does not properly validate URLs, like
    `http:\\\djangoproject.com.`, which This allows a user to be redirected
    to an unsafe URL unexpectedly.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.4.13"
  - ">= 1.5 < 1.5.8"
  - ">= 1.6 < 1.6.5"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2014-3730
  cwe:
  - CWE-20
  credit:
  - Peter Kuma
  - Gavin Wahl
  references:
  - https://www.djangoproject.com/weblog/2014/may/14/security-releases-issued/
  - http://www.openwall.com/lists/oss-security/2014/05/14/10
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-3730
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40257
- id: snykio:pypi:django:2014-08-20
  title: Malicious Link Generation
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Phishing attacks.
    The `reverse()` function does not properly validate URLs. When user
    input beginning with two forward-slash characters (`//`), `reverse()`
    could generate scheme-relative URLs to other hosts, allowing an attacker
    to generate links to sites of their choice, enabling phishing and other
    attacks.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Phishing attacks.
    The `reverse()` function does not properly validate URLs. When user
    input beginning with two forward-slash characters (`//`), `reverse()`
    could generate scheme-relative URLs to other hosts, allowing an attacker
    to generate links to sites of their choice, enabling phishing and other
    attacks.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Phishing attacks.
    The `reverse()` function does not properly validate URLs. When user
    input beginning with two forward-slash characters (`//`), `reverse()`
    could generate scheme-relative URLs to other hosts, allowing an attacker
    to generate links to sites of their choice, enabling phishing and other
    attacks.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.4.14"
  - ">= 1.5 < 1.5.9"
  - ">= 1.6 < 1.6.6"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2014-0480
  cwe:
  - CWE-20
  credit:
  - Florian Apolloner
  references:
  - https://www.djangoproject.com/weblog/2014/aug/20/security/
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0480
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40258
- id: snykio:pypi:django:2014-08-20
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks.The default configuration for the file upload handling
    uses a sequential file name generation process when a file with a
    conflicting name is uploaded. An attackers can cause high CPU
    consumption by uploading multiple files with the same name.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks.The default configuration for the file upload handling
    uses a sequential file name generation process when a file with a
    conflicting name is uploaded. An attackers can cause high CPU
    consumption by uploading multiple files with the same name.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks.The default configuration for the file upload handling
    uses a sequential file name generation process when a file with a
    conflicting name is uploaded. An attackers can cause high CPU
    consumption by uploading multiple files with the same name.



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 1.4.14"
  - ">= 1.5 < 1.5.9"
  - ">= 1.6 < 1.6.6"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2014-0481
  cwe:
  - CWE-399
  credit:
  - David Wilson
  references:
  - https://www.djangoproject.com/weblog/2014/aug/20/security/
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0481
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40259
- id: snykio:pypi:django:2014-08-20
  title: Information Exposure
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Information
    Exposure. The administrative interface (`contrib.admin`) does not check
    if a field represents a relationship between models. This allows remote
    authenticated users to obtain sensitive information via the `to_field`
    parameter in a popup action to an admin change form page.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Information
    Exposure. The administrative interface (`contrib.admin`) does not check
    if a field represents a relationship between models. This allows remote
    authenticated users to obtain sensitive information via the `to_field`
    parameter in a popup action to an admin change form page.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Information
    Exposure. The administrative interface (`contrib.admin`) does not check
    if a field represents a relationship between models. This allows remote
    authenticated users to obtain sensitive information via the `to_field`
    parameter in a popup action to an admin change form page.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.4.14"
  - ">= 1.5 < 1.5.9"
  - ">= 1.6 < 1.6.6"
  severity: low
  package_manager: pypi
  cve:
  - CVE-2014-0483
  cwe:
  - CWE-264
  credit:
  - Collin Anderson
  references:
  - https://www.djangoproject.com/weblog/2014/aug/20/security/
  - https://github.com/django/django/commit/2b31342cdf14fc20e07c43d258f1e7334ad664a6
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0483
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40262
- id: snykio:pypi:django:2015-01-13
  title: WSGI Header Spoofing
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to WSGI header
    spoofing. A malicious user could exploit this vulnerability by using an
    `_` character instead of a `-` in an HTTP header. In the WSGI environ,
    the `X-Auth-User` and the `X-Auth_User` headers are both converted to
    `HTTP_X_Auth_User`, allowing the attacker to bypass the protection.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to WSGI header
    spoofing. A malicious user could exploit this vulnerability by using an
    `_` character instead of a `-` in an HTTP header. In the WSGI environ,
    the `X-Auth-User` and the `X-Auth_User` headers are both converted to
    `HTTP_X_Auth_User`, allowing the attacker to bypass the protection.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to WSGI header
    spoofing. A malicious user could exploit this vulnerability by using an
    `_` character instead of a `-` in an HTTP header. In the WSGI environ,
    the `X-Auth-User` and the `X-Auth_User` headers are both converted to
    `HTTP_X_Auth_User`, allowing the attacker to bypass the protection.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.4.18"
  - ">= 1.5 < 1.6.10"
  - ">= 1.7 < 1.7.3"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-0219
  cwe:
  - CWE-17
  credit:
  - Jedediah Smith
  references:
  - https://www.djangoproject.com/weblog/2015/jan/13/security/
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-0219
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40302
- id: snykio:pypi:django:2015-01-13
  title: Cross-site Scripting (XSS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. The `is_safe_url()` function did not properly handle
    leading whitespaces, which allows remote attackers to craft URLs like
    `\njavascript:`.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. The `is_safe_url()` function did not properly handle
    leading whitespaces, which allows remote attackers to craft URLs like
    `\njavascript:`.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. The `is_safe_url()` function did not properly handle
    leading whitespaces, which allows remote attackers to craft URLs like
    `\njavascript:`.



    [1]: https://pypi.python.org/pypi/django
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: django
  vulnerable_versions:
  - "< 1.4.18"
  - ">= 1.5 < 1.6.10"
  - ">= 1.7 < 1.7.3"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-0220
  cwe:
  - CWE-79
  credit:
  - Mikko Ohtamaa
  references:
  - https://www.djangoproject.com/weblog/2015/jan/13/security/
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-0220
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40303
- id: snykio:pypi:django:2015-01-13
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The `serve()` view reads files an entire line at a time,
    which allows remote attackers to cause high memory consumption via a
    long line in a file.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The `serve()` view reads files an entire line at a time,
    which allows remote attackers to cause high memory consumption via a
    long line in a file.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The `serve()` view reads files an entire line at a time,
    which allows remote attackers to cause high memory consumption via a
    long line in a file.



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 1.4.18"
  - ">= 1.5 < 1.6.10"
  - ">= 1.7 < 1.7.3"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-0221
  cwe:
  - CWE-399
  credit:
  - Alex Gaynor
  references:
  - https://www.djangoproject.com/weblog/2015/jan/13/security/
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-0221
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40304
- id: snykio:pypi:django:2015-01-13
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. When a form uses `show_hidden_initial=True` and
    `ModelMultipleChoiceField`, An attacker may cause a large number of SQL
    queries by submitting duplicate values for the field\'s data.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. When a form uses `show_hidden_initial=True` and
    `ModelMultipleChoiceField`, An attacker may cause a large number of SQL
    queries by submitting duplicate values for the field\'s data.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. When a form uses `show_hidden_initial=True` and
    `ModelMultipleChoiceField`, An attacker may cause a large number of SQL
    queries by submitting duplicate values for the field\'s data.



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 1.4.18"
  - ">= 1.5 < 1.6.10"
  - ">= 1.7 < 1.7.3"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-0222
  cwe:
  - CWE-17
  credit:
  - Keryn Knight
  references:
  - https://www.djangoproject.com/weblog/2015/jan/13/security/
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-0222
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40305
- id: snykio:pypi:django:2015-03-09
  title: Cross-site Scripting (XSS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. The contents function in `admin/helpers.py` does not
    escape model attributes in `ModelAdmin.readonly_fields`, allowing
    injection if arbitrary web script or HTML.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. The contents function in `admin/helpers.py` does not
    escape model attributes in `ModelAdmin.readonly_fields`, allowing
    injection if arbitrary web script or HTML.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. The contents function in `admin/helpers.py` does not
    escape model attributes in `ModelAdmin.readonly_fields`, allowing
    injection if arbitrary web script or HTML.



    [1]: https://pypi.python.org/pypi/django
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: django
  vulnerable_versions:
  - ">= 1.7 < 1.7.6"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-2241
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://www.djangoproject.com/weblog/2015/mar/09/security-releases/
  - https://code.djangoproject.com/ticket/24461
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-2241
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40315
- id: snykio:pypi:django:2015-03-18
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to a Denial of Service
    (DoS) attacks. When an inputing a long string into the
    `utils.html.strip_tags` function, an infinite loop occurs.

    **Note:** This occurs only when using Python &lt;2.7.7 or =3.3.5.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to a Denial of Service
    (DoS) attacks. When an inputing a long string into the
    `utils.html.strip_tags` function, an infinite loop occurs.

    **Note:** This occurs only when using Python &lt;2.7.7 or =3.3.5.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to a Denial of Service
    (DoS) attacks. When an inputing a long string into the
    `utils.html.strip_tags` function, an infinite loop occurs.

    **Note:** This occurs only when using Python &lt;2.7.7 or =3.3.5.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to a Denial of Service
    (DoS) attacks. When an inputing a long string into the
    `utils.html.strip_tags` function, an infinite loop occurs.

    **Note:** This occurs only when using Python &lt;2.7.7 or =3.3.5.



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 1.4.20"
  - ">= 1.5 < 1.6.11"
  - ">= 1.7 < 1.7.7"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-2316
  cwe:
  - CWE-399
  credit:
  - Andrey Babak
  references:
  - https://www.djangoproject.com/weblog/2015/mar/18/security-releases/
  - http://www.oracle.com/technetwork/topics/security/bulletinapr2015-2511959.html
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-2316
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40317
- id: snykio:pypi:django:2015-03-18
  title: Cross-site Scripting (XSS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. The `utils.http.is_safe_url` function did not properly
    validate URLs, allowing the execustion of URLs of the sort:
    `\x08javascript: URL`.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. The `utils.http.is_safe_url` function did not properly
    validate URLs, allowing the execustion of URLs of the sort:
    `\x08javascript: URL`.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. The `utils.http.is_safe_url` function did not properly
    validate URLs, allowing the execustion of URLs of the sort:
    `\x08javascript: URL`.



    [1]: https://pypi.python.org/pypi/django
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: django
  vulnerable_versions:
  - "< 1.4.20"
  - ">= 1.5 < 1.6.11"
  - ">= 1.7 < 1.7.7"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-2317
  cwe:
  - CWE-79
  credit:
  - Daniel Chatfield
  references:
  - https://www.djangoproject.com/weblog/2015/mar/18/security-releases/
  - http://www.oracle.com/technetwork/topics/security/bulletinapr2015-2511959.html
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-2317
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40318
- id: snykio:pypi:django:2015-05-20
  title: Session Hijacking
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Session Hijacking.
    The `session.flush` function in the `cached_db` backend did not properly
    flush the session, which allows remote attackers to hijack user sessions
    via an empty string in the session key.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Session Hijacking.
    The `session.flush` function in the `cached_db` backend did not properly
    flush the session, which allows remote attackers to hijack user sessions
    via an empty string in the session key.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Session Hijacking.
    The `session.flush` function in the `cached_db` backend did not properly
    flush the session, which allows remote attackers to hijack user sessions
    via an empty string in the session key.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - ">= 1.8 < 1.8.2"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-3982
  cwe:
  - CWE-384
  credit:
  - Unknown
  references:
  - https://www.djangoproject.com/weblog/2015/may/20/security-release/
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-3982
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40325
- id: snykio:pypi:django:2015-07-08
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. When sending multiple requests with unique session keys,
    the session backends create new empty records in the session storage,
    which can fill the session store.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. When sending multiple requests with unique session keys,
    the session backends create new empty records in the session storage,
    which can fill the session store.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. When sending multiple requests with unique session keys,
    the session backends create new empty records in the session storage,
    which can fill the session store.



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 1.4.21"
  - ">= 1.5 < 1.7.9"
  - ">= 1.8 < 1.8.3"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-5143
  cwe:
  - CWE-399
  credit:
  - Eric Peterson
  - Lin Hua Cheng
  references:
  - https://www.djangoproject.com/weblog/2015/jul/08/security-releases/
  - http://rhn.redhat.com/errata/RHSA-2015-1686.html
  - http://www.oracle.com/technetwork/topics/security/bulletinoct2015-2511968.html
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-5143
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40332
- id: snykio:pypi:django:2015-07-08
  title: HTTP Response Splitting
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to HTTP Response
    Splitting attacks due to the use of an incorrect regular expression. It
    allows newline characters in email messages (to the `EmailValidator`),
    in URLs (to the `URLValidator`), or other instances. An attacker can
    leverage this to inject arbitrary headers and conduct HTTP response
    splitting attacks.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to HTTP Response
    Splitting attacks due to the use of an incorrect regular expression. It
    allows newline characters in email messages (to the `EmailValidator`),
    in URLs (to the `URLValidator`), or other instances. An attacker can
    leverage this to inject arbitrary headers and conduct HTTP response
    splitting attacks.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to HTTP Response
    Splitting attacks due to the use of an incorrect regular expression. It
    allows newline characters in email messages (to the `EmailValidator`),
    in URLs (to the `URLValidator`), or other instances. An attacker can
    leverage this to inject arbitrary headers and conduct HTTP response
    splitting attacks.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.4.21"
  - ">= 1.5 < 1.7.9"
  - ">= 1.8 < 1.8.3"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-5144
  cwe:
  - CWE-113
  credit:
  - Unknown
  references:
  - https://www.djangoproject.com/weblog/2015/jul/08/security-releases/
  - http://www.oracle.com/technetwork/topics/security/bulletinoct2015-2511968.html
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-5144
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40333
- id: snykio:pypi:django:2015-07-08
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The `URLValidator` function included a regular expression
    that was extremely slow to evaluate against certain inputs, causing high
    memory consumption.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The `URLValidator` function included a regular expression
    that was extremely slow to evaluate against certain inputs, causing high
    memory consumption.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The `URLValidator` function included a regular expression
    that was extremely slow to evaluate against certain inputs, causing high
    memory consumption.



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - ">= 1.8 < 1.8.3"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2015-5145
  cwe:
  - CWE-399
  credit:
  - João Silva
  - Ross Brunton
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-5145
  - https://www.djangoproject.com/weblog/2015/jul/08/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40334
- id: snykio:pypi:django:2015-08-18
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. If a large number of requests were made to
    `contrib.auth.views.logout`, it would trigger the creation of an empty
    session records, causing high session store consumption.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. If a large number of requests were made to
    `contrib.auth.views.logout`, it would trigger the creation of an empty
    session records, causing high session store consumption.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. If a large number of requests were made to
    `contrib.auth.views.logout`, it would trigger the creation of an empty
    session records, causing high session store consumption.



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 1.4.22"
  - ">= 1.5 < 1.7.10"
  - ">= 1.8 < 1.8.4"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-5963
  cwe:
  - CWE-399
  credit:
  - Lin Hua Cheng
  references:
  - https://www.djangoproject.com/weblog/2015/aug/18/security-releases/
  - http://www.oracle.com/technetwork/topics/security/bulletinoct2015-2511968.html
  - http://rhn.redhat.com/errata/RHSA-2015-1766.html
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-5963
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40339
- id: snykio:pypi:django:2015-08-18
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The `contrib.sessions.backends.base.SessionBase.flush`
    and `cache_db.SessionStore.flush` functions create empty sessions
    causing session store consumption.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The `contrib.sessions.backends.base.SessionBase.flush`
    and `cache_db.SessionStore.flush` functions create empty sessions
    causing session store consumption.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. The `contrib.sessions.backends.base.SessionBase.flush`
    and `cache_db.SessionStore.flush` functions create empty sessions
    causing session store consumption.



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 1.4.22"
  - ">= 1.5 < 1.7.10"
  - ">= 1.8 < 1.8.4"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-5964
  cwe:
  - CWE-399
  credit:
  - Lin Hua Cheng
  references:
  - https://www.djangoproject.com/weblog/2015/aug/18/security-releases/
  - http://www.oracle.com/technetwork/topics/security/bulletinoct2015-2511968.html
  - http://rhn.redhat.com/errata/RHSA-2015-1766.html
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-5964
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40340
- id: snykio:pypi:django:2015-11-24
  title: Information Exposure
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Information
    Exposure. It is possible for a user to specify the date format and pass
    it to the date filter, e.g. `{{ last_updated|date:user_date_format }}`.
    An attacker could send a settings key instead of a date format (like
    `SECRET_KEY`), and obtain any secret in the application\'s settings.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Information
    Exposure. It is possible for a user to specify the date format and pass
    it to the date filter, e.g. `{{ last_updated|date:user_date_format }}`.
    An attacker could send a settings key instead of a date format (like
    `SECRET_KEY`), and obtain any secret in the application\'s settings.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Information
    Exposure. It is possible for a user to specify the date format and pass
    it to the date filter, e.g. `{{ last_updated|date:user_date_format }}`.
    An attacker could send a settings key instead of a date format (like
    `SECRET_KEY`), and obtain any secret in the application\'s settings.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.7.11"
  - ">= 1.8 < 1.8.7"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-8213
  cwe:
  - CWE-200
  credit:
  - Ryan Butterfield
  references:
  - https://www.djangoproject.com/weblog/2015/nov/24/security-releases-issued/
  - http://rhn.redhat.com/errata/RHSA-2016-0129.html
  - https://github.com/django/django/commit/316bc3fc9437c5960c24baceb93c73f1939711e4
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-8213
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40359
- id: snykio:pypi:django:2016-02-01
  title: Access Restriction Bypass
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass. When `ModelAdmin.save_as=True`, any authenticated user may to
    bypass intended access restrictions and create `ModelAdmin` objects via
    the \"Save as New\" option when editing objects and leveraging the
    \"change\" permission.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass. When `ModelAdmin.save_as=True`, any authenticated user may to
    bypass intended access restrictions and create `ModelAdmin` objects via
    the \"Save as New\" option when editing objects and leveraging the
    \"change\" permission.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Access Restriction
    Bypass. When `ModelAdmin.save_as=True`, any authenticated user may to
    bypass intended access restrictions and create `ModelAdmin` objects via
    the \"Save as New\" option when editing objects and leveraging the
    \"change\" permission.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - ">= 1.9 < 1.9.2"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2016-2048
  cwe:
  - CWE-284
  credit:
  - Myk Willis
  references:
  - https://www.djangoproject.com/weblog/2016/feb/01/releases-192-and-189/
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-2048
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40380
- id: snykio:pypi:django:2016-03-01
  title: Timing Attack
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Timing attacks.
    There is a timing difference between a login request for a user with a
    password encoded in an older number of iterations and login request for
    a nonexistent user (which runs the default hasher\'s default number of
    iterations). This only affects users who haven\'t logged in since the
    iterations were increased in Django 1.6.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Timing attacks.
    There is a timing difference between a login request for a user with a
    password encoded in an older number of iterations and login request for
    a nonexistent user (which runs the default hasher\'s default number of
    iterations). This only affects users who haven\'t logged in since the
    iterations were increased in Django 1.6.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Timing attacks.
    There is a timing difference between a login request for a user with a
    password encoded in an older number of iterations and login request for
    a nonexistent user (which runs the default hasher\'s default number of
    iterations). This only affects users who haven\'t logged in since the
    iterations were increased in Django 1.6.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.8.10"
  - ">= 1.9 < 1.9.3"
  severity: low
  package_manager: pypi
  cve:
  - CVE-2016-2513
  cwe:
  - CWE-200
  credit:
  - Sjoerd Job Postmus
  references:
  - https://www.djangoproject.com/weblog/2016/mar/01/security-releases/
  - http://rhn.redhat.com/errata/RHSA-2016-0502.html
  - https://github.com/django/django/commit/67b46ba7016da2d259c1ecc7d666d11f5e1cfaab
  - http://www.oracle.com/technetwork/topics/security/bulletinapr2016-2952098.html
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-2513
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40383
- id: snykio:pypi:django:2016-03-01
  title: Cross-site Scripting (XSS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The `utils.http.is_safe_url` function allows remote attackers to
    redirect users to arbitrary web sites and conduct phishing attacks or
    possibly conduct Cross-site Scripting (XSS) attacks via a URL containing
    basic authentication. For example, a URL like
    `http://mysite.example.com\@attacker.com` would be considered safe if
    the request\'s host is `http://mysite.example.com`, but redirecting to
    this URL sends the user to attacker.com.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The `utils.http.is_safe_url` function allows remote attackers to
    redirect users to arbitrary web sites and conduct phishing attacks or
    possibly conduct Cross-site Scripting (XSS) attacks via a URL containing
    basic authentication. For example, a URL like
    `http://mysite.example.com\@attacker.com` would be considered safe if
    the request\'s host is `http://mysite.example.com`, but redirecting to
    this URL sends the user to attacker.com.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). The `utils.http.is_safe_url` function allows remote attackers to
    redirect users to arbitrary web sites and conduct phishing attacks or
    possibly conduct Cross-site Scripting (XSS) attacks via a URL containing
    basic authentication. For example, a URL like
    `http://mysite.example.com\@attacker.com` would be considered safe if
    the request\'s host is `http://mysite.example.com`, but redirecting to
    this URL sends the user to attacker.com.



    [1]: https://pypi.python.org/pypi/django
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: django
  vulnerable_versions:
  - "< 1.8.10"
  - ">= 1.9 < 1.9.3"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2016-2512
  cwe:
  - CWE-79
  credit:
  - Mark Striemer
  references:
  - https://www.djangoproject.com/weblog/2016/mar/01/security-releases
  - http://www.oracle.com/technetwork/topics/security/bulletinapr2016-2952098.html
  - https://github.com/django/django/commit/c5544d289233f501917e25970c03ed444abbd4f0
  - http://rhn.redhat.com/errata/RHSA-2016-0502.html
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-2512
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40382
- id: snykio:pypi:django:2016-07-18
  title: Cross-site Scripting (XSS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. The `dismissChangeRelatedObjectPopup` function uses
    Javascript\'s `Element.innerHTML` in an unsafe manner. This allows
    remote attackers to forge content in the admin\'s add/change popup.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. The `dismissChangeRelatedObjectPopup` function uses
    Javascript\'s `Element.innerHTML` in an unsafe manner. This allows
    remote attackers to forge content in the admin\'s add/change popup.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. The `dismissChangeRelatedObjectPopup` function uses
    Javascript\'s `Element.innerHTML` in an unsafe manner. This allows
    remote attackers to forge content in the admin\'s add/change popup.



    [1]: https://pypi.python.org/pypi/django
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: django
  vulnerable_versions:
  - "< 1.8.14"
  - ">= 1.9 < 1.9.8"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2016-6186
  cwe:
  - CWE-79
  credit:
  - Paulo Alvarado
  - Vulnerability Laboratory
  references:
  - https://www.djangoproject.com/weblog/2016/jul/18/security-releases/
  - http://www.vulnerability-lab.com/get_content.php?id=1869
  - https://github.com/django/django/commit/d03bf6fe4e9bf5b07de62c1a271c4b41a7d3d158
  - https://github.com/django/django/commit/f68e5a99164867ab0e071a936470958ed867479d
  - http://rhn.redhat.com/errata/RHSA-2016-1596.html
  - http://seclists.org/fulldisclosure/2016/Jul/53
  - http://packetstormsecurity.com/files/137965/Django-3.3.0-Script-Insertion.html
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-6186
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40403
- id: snykio:pypi:django:2016-09-26
  title: Cross-site Request Forgery (CSRF)
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF) attacks. The cookie parsing code, when used on a site
    with Google Analytics, may allow remote attackers to set arbitrary
    cookies leading to a bypass of CSRF protection.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF) attacks. The cookie parsing code, when used on a site
    with Google Analytics, may allow remote attackers to set arbitrary
    cookies leading to a bypass of CSRF protection.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF) attacks. The cookie parsing code, when used on a site
    with Google Analytics, may allow remote attackers to set arbitrary
    cookies leading to a bypass of CSRF protection.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.8.15"
  - ">= 1.9 < 1.9.10"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2016-7401
  cwe:
  - CWE-254
  credit:
  - Sergey Bobrov
  references:
  - https://www.djangoproject.com/weblog/2016/sep/26/security-releases/
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-7401
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40434
- id: snykio:pypi:django:2016-09-30
  title: Denial of Service (DoS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. An attacker may conduct an attack upon deserialization of
    an XML object. This vulnerability is related to CVE-2013-1664.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. An attacker may conduct an attack upon deserialization of
    an XML object. This vulnerability is related to CVE-2013-1664.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. An attacker may conduct an attack upon deserialization of
    an XML object. This vulnerability is related to CVE-2013-1664.



    [1]: https://pypi.python.org/pypi/django
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: django
  vulnerable_versions:
  - "< 1.3.6"
  - ">= 1.4 < 1.4.4"
  severity: medium
  package_manager: pypi
  cwe:
  - CWE-119
  credit:
  - Michael Koziarski
  references:
  - https://www.djangoproject.com/weblog/2013/feb/19/security/
  - http://rhn.redhat.com/errata/RHSA-2013-0670.html
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-1664
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40174
- id: snykio:pypi:django:2016-11-01
  title: Use of hardcoded DB password
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package used a hardcoded password for a
    temporary database user created when running tests with an Oracle
    database. This user is usually dropped after the test suite completes,
    but not when using the `manage.py test --keepdb` option or if the user
    has an active session. This makes it easier for remote attackers to
    obtain access to the database.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package used a hardcoded password for a
    temporary database user created when running tests with an Oracle
    database. This user is usually dropped after the test suite completes,
    but not when using the `manage.py test --keepdb` option or if the user
    has an active session. This makes it easier for remote attackers to
    obtain access to the database.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package used a hardcoded password for a
    temporary database user created when running tests with an Oracle
    database. This user is usually dropped after the test suite completes,
    but not when using the `manage.py test --keepdb` option or if the user
    has an active session. This makes it easier for remote attackers to
    obtain access to the database.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.8.16"
  - ">= 1.9 < 1.9.11"
  - ">= 1.10 < 1.10.3"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2016-9013
  cwe:
  - CWE-259
  credit:
  - Marti Raudsepp
  references:
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-9013
  - https://www.djangoproject.com/weblog/2016/nov/01/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40439
- id: snykio:pypi:django:2016-11-02
  title: DNS Rebinding
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to DNS Rebinding
    attacks. When `settings.DEBUG` is set to `True`, it fails to validate
    the HTTP Host header against `settings.ALLOWED_HOSTS` making it possible
    to manipulate the host header. This is at least cross-site scripting
    vector, which could be quite serious if developers load a copy of the
    production database in development or connect to some production
    services for which there\'s no development instance. Also, if a project
    uses a package like the `django-debug-toolbar`, the attacker could also
    execute arbitrary SQL.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to DNS Rebinding
    attacks. When `settings.DEBUG` is set to `True`, it fails to validate
    the HTTP Host header against `settings.ALLOWED_HOSTS` making it possible
    to manipulate the host header. This is at least cross-site scripting
    vector, which could be quite serious if developers load a copy of the
    production database in development or connect to some production
    services for which there\'s no development instance. Also, if a project
    uses a package like the `django-debug-toolbar`, the attacker could also
    execute arbitrary SQL.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to DNS Rebinding
    attacks. When `settings.DEBUG` is set to `True`, it fails to validate
    the HTTP Host header against `settings.ALLOWED_HOSTS` making it possible
    to manipulate the host header. This is at least cross-site scripting
    vector, which could be quite serious if developers load a copy of the
    production database in development or connect to some production
    services for which there\'s no development instance. Also, if a project
    uses a package like the `django-debug-toolbar`, the attacker could also
    execute arbitrary SQL.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.8.16"
  - ">= 1.9 < 1.9.11"
  - ">= 1.10 < 1.10.3"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2016-9014
  cwe:
  - CWE-350
  credit:
  - Aymeric Augustin
  references:
  - https://www.djangoproject.com/weblog/2016/nov/01/security-releases/
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-9014
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40440
- id: snykio:pypi:django:2017-04-05
  title: Open Redirect
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Open Redirect. A
    maliciously crafted URL to a Django site using the
    `django.views.static.serve()` view could redirect to any other domain.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Open Redirect. A
    maliciously crafted URL to a Django site using the
    `django.views.static.serve()` view could redirect to any other domain.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Open Redirect. A
    maliciously crafted URL to a Django site using the
    `django.views.static.serve()` view could redirect to any other domain.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.8.18"
  - ">= 1.9 < 1.9.13"
  - ">= 1.10 < 1.10.7"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2017-7234
  cwe:
  - CWE-601
  credit:
  - Unknown
  references:
  - https://www.djangoproject.com/weblog/2017/apr/04/security-releases/
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-7234
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40461
- id: snykio:pypi:django:2017-04-05
  title: Open Redirect
  description: |
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Open Redirect. It
    relies on user input in some cases to redirect the user to an \"on
    success\" URL. The security check for these redirects (namely
    `django.utils.http.is_safe_url()`) considered some numeric URLs \"safe\"
    when they shouldn\'t be, aka an open redirect vulnerability. Also, if a
    developer relies on `is_safe_url()` to provide safe redirect targets and
    puts such a URL into a link, they could suffer from an XSS attack.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Open Redirect. It
    relies on user input in some cases to redirect the user to an \"on
    success\" URL. The security check for these redirects (namely
    `django.utils.http.is_safe_url()`) considered some numeric URLs \"safe\"
    when they shouldn\'t be, aka an open redirect vulnerability. Also, if a
    developer relies on `is_safe_url()` to provide safe redirect targets and
    puts such a URL into a link, they could suffer from an XSS attack.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Open Redirect. It
    relies on user input in some cases to redirect the user to an \"on
    success\" URL. The security check for these redirects (namely
    `django.utils.http.is_safe_url()`) considered some numeric URLs \"safe\"
    when they shouldn\'t be, aka an open redirect vulnerability. Also, if a
    developer relies on `is_safe_url()` to provide safe redirect targets and
    puts such a URL into a link, they could suffer from an XSS attack.



    [1]: https://pypi.python.org/pypi/django
  affected_package: django
  vulnerable_versions:
  - "< 1.8.18"
  - ">= 1.9 < 1.9.13"
  - ">= 1.10 < 1.10.7"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2017-7233
  cwe:
  - CWE-601
  credit:
  - Unknown
  references:
  - https://www.djangoproject.com/weblog/2017/apr/04/security-releases/
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-7233
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40460
- id: snykio:pypi:django:2017-09-05
  title: Cross-site Scripting (XSS)
  description: |+
    [`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. Autoescaping of HTML was disabled by default in the
    technical 500 debug page template. This vulnerability shouldn\'t affect
    most production sites since you shouldn\'t run with `DEBUG = True` in
    production settings.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. Autoescaping of HTML was disabled by default in the
    technical 500 debug page template. This vulnerability shouldn\'t affect
    most production sites since you shouldn\'t run with `DEBUG = True` in
    production settings.



    [1]: https://pypi.python.org/pypi/django
    \n[`django`][1] is a high-level Python Web framework that encourages rapid
    development and clean, pragmatic design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. Autoescaping of HTML was disabled by default in the
    technical 500 debug page template. This vulnerability shouldn\'t affect
    most production sites since you shouldn\'t run with `DEBUG = True` in
    production settings.



    [1]: https://pypi.python.org/pypi/django
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: django
  vulnerable_versions:
  - ">= 1.9 < 1.10.8"
  - ">= 1.11a1 < 1.11.5"
  severity: low
  package_manager: pypi
  cve:
  - CVE-2017-12794
  cwe:
  - CWE-79
  credit:
  - Charles Bideau
  references:
  - https://www.djangoproject.com/weblog/2017/sep/05/security-releases/
  - https://nvd.nist.gov/vuln/detail/CVE-2017-12794
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40626
- id: snykio:pypi:django:2018-02-01
  title: Information Exposure
  description: |
    [django][1] is a Python Web framework.

    Affected versions of this package are vulnerable to Information
    Exposure. Remote attackers may obtain potentially sensitive information
    by leveraging data exposure from the `confirm_login_allowed()` method,
    as demonstrated by discovering whether a user account is inactive.



    [1]: https://github.com/django/django
    \n[django][1] is a Python Web framework.

    Affected versions of this package are vulnerable to Information
    Exposure. Remote attackers may obtain potentially sensitive information
    by leveraging data exposure from the `confirm_login_allowed()` method,
    as demonstrated by discovering whether a user account is inactive.



    [1]: https://github.com/django/django
    \n[django][1] is a Python Web framework.

    Affected versions of this package are vulnerable to Information
    Exposure. Remote attackers may obtain potentially sensitive information
    by leveraging data exposure from the `confirm_login_allowed()` method,
    as demonstrated by discovering whether a user account is inactive.



    [1]: https://github.com/django/django
  affected_package: django
  vulnerable_versions:
  - ">= 2 < 2.0.2"
  - ">= 1.11.8 < 1.11.10"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2018-6188
  cwe:
  - CWE-200
  credit:
  - Unknown
  references:
  - https://www.djangoproject.com/weblog/2018/feb/01/security-releases/
  - https://nvd.nist.gov/vuln/detail/CVE-2018-6188
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-42054
- id: snykio:pypi:django:2018-03-06
  title: Information Exposure
  description: "[django][1] is a Python Web framework.\n\nAffected versions of this
    package are vulnerable to Regular Expression\nDenial of Service (ReDoS) attacks.
    The `django.utils.html.urlize()`\nfunction was extremely slow to evaluate certain
    inputs due to\ncatastrophic backtracking in two regular expressions. The `urlize()`\nfunction
    is used to implement the `urlize` and `urlizetrunc` template\nfilters, which were
    thus vulnerable.\n\n\n\n[1]: https://github.com/django/django\n\\n[django][1]
    is a Python Web framework.\n\nAffected versions of this package are vulnerable
    to Regular Expression\nDenial of Service (ReDoS) attacks. The `django.utils.html.urlize()`\nfunction
    was extremely slow to evaluate certain inputs due to\ncatastrophic backtracking
    in two regular expressions. The `urlize()`\nfunction is used to implement the
    `urlize` and `urlizetrunc` template\nfilters, which were thus vulnerable.\n\n\n\n[1]:
    https://github.com/django/django\n\\n[django][1] is a Python Web framework.\n\nAffected
    versions of this package are vulnerable to Regular Expression\nDenial of Service
    (ReDoS) attacks. The `django.utils.html.urlize()`\nfunction was extremely slow
    to evaluate certain inputs due to\ncatastrophic backtracking in two regular expressions.
    The `urlize()`\nfunction is used to implement the `urlize` and `urlizetrunc` template\nfilters,
    which were thus vulnerable.\n\n\n\n[1]: https://github.com/django/django\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: django
  vulnerable_versions:
  - ">= 1.7 < 1.8.19"
  - ">= 1.9 < 1.11.11"
  - ">= 2 < 2.0.3"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2018-7536
  cwe:
  - CWE-400
  - CWE-185
  credit:
  - Jamie Davis
  references:
  - https://www.djangoproject.com/weblog/2018/mar/06/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40778
- id: snykio:pypi:django:2018-03-06
  title: Regular Expression Denial of Service (ReDoS)
  description: "[django][1] is a Python Web framework.\n\nAffected versions of this
    package are vulnerable to Regular Expression\nDenial of Service (ReDoS) attacks.
    If `django.utils.text.Truncator's\nchars()` and `words()` methods were passed
    the `html=True` argument,\nthey were extremely slow to evaluate certain inputs
    due to a\ncatastrophic backtracking vulnerability in a regular expression. The\n`chars()`
    and `words()` methods are used to implement the\n`truncatechars_html` and `truncatewords_html`
    template filters, which\nwere thus vulnerable.\n\n\n\n[1]: https://github.com/django/django\n\\n[django][1]
    is a Python Web framework.\n\nAffected versions of this package are vulnerable
    to Regular Expression\nDenial of Service (ReDoS) attacks. If `django.utils.text.Truncator's\nchars()`
    and `words()` methods were passed the `html=True` argument,\nthey were extremely
    slow to evaluate certain inputs due to a\ncatastrophic backtracking vulnerability
    in a regular expression. The\n`chars()` and `words()` methods are used to implement
    the\n`truncatechars_html` and `truncatewords_html` template filters, which\nwere
    thus vulnerable.\n\n\n\n[1]: https://github.com/django/django\n\\n[django][1]
    is a Python Web framework.\n\nAffected versions of this package are vulnerable
    to Regular Expression\nDenial of Service (ReDoS) attacks. If `django.utils.text.Truncator's\nchars()`
    and `words()` methods were passed the `html=True` argument,\nthey were extremely
    slow to evaluate certain inputs due to a\ncatastrophic backtracking vulnerability
    in a regular expression. The\n`chars()` and `words()` methods are used to implement
    the\n`truncatechars_html` and `truncatewords_html` template filters, which\nwere
    thus vulnerable.\n\n\n\n[1]: https://github.com/django/django\n\\nDenial of Service
    (DoS) describes a family of attacks, all aimed at\nmaking a system inaccessible
    to its original and legitimate users. There\nare many types of DoS attacks, ranging
    from trying to clog the network\npipes to the system by generating a large volume
    of traffic from many\nmachines (a Distributed Denial of Service - DDoS - attack)
    to sending\ncrafted requests that cause a system to crash or take a disproportional\namount
    of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type
    of Denial of\nService attack. Regular expressions are incredibly powerful, but
    they\naren\\'t very intuitive and can ultimately end up making it easy for\nattackers
    to take your site down.\n\nLet’s take the following regular expression as an example:\n\n
    \   regex = /A(B|C+)+D/\n\nThis regular expression accomplishes the following:\n\n*
    `A` The string must start with the letter \\'A\\'\n* `(B|C+)+` The string must
    then follow the letter A with either the\n  letter \\'B\\' or some number of occurrences
    of the letter \\'C\\' (the\n  `+` matches one or more times). The `+` at the end
    of this section\n  states that we can look for one or more matches of this section.\n*
    `D` Finally, we ensure this section of the string ends with a \\'D\\'\n\nThe expression
    would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt
    most cases, it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n
    \   $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s
    user 0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: django
  vulnerable_versions:
  - ">= 1.7 < 1.8.19"
  - ">= 1.9 < 1.11.11"
  - ">= 2 < 2.0.3"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2018-7537
  cwe:
  - CWE-400
  - CWE-185
  credit:
  - Jamie Davis
  references:
  - https://www.djangoproject.com/weblog/2018/mar/06/security-releases/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-40779
- id: snykio:pypi:django:2018-03-11
  title: Regular Expression Denial of Service (ReDoS)
  description: "[django][1] is a high-level Python Web framework that encourages rapid\ndevelopment
    and clean, pragmatic design.\n\nAffected versions of this package are vulnerable
    to Regular Expression\nDenial of Service (ReDoS) via a crafted email address or
    URL that\ntriggers a large amount of backtracking in a regular expression.\n\n\n\n[1]:
    https://pypi.python.org/pypi/django\n\\n[django][1] is a high-level Python Web
    framework that encourages rapid\ndevelopment and clean, pragmatic design.\n\nAffected
    versions of this package are vulnerable to Regular Expression\nDenial of Service
    (ReDoS) via a crafted email address or URL that\ntriggers a large amount of backtracking
    in a regular expression.\n\n\n\n[1]: https://pypi.python.org/pypi/django\n\\n[django][1]
    is a high-level Python Web framework that encourages rapid\ndevelopment and clean,
    pragmatic design.\n\nAffected versions of this package are vulnerable to Regular
    Expression\nDenial of Service (ReDoS) via a crafted email address or URL that\ntriggers
    a large amount of backtracking in a regular expression.\n\n\n\n[1]: https://pypi.python.org/pypi/django\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: django
  vulnerable_versions:
  - "< 1.0.4"
  - ">= 1.1 < 1.1.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2009-3695
  cwe:
  - CWE-399
  credit:
  - Unknown
  references:
  - http://groups.google.com/group/django-users/browse_thread/thread/15df9e45118dfc51/
  - http://www.djangoproject.com/weblog/2009/oct/09/security/
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-42162
- id: snykio:pypi:django:2018-08-01
  title: Open Redirect
  description: |
    [django][1] is a Web framework that encourages rapid development and
    clean, pragmatic design.

    Affected versions of this package are vulnerable to Open Redirect. If
    the `django.middleware.common.CommonMiddleware` and the `APPEND_SLASH`
    setting are both enabled, and if the project has a URL pattern that
    accepts any path ending in a slash, a malicious user could send a
    request to a crafted URL of that site that would lead to a redirect to
    another site.



    [1]: https://pypi.org/project/Django/
    \n[django][1] is a Web framework that encourages rapid development and
    clean, pragmatic design.

    Affected versions of this package are vulnerable to Open Redirect. If
    the `django.middleware.common.CommonMiddleware` and the `APPEND_SLASH`
    setting are both enabled, and if the project has a URL pattern that
    accepts any path ending in a slash, a malicious user could send a
    request to a crafted URL of that site that would lead to a redirect to
    another site.



    [1]: https://pypi.org/project/Django/
    \n[django][1] is a Web framework that encourages rapid development and
    clean, pragmatic design.

    Affected versions of this package are vulnerable to Open Redirect. If
    the `django.middleware.common.CommonMiddleware` and the `APPEND_SLASH`
    setting are both enabled, and if the project has a URL pattern that
    accepts any path ending in a slash, a malicious user could send a
    request to a crafted URL of that site that would lead to a redirect to
    another site.



    [1]: https://pypi.org/project/Django/
  affected_package: django
  vulnerable_versions:
  - "< 1.11.15"
  - ">= 2.0.0 < 2.0.8"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2018-14574
  cwe:
  - CWE-601
  credit:
  - Andreas Hug
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=1609031
  - https://www.djangoproject.com/weblog/2018/aug/01/security-releases/
  - https://github.com/django/django/commit/a656a681272f8f3734b6eb38e9a88aa0d91806f1
  - https://github.com/django/django/commit/6fffc3c6d420e44f4029d5643f38d00a39b08525
  - https://github.com/django/django/commit/c4e5ff7fdb5fce447675e90291fd33fddd052b3c
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGO-42178
