---
- id: ossindex:pypi:markdown2:8402788305
  title: Cross Site Scripting (XSS)
  description: By exploiting the mechanism through which markdown prevents double
    escaping it is possible to inject JavaScript into a document, causing a Cross
    Site Scripting vulnerability.
  affected_package: markdown2
  vulnerable_versions:
  - "<1.0.1.14"
  package_manager: pypi
  disclosed_date: 2017-04-12
  created_date: 2017-04-12
  last_modified_date: 2017-04-12
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/trentm/python-markdown2/issues/29
  source_url: https://ossindex.net/resource/package/8401081804/vulnerabilities
- id: ossindex:pypi:markdown2:8402792690
  title: Cross Site Scripting (XSS) in safe mode
  description: 'While in safe mode the javascript: scheme in urls is being allowed
    and is a vector for cross site scripting attacks.

'
  affected_package: markdown2
  vulnerable_versions:
  - "<2.3.2"
  package_manager: pypi
  disclosed_date: 2017-04-14
  created_date: 2017-04-14
  last_modified_date: 2017-04-16
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/trentm/python-markdown2/commit/93c07ab2107546b4301914200d877ea394053188
  - https://github.com/trentm/python-markdown2/issues/174
  - https://github.com/trentm/python-markdown2/pull/230
  source_url: https://ossindex.net/resource/package/8401081804/vulnerabilities
- id: snykio:pypi:markdown2:40770
  title: Cross-site Scripting (XSS)
  description: |+
    [`markdown2`][1] is A fast and complete Python implementation of
    Markdown.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS) attacks via the `safe_mode` feature, which is supposed to sanitize
    user input against XSS. With a crafted payload, XSS can be triggered, as
    demonstrated by omitting the final \'&gt;\' character from an IMG tag.

    ### PoC by Vineet Kumar   {#poc-by-vineet-kumar}

        >>> from markdown2 import markdown as mark
        >>> mark('<img src="" onerror=alert(/XSS/)>', safe_mode=True)
        u'<p>[HTML_REMOVED]</p>\n'
        >>> mark('<img src="" onerror=alert(/XSS/) ', safe_mode=True) # Please notice the space at end of string.
        u'<p><img src="" onerror=alert(/XSS/) </p>\n'
        >>> mark('<img src="" onerror=alert(/XSS/)>', safe_mode="escape")
        u'<p>&lt;img src="" onerror=alert(/XSS/)&gt;</p>\n'
        >>> mark('<img src="" onerror=alert(/XSS/) ', safe_mode="escape")
        u'<p><img src="" onerror=alert(/XSS/) </p>\n'



    [1]: http://pypi.python.org/pypi/markdown2
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: markdown2
  vulnerable_versions:
  - "< 2.3.7"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2018-5773
  cwe:
  - CWE-79
  disclosed_date: 2018-01-17
  created_date: 2018-01-19
  last_modified_date: 2018-01-19
  credit:
  - Hunter2.com
  references:
  - https://github.com/trentm/python-markdown2/commit/1b1dcdd727c0ef03453b9f5ef5ae3679f1d72323
  - https://github.com/trentm/python-markdown2/commit/1fb702d650d35f7a6fee7f8dbe819e53ceaff53e
  - https://github.com/trentm/python-markdown2/issues/285
  - https://github.com/trentm/python-markdown2/pull/315
  source_url: https://snyk.io/vuln/SNYK-PYTHON-MARKDOWN2-40770
