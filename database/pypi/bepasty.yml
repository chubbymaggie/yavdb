---
- id: ossindex:pypi:bepasty:8402880355
  title: Cross Site Scripting (XSS)
  description: There is a possible cross site scripting vulnerability when showing
    items of some types inline (e.g. text/html).
  affected_package: bepasty
  vulnerable_versions:
  - "<0.3.0"
  package_manager: pypi
  disclosed_date: 2017-04-28
  created_date: 2017-04-28
  last_modified_date: 2017-05-16
  credit:
  - OSSIndex
  references:
  - https://github.com/bepasty/bepasty-server/commit/068fc4e1906bda3cd94705ba2907e52864f10ee3
  - https://github.com/bepasty/bepasty-server/issues/66
  source_url: https://ossindex.net/resource/package/8400786526/vulnerabilities
- id: snykio:pypi:bepasty:40260
  title: Cross-site Scripting (XSS)
  description: |+
    [`bepasty`][1] is a binary pastebin / file upload service.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks via the `download.py` file, due to it rendering the
    content as html rather text. An attacker user could craft a file that
    would run on the server and execute arbitrary code.



    [1]: https://pypi.python.org/pypi/bepasty
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: bepasty
  vulnerable_versions:
  - "< 0.3.0"
  severity: medium
  package_manager: pypi
  cwe:
  - CWE-79
  disclosed_date: 2016-10-31
  created_date: 2016-10-31
  last_modified_date: 2016-10-31
  credit:
  - Unknown
  references:
  - https://github.com/bepasty/bepasty-server/blob/master/CHANGES.rst#release-030
  - https://github.com/bepasty/bepasty-server/commit/068fc4e1906bda3cd94705ba2907e52864f10ee3
  source_url: https://snyk.io/vuln/SNYK-PYTHON-BEPASTY-40260
- id: snykio:pypi:bepasty:40503
  title: Information Exposure
  description: |
    [`bepasty`][1] is a binary pastebin / file upload service Affected
    versions of this package are vulnerable to Information Exposure. The
    metadata of locked files is visible for users with the `read`
    permission.



    [1]: https://pypi.python.org/pypi/bepasty
  affected_package: bepasty
  vulnerable_versions:
  - "< 0.3.0"
  severity: medium
  package_manager: pypi
  cwe:
  - CWE-200
  disclosed_date: 2016-10-31
  created_date: 2016-10-31
  last_modified_date: 2016-10-31
  credit:
  - Unknown
  references:
  - https://github.com/bepasty/bepasty-server/blob/master/CHANGES.rst#release-030
  - https://github.com/bepasty/bepasty-server/issues/59
  source_url: https://snyk.io/vuln/SNYK-PYTHON-BEPASTY-40503
