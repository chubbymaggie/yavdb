---
- id: snykio:pypi:ipython:40329
  title: Cross-site Scripting (XSS)
  description: |+
    [`ipython`][1] is a Productive Interactive Computing.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks.



    [1]: https://pypi.python.org/pypi/ipython
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: ipython
  vulnerable_versions:
  - "< 3.2.0"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-4706
  cwe:
  - CWE-79
  disclosed_date: 2015-06-22
  created_date: 2015-06-22
  last_modified_date: 2015-06-22
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2015-4706
  - https://github.com/ipython/ipython/commit/7222bd53ad089a65fd610fab4626f9d0ab47dfce
  source_url: https://snyk.io/vuln/SNYK-PYTHON-IPYTHON-40329
- id: snykio:pypi:ipython:40330
  title: Cross-site Scripting (XSS)
  description: |+
    [`ipython`][1] is a Productive Interactive Computing.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks.



    [1]: https://pypi.python.org/pypi/ipython
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: ipython
  vulnerable_versions:
  - "< 3.2.0"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-4707
  cwe:
  - CWE-79
  disclosed_date: 2015-06-22
  created_date: 2015-06-22
  last_modified_date: 2015-06-22
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2015-4707
  - https://github.com/ipython/ipython/commit/7222bd53ad089a65fd610fab4626f9d0ab47dfce
  source_url: https://snyk.io/vuln/SNYK-PYTHON-IPYTHON-40330
- id: snykio:pypi:ipython:40338
  title: Cross-site Request Forgery (CSRF)
  description: |
    [`ipython`][1] is a Productive Interactive Computing.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF) attacks.



    [1]: https://pypi.python.org/pypi/ipython
  affected_package: ipython
  vulnerable_versions:
  - "< 3.2.1"
  severity: high
  package_manager: pypi
  cve:
  - CVE-2015-5607
  cwe:
  - CWE-352
  disclosed_date: 2015-07-08
  created_date: 2015-07-08
  last_modified_date: 2015-07-08
  credit:
  - Unknown
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2015-5607
  - https://github.com/ipython/ipython/commit/1415a9710407e7c14900531813c15ba6165f0816
  source_url: https://snyk.io/vuln/SNYK-PYTHON-IPYTHON-40338
- id: snykio:pypi:ipython:40407
  title: Arbitrary Code Execution
  description: |
    [`ipython`][1] is a Productive Interactive Computing.

    Affected versions of this package are vulnerable to Arbitrary Code
    Execution.



    [1]: https://pypi.python.org/pypi/ipython
  affected_package: ipython
  vulnerable_versions:
  - ">= 2 < 4.0"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2016-6524
  cwe:
  - CWE-94
  disclosed_date: 2016-08-08
  created_date: 2016-08-08
  last_modified_date: 2016-08-08
  credit:
  - Steven Silvester
  references:
  - http://blog.jupyter.org/2016/08/03/security-fix-notebook-4-2-2/
  - https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-6524
  source_url: https://snyk.io/vuln/SNYK-PYTHON-IPYTHON-40407
- id: snykio:pypi:ipython:40723
  title: Cross-site Scripting (XSS)
  description: |+
    Affected versions of [`ipython`][1] are vulnerable to Cross-Site
    Scripting (XSS) attacks.

    Cross-site scripting (XSS) vulnerability in the file browser in
    notebook/notebookapp.py in IPython Notebook before 3.2.2 and Jupyter
    Notebook 4.0.x before 4.0.5 allows remote attackers to inject arbitrary
    web script or HTML via a folder name. NOTE: this was originally reported
    as a cross-site request forgery (CSRF) vulnerability, but this may be
    inaccurate.



    [1]: https://pypi.python.org/pypi/ipython
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: ipython
  vulnerable_versions:
  - "< 3.2.2"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-6938
  cwe:
  - CWE-79
  disclosed_date: 2015-09-21
  created_date: 2017-12-04
  last_modified_date: 2017-12-04
  credit:
  - Juan Broullón
  references:
  - https://github.com/ipython/ipython/commit/3ab41641cf6fce3860c73d5cf4645aa12e1e5892
  - https://nvd.nist.gov/vuln/detail/CVE-2015-6938
  source_url: https://snyk.io/vuln/SNYK-PYTHON-IPYTHON-40723
- id: snykio:pypi:ipython:40724
  title: Arbitrary Code Execution
  description: |
    Affected versions of [`ipython`][1] are vulnerable to Arbitrary Code
    Execution[https://nvd.nist.gov/vuln/detail/CVE-2015-7337][2].

    The editor in IPython Notebook before 3.2.2 and Jupyter Notebook 4.0.x
    before 4.0.5 allows remote attackers to execute arbitrary JavaScript
    code via a crafted file, which triggers a redirect to files/, related to
    MIME types.



    [1]: https://pypi.python.org/pypi/ipython
    [2]: https://nvd.nist.gov/vuln/detail/CVE-2015-7337
  affected_package: ipython
  vulnerable_versions:
  - "< 3.2.2"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2015-7337
  cwe:
  - CWE-77
  disclosed_date: 2015-09-29
  created_date: 2017-12-04
  last_modified_date: 2017-12-04
  credit:
  - Unknown
  references:
  - https://github.com/ipython/ipython/commit/0a8096adf165e2465550bd5893d7e352544e5967
  - https://nvd.nist.gov/vuln/detail/CVE-2015-7337
  source_url: https://snyk.io/vuln/SNYK-PYTHON-IPYTHON-40724
