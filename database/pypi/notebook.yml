---
- id: snykio:pypi:notebook:173774
  title: Cross-site Inclusion
  description: |
    [notebook][1] is a web application that allows you to create and share
    documents that contain live code, equations, visualizations, and
    explanatory text.

    Affected versions of this package are vulnerable to Cross-site
    Inclusion. This is due to the package allowing inclusion of resources on
    malicious pages when visited by users who are authenticated via a
    Jupyter server.



    [1]: https://pypi.org/project/notebook/
  affected_package: notebook
  vulnerable_versions:
  - "< 5.7.6"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2019-9644
  cwe:
  - CWE-79
  disclosed_date: 2019-03-12
  created_date: 2019-03-12
  last_modified_date: 2019-03-12
  credit:
  - Unknown
  references:
  - https://github.com/jupyter/notebook/commit/bfaa61385729ed4fb453863053f9a79141f01119
  - https://github.com/jupyter/notebook/compare/f3f00df...05aa4b2
  source_url: https://snyk.io/vuln/SNYK-PYTHON-NOTEBOOK-173774
- id: snykio:pypi:notebook:40406
  title: Arbitrary Code Execution
  description: |
    [`notebook`][1] is a web-based notebook environment for interactive
    computing.

    Affected versions of this package are Arbitrary Code Execution.



    [1]: https://pypi.python.org/pypi/notebook
  affected_package: notebook
  vulnerable_versions:
  - "< 4.2.2"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2016-6524
  cwe:
  - CWE-94
  disclosed_date: 2016-07-26
  created_date: 2016-07-26
  last_modified_date: 2016-07-26
  credit:
  - Steven Silvester
  references:
  - http://blog.jupyter.org/2016/08/03/security-fix-notebook-4-2-2/
  - https://github.com/jupyter/notebook/commit/d7fd3e2803afec591abbb3dc32eeab00fa095207
  source_url: https://snyk.io/vuln/SNYK-PYTHON-NOTEBOOK-40406
- id: snykio:pypi:notebook:40449
  title: Cross-site Request Forgery (CSRF)
  description: |
    [`notebook`][1] is a web-based notebook environment for interactive
    computing.

    Affected versions of this package are vulnerable to Cross-site Request
    Forgery (CSRF) attacks due to improper validation of the CSRF token. A
    malicious user may be able to spawn new kernels and create empty,
    untitled files on the user\'s notebook server.

    **Note:** This affects users of Firefox or Microsoft (IE, Edge)
    browsers, and any other browsers that do not set the Origin header on
    cross-site forms. WebKit and Blink based browsers like Safari and Chrome
    are not affected.



    [1]: https://pypi.python.org/pypi/notebook
  affected_package: notebook
  vulnerable_versions:
  - "< 4.3.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2016-9971
  cwe:
  - CWE-352
  disclosed_date: 2016-12-13
  created_date: 2016-12-13
  last_modified_date: 2016-12-13
  credit:
  - Unknown
  references:
  - http://blog.jupyter.org/2016/12/21/jupyter-notebook-4-3-1/
  - https://github.com/jupyter/notebook/commit/c5bb329bf8c79a6f46cff8b433a8588a7eb6756e
  source_url: https://snyk.io/vuln/SNYK-PYTHON-NOTEBOOK-40449
- id: snykio:pypi:notebook:72620
  title: Cross-site Scripting (XSS)
  description: |+
    [notebook][1] is an open-source web application that allows you to
    create and share documents that contain live code, equations,
    visualizations and narrative text.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks via a crafted directory name because
    `notebook/static/tree/js/notebooklist.js` handles certain URLs unsafely.



    [1]: https://pypi.org/project/notebook/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: notebook
  vulnerable_versions:
  - "< 5.7.2"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2018-19352
  cwe:
  - CWE-79
  disclosed_date: 2018-11-18
  created_date: 2018-11-19
  last_modified_date: 2018-11-19
  credit:
  - Unknown
  references:
  - https://github.com/jupyter/notebook/blob/master/docs/source/changelog.rst
  - https://github.com/jupyter/notebook/commit/288b73e1edbf527740e273fcc69b889460871648
  source_url: https://snyk.io/vuln/SNYK-PYTHON-NOTEBOOK-72620
- id: snykio:pypi:notebook:72621
  title: Cross-site Scripting (XSS)
  description: |+
    [notebook][1] is a web application that allows you to create and share
    documents that contain live code, equations, visualizations, and
    explanatory text.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks via an untrusted notebook because `nbconvert` responses
    are considered to have the same origin as the notebook server.



    [1]: https://pypi.org/project/notebook/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: notebook
  vulnerable_versions:
  - "< 5.7.1"
  severity: medium
  package_manager: pypi
  cve:
  - CVE-2018-19351
  cwe:
  - CWE-79
  disclosed_date: 2018-10-22
  created_date: 2018-11-19
  last_modified_date: 2018-11-19
  credit:
  - Unknown
  references:
  - https://github.com/jupyter/notebook/blob/master/docs/source/changelog.rst
  - https://github.com/jupyter/notebook/commit/107a89fce5f413fb5728c1c5d2c7788e1fb17491
  source_url: https://snyk.io/vuln/SNYK-PYTHON-NOTEBOOK-72621
