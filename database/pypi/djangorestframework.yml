---
- id: snykio:pypi:djangorestframework:40656
  title: Information Exposure
  description: |
    [`djangorestframework`][1] is a web API\'s for Django.

    Affected versions of this package are vulnerable to Information
    Exposure.



    [1]: https://pypi.python.org/pypi/djangorestframework/3.6.4
  affected_package: djangorestframework
  vulnerable_versions:
  - ">= 2.4.0 < 2.4.5"
  - ">= 3 < 3.1.1"
  severity: medium
  package_manager: pypi
  cwe:
  - CWE-200
  disclosed_date: 2015-05-23
  created_date: 2017-09-14
  last_modified_date: 2017-09-14
  credit:
  - Unknown
  references:
  - https://github.com/encode/django-rest-framework/blob/3.6.4/docs/topics/release-notes.md#311
  - https://github.com/encode/django-rest-framework/commit/7872d0acbffeea5f4420aae5627f8767c6418ba3
  - https://github.com/encode/django-rest-framework/commit/58f9603f703138cbd6749c64dd7da2d41468fc99
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGORESTFRAMEWORK-40656
- id: snykio:pypi:djangorestframework:40709
  title: Cross-Site Scripting (XSS)
  description: |+
    Affected versions of [`djangorestframework`][1] are vulnerable to
    Cross-Site Scripting (XSS) attacks.



    [1]: https://pypi.python.org/pypi/djangorestframework
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: djangorestframework
  vulnerable_versions:
  - "< 2.4.4"
  severity: medium
  package_manager: pypi
  cwe:
  - CWE-79
  disclosed_date: 2014-11-03
  created_date: 2017-12-04
  last_modified_date: 2017-12-04
  credit:
  - Unknown
  references:
  - https://github.com/encode/django-rest-framework/blob/version-2.4.x/docs/topics/release-notes.md#244
  - https://github.com/encode/django-rest-framework/commit/b5c98f686d8aa8f249aa0270f8ee0560482d9538
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGORESTFRAMEWORK-40709
- id: snykio:pypi:djangorestframework:40758
  title: XML External Entity (XXE) Injection
  description: |+
    Affected versions of [`djangorestframework`][1] are vulnerable to XML
    External Entity (XXE) Injection which happens because
    `xml.etree.ElementTree` in not secured against XXE injections.



    [1]: https://pypi.python.org/pypi/djangorestframework
    \nXXE Injection is a type of attack against an application that parses XML
    input. XML is a markup language that defines a set of rules for encoding
    documents in a format that is both human-readable and machine-readable.
    By default, many XML processors allow specification of an external
    entity, a URI that is dereferenced and evaluated during XML processing.
    When an XML document is being parsed, the parser can make a request and
    include the content at the specified URI inside of the XML document.

    Attacks can include disclosing local files, which may contain sensitive
    data such as passwords or private user data, using file: schemes or
    relative paths in the system identifier.

    For example, below is a sample XML document, containing an XML element-
    username.

        <?xml version="1.0" encoding="ISO-8859-1"?>
           <username>John</username>
        </xml>

    An external XML entity - `xxe`, is defined using a system identifier and
    present within a DOCTYPE header. These entities can access local or
    remote content. For example the below code contains an external XML
    entity that would fetch the content of `/etc/passwd` and display it to
    the user rendered by `username`.

        <?xml version="1.0" encoding="ISO-8859-1"?>
        <!DOCTYPE foo [
           <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
           <username>&xxe;</username>
        </xml>

    Other XXE Injection attacks can access local resources that may not stop
    returning data, possibly impacting application availability and leading
    to Denial of Service.

  affected_package: djangorestframework
  vulnerable_versions:
  - "< 2.2.1"
  severity: high
  package_manager: pypi
  cwe:
  - CWE-611
  disclosed_date: 2013-02-22
  created_date: 2017-12-04
  last_modified_date: 2017-12-04
  credit:
  - Unknown
  references:
  - https://github.com/encode/django-rest-framework/blob/version-2.4.x/docs/topics/release-notes.md#221
  - http://blog.python.org/2013/02/announcing-defusedxml-fixes-for-xml.html
  - https://github.com/encode/django-rest-framework/pull/673
  - https://github.com/encode/django-rest-framework/commit/dcee027fa97f015ff3b87f0fd72b7995cdd6e155
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGORESTFRAMEWORK-40758
- id: snykio:pypi:djangorestframework:40759
  title: Information Exposure
  description: |
    Affected versions of [`djangorestframework`][1] are vulnerable to
    Information Exposure.

    `OrderingField` allows ordering on any fields, which an malicious
    attacker can exploit and ordering fields that are not visible and get
    sensitive data.



    [1]: https://pypi.python.org/pypi/djangorestframework
  affected_package: djangorestframework
  vulnerable_versions:
  - "< 2.3.12"
  severity: medium
  package_manager: pypi
  cwe:
  - CWE-200
  disclosed_date: 2014-01-15
  created_date: 2017-12-04
  last_modified_date: 2017-12-04
  credit:
  - Unknown
  references:
  - https://github.com/encode/django-rest-framework/blob/version-2.4.x/docs/topics/release-notes.md#2312
  - https://github.com/encode/django-rest-framework/commit/71c03b9db97edbde228777981de0ac7b664302de
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGORESTFRAMEWORK-40759
- id: snykio:pypi:djangorestframework:40760
  title: Cross-Site Scripting (XSS)
  description: |+
    Affected versions of [`djangorestframework`][1] are vulnerable to
    Cross-Site Scripting (XSS) attacks.



    [1]: https://pypi.python.org/pypi/djangorestframework
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: djangorestframework
  vulnerable_versions:
  - "< 2.3.14"
  severity: medium
  package_manager: pypi
  cwe:
  - CWE-79
  disclosed_date: 2014-06-12
  created_date: 2017-12-04
  last_modified_date: 2017-12-04
  credit:
  - Unknown
  references:
  - https://github.com/encode/django-rest-framework/blob/version-2.4.x/docs/topics/release-notes.md#2314
  - https://github.com/encode/django-rest-framework/pull/1640
  - https://github.com/encode/django-rest-framework/commit/e11f41ebc4ef088a5849771dfda5a7fba4f82904
  source_url: https://snyk.io/vuln/SNYK-PYTHON-DJANGORESTFRAMEWORK-40760
