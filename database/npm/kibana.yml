---
- id: snykio:npm:kibana:2016-06-27
  title: Cross-site Scripting (XSS)
  description: |+
    [`kibana`][1] is an open source (Apache Licensed), browser based
    analytics and search dashboard for Elasticsearch. Kibana is a snap to
    setup and start using. Kibana strives to be easy to get started with,
    while also being flexible and powerful, just like Elastic.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://www.npmjs.com/package/kibana
    \n[`kibana`][1] is an open source (Apache Licensed), browser based
    analytics and search dashboard for Elasticsearch. Kibana is a snap to
    setup and start using. Kibana strives to be easy to get started with,
    while also being flexible and powerful, just like Elastic.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://www.npmjs.com/package/kibana
    \n[`kibana`][1] is an open source (Apache Licensed), browser based
    analytics and search dashboard for Elasticsearch. Kibana is a snap to
    setup and start using. Kibana strives to be easy to get started with,
    while also being flexible and powerful, just like Elastic.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://www.npmjs.com/package/kibana
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: kibana
  vulnerable_versions:
  - "<5.0.0-alpha5"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://github.com/elastic/kibana/pull/7568
  - https://github.com/elastic/kibana/issues/7566
  - https://github.com/elastic/kibana/commit/271aa697075bc2c8f931a1310b20a4ced119bcd5
  source_url: https://snyk.io/vuln/npm:kibana:20160628
- id: snykio:npm:kibana:2017-02-14
  title: Denial of Service (DoS)
  description: |+
    [`kibana`][1] is an open source, browser-based analytics and search
    dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS).

    Kibana versions prior to 5.2.1 configured for SSL client access, file
    descriptors will fail to be cleaned up after certain requests and will
    accumulate over time until the process crashes.



    [1]: https://www.npmjs.com/package/kibana
    \n[`kibana`][1] is an open source, browser-based analytics and search
    dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS).

    Kibana versions prior to 5.2.1 configured for SSL client access, file
    descriptors will fail to be cleaned up after certain requests and will
    accumulate over time until the process crashes.



    [1]: https://www.npmjs.com/package/kibana
    \n[`kibana`][1] is an open source, browser-based analytics and search
    dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS).

    Kibana versions prior to 5.2.1 configured for SSL client access, file
    descriptors will fail to be cleaned up after certain requests and will
    accumulate over time until the process crashes.



    [1]: https://www.npmjs.com/package/kibana
    \n[`kibana`][1] is an open source, browser-based analytics and search
    dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS).

    Kibana versions prior to 5.2.1 configured for SSL client access, file
    descriptors will fail to be cleaned up after certain requests and will
    accumulate over time until the process crashes.



    [1]: https://www.npmjs.com/package/kibana
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: kibana
  vulnerable_versions:
  - "<5.2.1"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-8452
  cwe:
  - CWE-400
  credit:
  - Unknown
  references:
  - https://www.elastic.co/blog/kibana-5-2-1-released
  source_url: https://snyk.io/vuln/npm:kibana:20170214
- id: snykio:npm:kibana:2017-05-26
  title: Cross-site Scripting (XSS)
  description: |+
    [kibana][1] is an open source (Apache Licensed), browser-based analytics
    and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks in the Time Series Visual Builder. It could allow an
    attacker to obtain sensitive information from Kibana users.



    [1]: https://github.com/elastic/kibana
    \n[kibana][1] is an open source (Apache Licensed), browser-based analytics
    and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks in the Time Series Visual Builder. It could allow an
    attacker to obtain sensitive information from Kibana users.



    [1]: https://github.com/elastic/kibana
    \n[kibana][1] is an open source (Apache Licensed), browser-based analytics
    and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks in the Time Series Visual Builder. It could allow an
    attacker to obtain sensitive information from Kibana users.



    [1]: https://github.com/elastic/kibana
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: kibana
  vulnerable_versions:
  - "<5.4.1"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-8439
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://discuss.elastic.co/t/elastic-stack-5-4-1-and-5-3-3-security-updates/87952
  - https://nvd.nist.gov/vuln/detail/CVE-2017-8439
  source_url: https://snyk.io/vuln/npm:kibana:20170526
- id: snykio:npm:kibana:2017-06-05
  title: Cross-site Scripting (XSS)
  description: |+
    [`Kibana`][1] is an open source, browser-based analytics and search
    dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS).

    Starting in version 5.3.0, Kibana had a cross-site scripting (XSS)
    vulnerability in the Discover page that could allow an attacker to
    obtain sensitive information from or perform destructive actions on
    behalf of other Kibana users.



    [1]: https://www.npmjs.com/package/kibana
    \n[`Kibana`][1] is an open source, browser-based analytics and search
    dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS).

    Starting in version 5.3.0, Kibana had a cross-site scripting (XSS)
    vulnerability in the Discover page that could allow an attacker to
    obtain sensitive information from or perform destructive actions on
    behalf of other Kibana users.



    [1]: https://www.npmjs.com/package/kibana
    \n[`Kibana`][1] is an open source, browser-based analytics and search
    dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS).

    Starting in version 5.3.0, Kibana had a cross-site scripting (XSS)
    vulnerability in the Discover page that could allow an attacker to
    obtain sensitive information from or perform destructive actions on
    behalf of other Kibana users.



    [1]: https://www.npmjs.com/package/kibana
    \n[`Kibana`][1] is an open source, browser-based analytics and search
    dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS).

    Starting in version 5.3.0, Kibana had a cross-site scripting (XSS)
    vulnerability in the Discover page that could allow an attacker to
    obtain sensitive information from or perform destructive actions on
    behalf of other Kibana users.



    [1]: https://www.npmjs.com/package/kibana
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: kibana
  vulnerable_versions:
  - ">=5.3.0 <5.3.3 || >=5.4.0 <5.4.1"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-8440
  cwe:
  - CWE-79
  credit:
  - Thomas Goytil
  source_url: https://snyk.io/vuln/npm:kibana:20170605
- id: snykio:npm:kibana:2017-06-16
  title: Denial of Service (DoS)
  description: |+
    [kibana][1] is an open source (Apache Licensed), browser-based analytics
    and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. When it is configured for SSL client access, file
    descriptors will fail to be cleaned up after certain requests and will
    accumulate over time until the process crashes. Requests that are
    canceled before data is sent can also crash the process.



    [1]: https://github.com/elastic/kibana
    \n[kibana][1] is an open source (Apache Licensed), browser-based analytics
    and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. When it is configured for SSL client access, file
    descriptors will fail to be cleaned up after certain requests and will
    accumulate over time until the process crashes. Requests that are
    canceled before data is sent can also crash the process.



    [1]: https://github.com/elastic/kibana
    \n[kibana][1] is an open source (Apache Licensed), browser-based analytics
    and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks. When it is configured for SSL client access, file
    descriptors will fail to be cleaned up after certain requests and will
    accumulate over time until the process crashes. Requests that are
    canceled before data is sent can also crash the process.



    [1]: https://github.com/elastic/kibana
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: kibana
  vulnerable_versions:
  - "<5.2.1"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-8452
  cwe:
  - CWE-400
  credit:
  - Unknown
  references:
  - https://www.elastic.co/community/security
  - https://nvd.nist.gov/vuln/detail/CVE-2017-8452
  source_url: https://snyk.io/vuln/npm:kibana:20170616-1
- id: snykio:npm:kibana:2017-06-16
  title: Open Redirect
  description: |
    [`Kibana`][1] is an open source (Apache Licensed), browser-based
    analytics and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Open Redirect.

    With X-Pack installed, Kibana versions before 5.3.1 have an open
    redirect vulnerability on the login page that would enable an attacker
    to craft a link that redirects to an arbitrary website. Shield versions
    for Kibana prior to 2.4.5 are also affected.



    [1]: https://www.npmjs.com/package/kibana
    \n[`Kibana`][1] is an open source (Apache Licensed), browser-based
    analytics and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Open Redirect.

    With X-Pack installed, Kibana versions before 5.3.1 have an open
    redirect vulnerability on the login page that would enable an attacker
    to craft a link that redirects to an arbitrary website. Shield versions
    for Kibana prior to 2.4.5 are also affected.



    [1]: https://www.npmjs.com/package/kibana
    \n[`Kibana`][1] is an open source (Apache Licensed), browser-based
    analytics and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Open Redirect.

    With X-Pack installed, Kibana versions before 5.3.1 have an open
    redirect vulnerability on the login page that would enable an attacker
    to craft a link that redirects to an arbitrary website. Shield versions
    for Kibana prior to 2.4.5 are also affected.



    [1]: https://www.npmjs.com/package/kibana
    \n[`Kibana`][1] is an open source (Apache Licensed), browser-based
    analytics and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Open Redirect.

    With X-Pack installed, Kibana versions before 5.3.1 have an open
    redirect vulnerability on the login page that would enable an attacker
    to craft a link that redirects to an arbitrary website. Shield versions
    for Kibana prior to 2.4.5 are also affected.



    [1]: https://www.npmjs.com/package/kibana
  affected_package: kibana
  vulnerable_versions:
  - "<5.3.1"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-8451
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://www.elastic.co/community/security
  - http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-8451
  source_url: https://snyk.io/vuln/npm:kibana:20170616
- id: snykio:npm:kibana:2017-06-28
  title: Information Exposure
  description: |
    [`Kibana`][1] is an open source, browser-based analytics and search
    dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Information
    Exposure.

    In Kibana X-Pack security versions prior to 5.4.3 if a Kibana user opens
    a crafted Kibana URL the result could be a redirect to an improperly
    initialized Kibana login screen. If the user enters credentials on this
    screen, the credentials will appear in the URL bar. The credentials
    could then be viewed by untrusted parties or logged into the Kibana
    access logs.



    [1]: https://www.npmjs.com/package/kibana
    \n[`Kibana`][1] is an open source, browser-based analytics and search
    dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Information
    Exposure.

    In Kibana X-Pack security versions prior to 5.4.3 if a Kibana user opens
    a crafted Kibana URL the result could be a redirect to an improperly
    initialized Kibana login screen. If the user enters credentials on this
    screen, the credentials will appear in the URL bar. The credentials
    could then be viewed by untrusted parties or logged into the Kibana
    access logs.



    [1]: https://www.npmjs.com/package/kibana
    \n[`Kibana`][1] is an open source, browser-based analytics and search
    dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Information
    Exposure.

    In Kibana X-Pack security versions prior to 5.4.3 if a Kibana user opens
    a crafted Kibana URL the result could be a redirect to an improperly
    initialized Kibana login screen. If the user enters credentials on this
    screen, the credentials will appear in the URL bar. The credentials
    could then be viewed by untrusted parties or logged into the Kibana
    access logs.



    [1]: https://www.npmjs.com/package/kibana
    \n[`Kibana`][1] is an open source, browser-based analytics and search
    dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Information
    Exposure.

    In Kibana X-Pack security versions prior to 5.4.3 if a Kibana user opens
    a crafted Kibana URL the result could be a redirect to an improperly
    initialized Kibana login screen. If the user enters credentials on this
    screen, the credentials will appear in the URL bar. The credentials
    could then be viewed by untrusted parties or logged into the Kibana
    access logs.



    [1]: https://www.npmjs.com/package/kibana
  affected_package: kibana
  vulnerable_versions:
  - "<5.4.3"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-8443
  cwe:
  - CWE-200
  credit:
  - Unknown
  references:
  - https://discuss.elastic.co/t/elastic-stack-5-4-3-security-update/91006
  source_url: https://snyk.io/vuln/npm:kibana:20170628
- id: snykio:npm:kibana:2017-09-28
  title: Cross-site Scripting (XSS)
  description: |+
    [kibana][1] is an open source (Apache Licensed), browser-based analytics
    and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks in Timelion. It could allow an attacker to obtain
    sensitive information from or perform destructive actions on behalf of
    other Kibana users.



    [1]: https://github.com/elastic/kibana
    \n[kibana][1] is an open source (Apache Licensed), browser-based analytics
    and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks in Timelion. It could allow an attacker to obtain
    sensitive information from or perform destructive actions on behalf of
    other Kibana users.



    [1]: https://github.com/elastic/kibana
    \n[kibana][1] is an open source (Apache Licensed), browser-based analytics
    and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks in Timelion. It could allow an attacker to obtain
    sensitive information from or perform destructive actions on behalf of
    other Kibana users.



    [1]: https://github.com/elastic/kibana
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: kibana
  vulnerable_versions:
  - "<5.6.1"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-11479
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://discuss.elastic.co/t/x-pack-alerting-and-kibana-5-6-1-security-update/101884
  - https://nvd.nist.gov/vuln/detail/CVE-2017-11479
  source_url: https://snyk.io/vuln/npm:kibana:20170928
- id: snykio:npm:kibana:2017-12-06
  title: Cross-site Scripting (XSS)
  description: |+
    [`Kibana`][1] is an open source (Apache Licensed), browser-based
    analytics and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS).

    Kibana versions prior to 6.0.1 and 5.6.5 had a cross-site scripting
    (XSS) vulnerability via URL fields that could allow an attacker to
    obtain sensitive information from or perform destructive actions on
    behalf of other Kibana users.



    [1]: https://www.npmjs.com/package/kibana
    \n[`Kibana`][1] is an open source (Apache Licensed), browser-based
    analytics and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS).

    Kibana versions prior to 6.0.1 and 5.6.5 had a cross-site scripting
    (XSS) vulnerability via URL fields that could allow an attacker to
    obtain sensitive information from or perform destructive actions on
    behalf of other Kibana users.



    [1]: https://www.npmjs.com/package/kibana
    \n[`Kibana`][1] is an open source (Apache Licensed), browser-based
    analytics and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS).

    Kibana versions prior to 6.0.1 and 5.6.5 had a cross-site scripting
    (XSS) vulnerability via URL fields that could allow an attacker to
    obtain sensitive information from or perform destructive actions on
    behalf of other Kibana users.



    [1]: https://www.npmjs.com/package/kibana
    \n[`Kibana`][1] is an open source (Apache Licensed), browser-based
    analytics and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS).

    Kibana versions prior to 6.0.1 and 5.6.5 had a cross-site scripting
    (XSS) vulnerability via URL fields that could allow an attacker to
    obtain sensitive information from or perform destructive actions on
    behalf of other Kibana users.



    [1]: https://www.npmjs.com/package/kibana
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: kibana
  vulnerable_versions:
  - "<5.6.5 || >=6 <6.0.1"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-11481
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://discuss.elastic.co/t/kibana-6-0-1-and-5-6-5-security-update/110571
  source_url: https://snyk.io/vuln/npm:kibana:20171206
- id: snykio:npm:kibana:2017-12-06
  title: Open Redirect
  description: |
    [`Kibana`][1] is an open source (Apache Licensed), browser-based
    analytics and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Open Redirect.

    The Kibana fix for CVE-2017-8451 was found to be incomplete. With X-Pack
    installed, Kibana versions before 6.0.1 and 5.6.5 have an open redirect
    vulnerability on the login page that would enable an attacker to craft a
    link that redirects to an arbitrary website.



    [1]: https://www.npmjs.com/package/kibana
    \n[`Kibana`][1] is an open source (Apache Licensed), browser-based
    analytics and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Open Redirect.

    The Kibana fix for CVE-2017-8451 was found to be incomplete. With X-Pack
    installed, Kibana versions before 6.0.1 and 5.6.5 have an open redirect
    vulnerability on the login page that would enable an attacker to craft a
    link that redirects to an arbitrary website.



    [1]: https://www.npmjs.com/package/kibana
    \n[`Kibana`][1] is an open source (Apache Licensed), browser-based
    analytics and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Open Redirect.

    The Kibana fix for CVE-2017-8451 was found to be incomplete. With X-Pack
    installed, Kibana versions before 6.0.1 and 5.6.5 have an open redirect
    vulnerability on the login page that would enable an attacker to craft a
    link that redirects to an arbitrary website.



    [1]: https://www.npmjs.com/package/kibana
    \n[`Kibana`][1] is an open source (Apache Licensed), browser-based
    analytics and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Open Redirect.

    The Kibana fix for CVE-2017-8451 was found to be incomplete. With X-Pack
    installed, Kibana versions before 6.0.1 and 5.6.5 have an open redirect
    vulnerability on the login page that would enable an attacker to craft a
    link that redirects to an arbitrary website.



    [1]: https://www.npmjs.com/package/kibana
  affected_package: kibana
  vulnerable_versions:
  - "<5.6.5 || >=6 <6.0.1"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-11482
  cwe:
  - CWE-601
  credit:
  - Unknown
  references:
  - https://discuss.elastic.co/t/kibana-6-0-1-and-5-6-5-security-update/110571
  source_url: https://snyk.io/vuln/npm:kibana:20171206-1
- id: snykio:npm:kibana:2018-01-16
  title: Cross-site Scripting (XSS)
  description: |+
    [kibana][1] is an open source (Apache Licensed), browser-based analytics
    and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks via the colored fields formatter that could allow an
    attacker to obtain sensitive information from or perform destructive
    actions on behalf of other Kibana users.



    [1]: https://github.com/elastic/kibana
    \n[kibana][1] is an open source (Apache Licensed), browser-based analytics
    and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks via the colored fields formatter that could allow an
    attacker to obtain sensitive information from or perform destructive
    actions on behalf of other Kibana users.



    [1]: https://github.com/elastic/kibana
    \n[kibana][1] is an open source (Apache Licensed), browser-based analytics
    and search dashboard for Elasticsearch.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks via the colored fields formatter that could allow an
    attacker to obtain sensitive information from or perform destructive
    actions on behalf of other Kibana users.



    [1]: https://github.com/elastic/kibana
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: kibana
  vulnerable_versions:
  - ">=5.1.1 <5.6.6 || >=6.0.0 <6.1.2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2018-3818
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2018-3818
  - https://discuss.elastic.co/t/elastic-stack-6-1-2-and-5-6-6-security-update/115763
  - https://www.securityfocus.com/bid/102734
  source_url: https://snyk.io/vuln/npm:kibana:20180116
- id: snykio:npm:kibana:2018-01-27
  title: Cross-site Scripting (XSS)
  description: |+
    [`kibana`][1] is an open source (Apache Licensed), browser based
    analytics and search dashboard for Elasticsearch. Kibana is a snap to
    setup and start using. Kibana strives to be easy to get started with,
    while also being flexible and powerful, just like Elastic.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS) via the tag cloud visualization that could allow an attacker to
    obtain sensitive information from or perform destructive actions on
    behalf of other Kibana users.



    [1]: https://www.npmjs.com/package/kibana
    \n[`kibana`][1] is an open source (Apache Licensed), browser based
    analytics and search dashboard for Elasticsearch. Kibana is a snap to
    setup and start using. Kibana strives to be easy to get started with,
    while also being flexible and powerful, just like Elastic.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS) via the tag cloud visualization that could allow an attacker to
    obtain sensitive information from or perform destructive actions on
    behalf of other Kibana users.



    [1]: https://www.npmjs.com/package/kibana
    \n[`kibana`][1] is an open source (Apache Licensed), browser based
    analytics and search dashboard for Elasticsearch. Kibana is a snap to
    setup and start using. Kibana strives to be easy to get started with,
    while also being flexible and powerful, just like Elastic.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS) via the tag cloud visualization that could allow an attacker to
    obtain sensitive information from or perform destructive actions on
    behalf of other Kibana users.



    [1]: https://www.npmjs.com/package/kibana
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: kibana
  vulnerable_versions:
  - ">=5.1.1 <5.6.7 || >=6.0.0 <6.1.3"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2018-3821
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://www.elastic.co/community/security
  source_url: https://snyk.io/vuln/npm:kibana:20180130-1
- id: snykio:npm:kibana:2018-01-29
  title: Cross-site Scripting (XSS)
  description: |+
    [`kibana`][1] is Kibana is an open source (Apache Licensed), browser
    based analytics and search dashboard for Elasticsearch. Kibana is a snap
    to setup and start using. Kibana strives to be easy to get started with,
    while also being flexible and powerful, just like Elastic.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://www.npmjs.com/package/kibana
    \n[`kibana`][1] is Kibana is an open source (Apache Licensed), browser
    based analytics and search dashboard for Elasticsearch. Kibana is a snap
    to setup and start using. Kibana strives to be easy to get started with,
    while also being flexible and powerful, just like Elastic.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://www.npmjs.com/package/kibana
    \n[`kibana`][1] is Kibana is an open source (Apache Licensed), browser
    based analytics and search dashboard for Elasticsearch. Kibana is a snap
    to setup and start using. Kibana strives to be easy to get started with,
    while also being flexible and powerful, just like Elastic.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://www.npmjs.com/package/kibana
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: kibana
  vulnerable_versions:
  - "<6.1.3 >=6.1.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2018-3820
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://www.elastic.co/community/security
  source_url: https://snyk.io/vuln/npm:kibana:20180130
- id: snykio:npm:kibana:2018-01-29
  title: Open Redirect
  description: |
    [`kibana`][1] is Kibana is an open source (Apache Licensed), browser
    based analytics and search dashboard for Elasticsearch. Kibana is a snap
    to setup and start using. Kibana strives to be easy to get started with,
    while also being flexible and powerful, just like Elastic.

    Affected versions of the package are vulnerable to Open Redirect the
    login page that would enable an attacker to craft a link that redirects
    to an arbitrary website.



    [1]: https://www.npmjs.com/package/kibana
    \n[`kibana`][1] is Kibana is an open source (Apache Licensed), browser
    based analytics and search dashboard for Elasticsearch. Kibana is a snap
    to setup and start using. Kibana strives to be easy to get started with,
    while also being flexible and powerful, just like Elastic.

    Affected versions of the package are vulnerable to Open Redirect the
    login page that would enable an attacker to craft a link that redirects
    to an arbitrary website.



    [1]: https://www.npmjs.com/package/kibana
    \n[`kibana`][1] is Kibana is an open source (Apache Licensed), browser
    based analytics and search dashboard for Elasticsearch. Kibana is a snap
    to setup and start using. Kibana strives to be easy to get started with,
    while also being flexible and powerful, just like Elastic.

    Affected versions of the package are vulnerable to Open Redirect the
    login page that would enable an attacker to craft a link that redirects
    to an arbitrary website.



    [1]: https://www.npmjs.com/package/kibana
  affected_package: kibana
  vulnerable_versions:
  - ">=5.1.1 <5.6.7 || >=6.0.0 <6.1.3"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2018-3819
  cwe:
  - CWE-601
  credit:
  - Unknown
  references:
  - https://www.elastic.co/community/security
  source_url: https://snyk.io/vuln/npm:kibana:20180130-2
