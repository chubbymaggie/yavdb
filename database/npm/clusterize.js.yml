---
- id: ossindex:npm:clusterize.js:2017-02-07
  title: Cross Site Scripting (XSS)
  description: Possible cross site scripting attacks is mitigated through the use
    of DOM methods instead of assembling the HTML through string concatenation.
  affected_package: clusterize.js
  vulnerable_versions:
  - "<0.3.1"
  package_manager: npm
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/NeXTs/Clusterize.js/commit/6f7b2f8b923042f368311303493ae95b254c40fc
  - https://github.com/NeXTs/Clusterize.js/commit/89ffd6a08c37572742cc88de4f99e1949f42a54c
  - https://github.com/NeXTs/Clusterize.js/issues/4
  - https://github.com/NeXTs/Clusterize.js/pull/5
  source_url: https://ossindex.net/resource/package/7275552145/vulnerabilities
- id: snykio:npm:clusterize.js:2015-04-28
  title: Cross-site Scripting (XSS)
  description: |+
    [`clusterize.js`][1] is Tiny vanilla JS plugin to display large data
    sets easily. Affected versions of the package are vulnerable to
    Cross-site Scripting (XSS), as there is no validation to which tag is
    used to create an empty row.

        var empty_row = '<' + opts.tag + ' class="' + opts.no_data_class + '">';

    Attackers can use this to their advantage and use specially crafted
    scripts to exploit the program. This was fixed by DOM methods like
    `document.createElement`.



    [1]: https://www.npmjs.com/package/clusterize.js
    \n[`clusterize.js`][1] is Tiny vanilla JS plugin to display large data
    sets easily. Affected versions of the package are vulnerable to
    Cross-site Scripting (XSS), as there is no validation to which tag is
    used to create an empty row.

        var empty_row = '<' + opts.tag + ' class="' + opts.no_data_class + '">';

    Attackers can use this to their advantage and use specially crafted
    scripts to exploit the program. This was fixed by DOM methods like
    `document.createElement`.



    [1]: https://www.npmjs.com/package/clusterize.js
    \n[`clusterize.js`][1] is Tiny vanilla JS plugin to display large data
    sets easily. Affected versions of the package are vulnerable to
    Cross-site Scripting (XSS), as there is no validation to which tag is
    used to create an empty row.

        var empty_row = '<' + opts.tag + ' class="' + opts.no_data_class + '">';

    Attackers can use this to their advantage and use specially crafted
    scripts to exploit the program. This was fixed by DOM methods like
    `document.createElement`.



    [1]: https://www.npmjs.com/package/clusterize.js
    \n[`clusterize.js`][1] is Tiny vanilla JS plugin to display large data
    sets easily. Affected versions of the package are vulnerable to
    Cross-site Scripting (XSS), as there is no validation to which tag is
    used to create an empty row.

        var empty_row = '<' + opts.tag + ' class="' + opts.no_data_class + '">';

    Attackers can use this to their advantage and use specially crafted
    scripts to exploit the program. This was fixed by DOM methods like
    `document.createElement`.



    [1]: https://www.npmjs.com/package/clusterize.js
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: clusterize.js
  vulnerable_versions:
  - "<0.3.1"
  severity: high
  package_manager: npm
  cwe:
  - CWE-79
  credit:
  - Daniel Lo Nigro
  references:
  - https://github.com/NeXTs/Clusterize.js/issues/4
  - https://github.com/NeXTs/Clusterize.js/pull/5/commits/0c3d6486d6dac4c7dd04aa5525d4f705ec3351fc
  source_url: https://snyk.io/vuln/npm:clusterize.js:20150429
