---
- id: nodesecurity:npm:adm-zip:2018-08-03
  title: Arbitrary File Write via Archive Extraction
  description: Versions of `adm-zip` before 0.4.9 are vulnerable to arbitrary file
    write when used to extract a specifically crafted archive that contains path traversal
    filenames (`../../file.txt` for example).
  affected_package: adm-zip
  vulnerable_versions:
  - "<0.4.9"
  patched_versions:
  - ">=0.4.9"
  severity: high
  package_manager: npm
  cve:
  - CVE-2018-1002204
  credit:
  - snyk security team
  references:
  - |-
    https://github.com/cthackers/adm-zip/pull/212)
    https://snyk.io/research/zip-slip-vulnerability)
  source_url: https://nodesecurity.io/advisories/681
- id: snykio:npm:adm-zip:2018-04-14
  title: Arbitrary File Write via Archive Extraction (Zip Slip)
  description: |
    [`adm-zip`][1] is a Javascript implementation of zip for NodeJS with
    support for electron original-fs.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +2018-04-15 22:04:29 .....           19           19  good.txt
        +2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://www.npmjs.com/package/adm-zip
    \n[`adm-zip`][1] is a Javascript implementation of zip for NodeJS with
    support for electron original-fs.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +2018-04-15 22:04:29 .....           19           19  good.txt
        +2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://www.npmjs.com/package/adm-zip
    \n[`adm-zip`][1] is a Javascript implementation of zip for NodeJS with
    support for electron original-fs.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +2018-04-15 22:04:29 .....           19           19  good.txt
        +2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://www.npmjs.com/package/adm-zip
    \n[`adm-zip`][1] is a Javascript implementation of zip for NodeJS with
    support for electron original-fs.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +2018-04-15 22:04:29 .....           19           19  good.txt
        +2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://www.npmjs.com/package/adm-zip
    \n[`adm-zip`][1] is a Javascript implementation of zip for NodeJS with
    support for electron original-fs.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +2018-04-15 22:04:29 .....           19           19  good.txt
        +2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://www.npmjs.com/package/adm-zip
    \n[`adm-zip`][1] is a Javascript implementation of zip for NodeJS with
    support for electron original-fs.

    Affected versions of the package are vulnerable to Arbitrary File Write
    via Archive Extraction (AKA \"Zip Slip\").

    It can be exploited using a specially crafted zip archive, that holds
    path traversal filenames. When exploited, a filename in a malicious
    archive is concatenated to the target extraction directory, which
    results in the final path ending up outside of the target folder. For
    instance, a zip may hold a file with a `../../file.exe` location and
    thus break out of the target folder. If an executable or a configuration
    file is overwritten with a file containing malicious code, the problem
    can turn into an arbitrary code execution issue quite easily.

    The following is an example of a zip archive with one benign file and
    one malicious file. Extracting the malicous file will result in
    traversing out of the target folder, ending up in `/root/.ssh/`
    overwriting the `authorized_keys` file:

        +2018-04-15 22:04:29 .....           19           19  good.txt
        +2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys



    [1]: https://www.npmjs.com/package/adm-zip
  affected_package: adm-zip
  vulnerable_versions:
  - "<0.4.11"
  severity: high
  package_manager: npm
  cve:
  - CVE-2018-1002204
  cwe:
  - CWE-29
  credit:
  - Snyk Security Research
  - SÃ©bastien Mignot
  - Alex Chapman
  references:
  - https://github.com/cthackers/adm-zip/pull/212
  - https://github.com/cthackers/adm-zip/pull/212/commits/6f4dfeb9a2166e93207443879988f97d88a37cde
  - https://github.com/cthackers/adm-zip/commit/d01fa8c80c3a5fcf5ce1eda82d96600c62910d3f
  - https://snyk.io/research/zip-slip-vulnerability
  - https://github.com/snyk/zip-slip-vulnerability
  source_url: https://snyk.io/vuln/npm:adm-zip:20180415
