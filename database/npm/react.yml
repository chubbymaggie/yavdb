---
- id: ossindex:npm:react:8402397921
  title: Cross Site Scripting in examples
  description: The example code is vulnerable to cross site scripting attacks. This
    was resolved by switching markdown processors.
  affected_package: react
  vulnerable_versions:
  - "<0.14.0-beta1"
  package_manager: npm
  disclosed_date: 2017-02-11
  created_date: 2017-02-11
  last_modified_date: 2017-02-15
  credit:
  - OSSIndex
  references:
  - https://github.com/facebook/react/issues/3501
  source_url: https://ossindex.net/resource/package/7014352228/vulnerabilities
- id: snykio:npm:react:20131217
  title: Cross-site Scripting (XSS)
  description: |+
    [`react`][1] is React is a JavaScript library for building user
    interfaces..

    Affected versions of the package contain Cross-site Scripting (XSS)
    vulnerability due to unescaped text before inserted into the DOM.

    A Cross-site Scripting (XSS) vulnerability can arise when using user
    data as a `key`. Typically \"safe\" data is used for a `key`, for
    example, an id from your database, or a unique hash. However there are
    cases where it may be reasonable to use user generated content. A
    carefully crafted piece of content could result in arbitrary code
    execution.



    [1]: https://www.npmjs.com/package/react
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: react
  vulnerable_versions:
  - ">=0.4.0 <0.4.2"
  - ">=0.5.0 <0.5.2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2013-7035
  cwe:
  - CWE-79
  disclosed_date: 2013-12-16
  created_date: 2017-01-18
  last_modified_date: 2017-01-18
  credit:
  - Paul O’Shannessy
  - Thomas Aylott
  references:
  - https://facebook.github.io/react/blog/2013/12/18/react-v0.5.2-v0.4.2.html
  - https://github.com/facebook/react/commit/393a889aaceb761f058b09a701f889fa8f8b4e64
  - https://github.com/facebook/react/commit/94a9a3e752fe089ab23f3a90c26d20d46d62ab10
  - https://groups.google.com/forum/#!topic/reactjs/OIqxlB2aGfU
  source_url: https://snyk.io/vuln/npm:react:20131217
- id: snykio:npm:react:20150318
  title: Cross-site Scripting (XSS)
  description: |+
    [`react`][1] is React is a JavaScript library for building user
    interfaces..

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS) due to the `createElement` method not validating the object,
    allowing a malicious user to pass a specially crafted JSON object and
    renders them as an element.



    [1]: https://www.npmjs.com/package/react
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: react
  vulnerable_versions:
  - "<0.14.0"
  severity: high
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2015-03-17
  created_date: 2017-01-18
  last_modified_date: 2017-01-18
  credit:
  - Daniel LeCheminant
  references:
  - http://danlec.com/blog/xss-via-a-spoofed-react-element
  - https://github.com/facebook/react/blob/master/CHANGELOG.md#notable-enhancements
  - https://github.com/facebook/react/issues/3473
  source_url: https://snyk.io/vuln/npm:react:20150318
