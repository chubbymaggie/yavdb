---
- id: nodesecurity:npm:serve-index:2015-03-14
  title: Cross-Site Scripting
  description: Versions 1.6.2 and earlier of `serve-index` are affected by a cross-site
    scripting vulnerability. Because file and directory names are not escaped in the
    module's HTML output, a remote attacker that can influence file or directory names
    can launch a persistent cross-site scripting attack on the application.
  affected_package: serve-index
  vulnerable_versions:
  - "<1.6.3"
  patched_versions:
  - ">=1.6.3"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2015-8856
  cvss_v3_vector: CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N
  credit:
  - Ivan Kozik
  references:
  - 'https://github.com/expressjs/serve-index/issues/28)

'
  source_url: https://nodesecurity.io/advisories/34
- id: ossindex:npm:serve-index:2017-01-23
  title: '[CVE-2015-8856]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in the serve-index package
    before 1.6.3 for Node.js allows remote attackers to inject arbitrary web script
    or HTML via a crafted file or directory name.
  affected_package: serve-index
  vulnerable_versions:
  - "<1.6.3"
  package_manager: npm
  cve:
  - CVE-2015-8856
  credit:
  - OSSIndex
  references:
  - http://www.openwall.com/lists/oss-security/2016/04/20/11
  - http://www.securityfocus.com/bid/96392
  - https://nodesecurity.io/advisories/34
  source_url: https://ossindex.net/resource/package/7014432265/vulnerabilities
- id: ossindex:npm:serve-index:1970-01-01
  title: XSS via filename
  description: serve-index directory listings are vulnerable to XSS via arbitrary
    uploader-controlled filenames.
  affected_package: serve-index
  vulnerable_versions:
  - "<1.6.3"
  package_manager: npm
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/80.html
  - https://github.com/expressjs/serve-index/issues/28
  - https://nodesecurity.io/advisories/34
  - https://www.owasp.org/index.php/Cross-site_Scripting_%28XSS%29
  source_url: https://ossindex.net/resource/package/7014432265/vulnerabilities
- id: snykio:npm:serve-index:2015-03-13
  title: Cross-site Scripting due to improper file and directory names escaping
  description: |+
    [serve-index][1] Serves pages that contain directory listings for a
    given path.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. When using serve-index middleware, file and directory
    names are not escaped in HTML output. If a remote attcker can influence
    these names, it may trigger a persistent XSS attack.



    [1]: https://github.com/expressjs/serve-index
    \n[serve-index][1] Serves pages that contain directory listings for a
    given path.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. When using serve-index middleware, file and directory
    names are not escaped in HTML output. If a remote attcker can influence
    these names, it may trigger a persistent XSS attack.



    [1]: https://github.com/expressjs/serve-index
    \n[serve-index][1] Serves pages that contain directory listings for a
    given path.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. When using serve-index middleware, file and directory
    names are not escaped in HTML output. If a remote attcker can influence
    these names, it may trigger a persistent XSS attack.



    [1]: https://github.com/expressjs/serve-index
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: serve-index
  vulnerable_versions:
  - "<1.6.3"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-80
  credit:
  - Ivan Kozik
  references:
  - https://github.com/expressjs/serve-index/issues/28
  source_url: https://snyk.io/vuln/npm:serve-index:20150314
