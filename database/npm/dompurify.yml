---
- id: ossindex:npm:dompurify:2016-07-28
  title: Unspecified Vulnerabilities
  description: Fixed several security issues identified by a 3rd party code audit.
  affected_package: dompurify
  vulnerable_versions:
  - "<0.6.1"
  package_manager: npm
  disclosed_date: 2016-07-28
  created_date: 2016-07-28
  last_modified_date: 2016-07-28
  credit:
  - OSSIndex
  references:
  - https://github.com/cure53/DOMPurify/releases/tag/0.6.1
  source_url: https://ossindex.net/resource/package/7013489057/vulnerabilities
- id: ossindex:npm:dompurify:2017-02-12
  title: Possible Cross Site Scripting (XSS) through DOM Clobbering
  description: It is possible for an attacker to overwrite part of the DOM and enable
    an XSS attack.
  affected_package: dompurify
  vulnerable_versions:
  - "<0.3"
  package_manager: npm
  disclosed_date: 2017-02-12
  created_date: 2017-02-12
  last_modified_date: 2017-04-25
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/cure53/DOMPurify/commit/29de89a87416446fd90242321f8275daea7e22b2
  - https://github.com/cure53/DOMPurify/commit/78037ea4db57daba7e171242378d3d97c517dd08
  - https://github.com/cure53/DOMPurify/issues/14
  source_url: https://ossindex.net/resource/package/7013489057/vulnerabilities
- id: ossindex:npm:dompurify:2017-08-01
  title: Cross Site Scripting (XSS)
  description: It is possible to avoid the attribute name whitelist, allowing the
    setting of arbitrary javascript attributes.
  affected_package: dompurify
  vulnerable_versions:
  - "<0.8.1"
  package_manager: npm
  disclosed_date: 2017-08-01
  created_date: 2017-08-01
  last_modified_date: 2017-08-01
  credit:
  - OSSIndex
  references:
  - https://github.com/cure53/DOMPurify/commit/48f1a9cd1c52ec0ba8cd8ea636cdfd31c12e79e3
  - https://github.com/cure53/DOMPurify/pull/166
  source_url: https://ossindex.net/resource/package/7013489057/vulnerabilities
- id: snykio:npm:dompurify:20140308
  title: Insecure Defaults
  description: |
    [`dompurify`][1] is a DOM-only XSS sanitizer for HTML, MathML and SVG.
    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS) and DOM Clobbering due to Insecure Defaults. The default
    configuration allowed DOM Clobbering when used by a sanitized website.
    The default was changed to pevent such situations.

    You can read more about `Insecure Defaults` on our [blog][2].



    [1]: https://www.npmjs.com/package/dompurify
    [2]: https://snyk.io/blog/mongodb-hack-and-secure-defaults/
  affected_package: dompurify
  vulnerable_versions:
  - "<0.3"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2014-03-07
  created_date: 2017-04-24
  last_modified_date: 2017-04-24
  credit:
  - cure53
  references:
  - https://github.com/cure53/DOMPurify/commit/78037ea4db57daba7e171242378d3d97c517dd08
  - https://github.com/cure53/DOMPurify/issues/14
  source_url: https://snyk.io/vuln/npm:dompurify:20140308
- id: snykio:npm:dompurify:20141008
  title: Cross-site Scripting (XSS)
  description: |+
    [`dompurify`][1] is a DOM-only XSS sanitizer for HTML, MathML and SVG.
    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS) which is caused by Double-Clobbering.



    [1]: https://www.npmjs.com/package/dompurify
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: dompurify
  vulnerable_versions:
  - "<0.4.4"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2014-10-07
  created_date: 2017-04-24
  last_modified_date: 2017-04-24
  credit:
  - Mathias Karlsson
  source_url: https://snyk.io/vuln/npm:dompurify:20141008
- id: snykio:npm:dompurify:20150217
  title: Cross-site Scripting (XSS)
  description: |+
    [`dompurify`][1] is a DOM-only XSS sanitizer for HTML, MathML and SVG.
    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://www.npmjs.com/package/dompurify
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: dompurify
  vulnerable_versions:
  - "<0.6.1 >=0.4.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2015-02-16
  created_date: 2017-04-24
  last_modified_date: 2017-04-24
  credit:
  - Unknown
  references:
  - https://github.com/cure53/DOMPurify/commit/16e431f9749c7bc8c4e9ed438df1098d57b3aa2f
  source_url: https://snyk.io/vuln/npm:dompurify:20150217
- id: snykio:npm:dompurify:20160412
  title: Cross-site Scripting (XSS)
  description: |+
    [`dompurify`][1] is a DOM-only XSS sanitizer for HTML, MathML and SVG.
    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS) attacks. SVG tags are case sensitive, but DOMPurify transforms
    these tags to lowercase. This causes the SVG document to render
    incorrectly, and may trigger a flaw in the Opera browser.



    [1]: https://www.npmjs.com/package/dompurify
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: dompurify
  vulnerable_versions:
  - "<0.8.0 >=0.7.3"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2016-04-11
  created_date: 2017-04-24
  last_modified_date: 2017-04-24
  credit:
  - jampy
  references:
  - https://github.com/cure53/DOMPurify/commit/6eccdd38fc11bc6df22386700ec2278cb743f8eb
  - https://github.com/cure53/DOMPurify/issues/148
  source_url: https://snyk.io/vuln/npm:dompurify:20160412
- id: snykio:npm:dompurify:20170421
  title: Cross-site Scripting (XSS)
  description: |+
    [`DOMPurify`][1] is a DOM-only XSS sanitizer for HTML, MathML and SVG.

    Affected versions of this package are vulnerable to a Cross-site
    Scripting (XSS) bug in Safari (&gt;= versions 10.1). Specifically, when
    DOMPurify attempts to parse a string like:

        <svg onload=alert(document.domain)>

    it will result in XSS.



    [1]: https://www.npmjs.com/package/dompurify
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: dompurify
  vulnerable_versions:
  - "<0.8.6"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2017-04-21
  created_date: 2017-04-24
  last_modified_date: 2017-04-24
  credit:
  - Unknown
  references:
  - https://github.com/cure53/DOMPurify/commit/27908090e4a2d0a75f15924d68bed07ea5e52998
  - https://github.com/cure53/DOMPurify/releases/tag/0.8.6
  source_url: https://snyk.io/vuln/npm:dompurify:20170421
