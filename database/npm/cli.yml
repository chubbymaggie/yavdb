---
- id: nodesecurity:npm:cli:2016-06-15
  title: Arbitrary File Write
  description: |-
    Affected versions of `cli` use predictable temporary file names. If an attacker can create a symbolic link at the location of one of these temporarly file names, the attacker can arbitrarily write to any file that the user which owns the `cli` process has permission to write to.


    ## Proof of Concept

    By creating Symbolic Links at the following locations, the target of the link can be written to.
    ```
    lock_file = '/tmp/' + cli.app + '.pid',
    log_file = '/tmp/' + cli.app + '.log';
    ```
  affected_package: cli
  vulnerable_versions:
  - "<1.0.0"
  patched_versions:
  - ">=1.0.0"
  severity: low
  package_manager: npm
  cvss_v3_vector: CVSS:3.0/AV:P/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N
  credit:
  - Steve Kemp
  references:
  - |-
    https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=809252)
    https://github.com/node-js-libs/cli/issues/81)
  source_url: https://nodesecurity.io/advisories/95
- id: ossindex:npm:cli:2016-07-22
  title: Insecure temporary files (path traversal)
  description: The `node-cli` library makes insecure use of temporary files thus allowing
    the overwriting of files that the starting-user has permission to modify.
  affected_package: cli
  vulnerable_versions:
  - "<1.0.0"
  package_manager: npm
  credit:
  - OSSIndex
  references:
  - https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=809252
  - https://github.com/chriso/cli/issues/86
  - https://github.com/node-js-libs/cli/issues/81
  - https://nodesecurity.io/advisories/95
  source_url: https://ossindex.net/resource/package/7012190162/vulnerabilities
- id: snykio:npm:cli:2015-12-28
  title: Insecure use of /tmp folder
  description: |
    [`cli`][1] is an npm package used for rapidly building command line
    apps.

    When used in `daemon` mode, the library makes insecure use of two files
    in the `/tmp/` folder: `/tmp/<app-name>.pid` and `/tmp/<app-name>.log`.
    These allow an attacker to overwrite files they typically cannot access,
    but that are accessible by the user running the CLI-using app. This is
    possible since the `/tmp/` folder is (typically) writeable to all system
    users, and because the names of the files in question are easily
    predicted by an attacker.

    Note that while this is a real vulnerability, it relies on functionality
    (`daemon` mode) which is only supported in very old Node versions (0.8
    or older), and so is unlikely to be used by most `cli` users. To avoid
    any doubt, the fixed version (1.0.0) removes support for this feature
    entirely.



    [1]: https://www.npmjs.com/package/cli
    \n[`cli`][1] is an npm package used for rapidly building command line
    apps.

    When used in `daemon` mode, the library makes insecure use of two files
    in the `/tmp/` folder: `/tmp/<app-name>.pid` and `/tmp/<app-name>.log`.
    These allow an attacker to overwrite files they typically cannot access,
    but that are accessible by the user running the CLI-using app. This is
    possible since the `/tmp/` folder is (typically) writeable to all system
    users, and because the names of the files in question are easily
    predicted by an attacker.

    Note that while this is a real vulnerability, it relies on functionality
    (`daemon` mode) which is only supported in very old Node versions (0.8
    or older), and so is unlikely to be used by most `cli` users. To avoid
    any doubt, the fixed version (1.0.0) removes support for this feature
    entirely.



    [1]: https://www.npmjs.com/package/cli
    \n[`cli`][1] is an npm package used for rapidly building command line
    apps.

    When used in `daemon` mode, the library makes insecure use of two files
    in the `/tmp/` folder: `/tmp/<app-name>.pid` and `/tmp/<app-name>.log`.
    These allow an attacker to overwrite files they typically cannot access,
    but that are accessible by the user running the CLI-using app. This is
    possible since the `/tmp/` folder is (typically) writeable to all system
    users, and because the names of the files in question are easily
    predicted by an attacker.

    Note that while this is a real vulnerability, it relies on functionality
    (`daemon` mode) which is only supported in very old Node versions (0.8
    or older), and so is unlikely to be used by most `cli` users. To avoid
    any doubt, the fixed version (1.0.0) removes support for this feature
    entirely.



    [1]: https://www.npmjs.com/package/cli
    \n[`cli`][1] is an npm package used for rapidly building command line
    apps.

    When used in `daemon` mode, the library makes insecure use of two files
    in the `/tmp/` folder: `/tmp/<app-name>.pid` and `/tmp/<app-name>.log`.
    These allow an attacker to overwrite files they typically cannot access,
    but that are accessible by the user running the CLI-using app. This is
    possible since the `/tmp/` folder is (typically) writeable to all system
    users, and because the names of the files in question are easily
    predicted by an attacker.

    Note that while this is a real vulnerability, it relies on functionality
    (`daemon` mode) which is only supported in very old Node versions (0.8
    or older), and so is unlikely to be used by most `cli` users. To avoid
    any doubt, the fixed version (1.0.0) removes support for this feature
    entirely.



    [1]: https://www.npmjs.com/package/cli
    \nFor example, assume user *victim* occasionally runs a CLI tool called
    `cli-tool`, which uses the `cli` package. If an attacker gains write
    access to the `/tmp/` folder of that machine (but not the higher
    permissions *victim* has), they can create the symbolic link
    `/tmp/cli-tool.pid -> /home/victim/important-file`. When *victim* runs
    `cli-tool`, the `important-file` in victim\'s root directory will be
    nullified. If the CLI tool is run as root, the same can be done to
    nullify `/etc/passwd` and make the system unbootable.

    Note that popular CLI tools have no reason to mask their names, and so
    attackers can easily guess a long list of tools victims may run by
    checking the `cli` package [dependents][1].



    [1]: https://www.npmjs.com/browse/depended/cli
    \nFor example, assume user *victim* occasionally runs a CLI tool called
    `cli-tool`, which uses the `cli` package. If an attacker gains write
    access to the `/tmp/` folder of that machine (but not the higher
    permissions *victim* has), they can create the symbolic link
    `/tmp/cli-tool.pid -> /home/victim/important-file`. When *victim* runs
    `cli-tool`, the `important-file` in victim\'s root directory will be
    nullified. If the CLI tool is run as root, the same can be done to
    nullify `/etc/passwd` and make the system unbootable.

    Note that popular CLI tools have no reason to mask their names, and so
    attackers can easily guess a long list of tools victims may run by
    checking the `cli` package [dependents][1].



    [1]: https://www.npmjs.com/browse/depended/cli
    \nFor example, assume user *victim* occasionally runs a CLI tool called
    `cli-tool`, which uses the `cli` package. If an attacker gains write
    access to the `/tmp/` folder of that machine (but not the higher
    permissions *victim* has), they can create the symbolic link
    `/tmp/cli-tool.pid -> /home/victim/important-file`. When *victim* runs
    `cli-tool`, the `important-file` in victim\'s root directory will be
    nullified. If the CLI tool is run as root, the same can be done to
    nullify `/etc/passwd` and make the system unbootable.

    Note that popular CLI tools have no reason to mask their names, and so
    attackers can easily guess a long list of tools victims may run by
    checking the `cli` package [dependents][1].



    [1]: https://www.npmjs.com/browse/depended/cli
  affected_package: cli
  vulnerable_versions:
  - "<1.0.0"
  severity: low
  package_manager: npm
  cve:
  - CVE-2016-10538
  cwe:
  - CWE-59
  credit:
  - Steve Kemp
  source_url: https://snyk.io/vuln/npm:cli:20160615
