---
- id: npmjs:npm:marked:101
  title: Sanitization bypass using HTML Entities
  description: "Affected versions of `marked` are susceptible to a cross-site scripting
    vulnerability in link components when `sanitize:true` is configured. \n\n## Proof
    of Concept\n\nThis flaw exists because link URIs containing HTML entities get
    processed in an abnormal manner. Any HTML Entities get parsed on a best-effort
    basis and included in the resulting link, while if that parsing fails that character
    is omitted.\n\nFor example:\n\nA link URI such as\n```\njavascript&#x58document;alert&#40;1&#41;\n```\nRenders
    a valid link that when clicked will execute `alert(1)`."
  affected_package: marked
  vulnerable_versions:
  - "<=0.3.5"
  severity: high
  package_manager: npm
  cve:
  - CVE-2016-10531
  cwe: CWE-79
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Matt Austin
  references: https://npmjs.com/advisories/101
  source_url: https://npmjs.com/advisories/101
- id: npmjs:npm:marked:22
  title: Multiple Content Injection Vulnerabilities
  description: |-
    Versions 0.3.0 and earlier of `marked` are affected by two cross-site scripting vulnerabilities, even when `sanitize: true` is set.

    The attack vectors for this vulnerability are GFM Codeblocks and JavaScript URLs.
  affected_package: marked
  vulnerable_versions:
  - "<=0.3.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2014-1850
  - CVE-2014-3743
  cwe: CWE-74
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Adam Baldwin
  references: https://npmjs.com/advisories/22
  source_url: https://npmjs.com/advisories/22
- id: npmjs:npm:marked:23
  title: Regular Expression Denial of Service
  description: 'Versions 0.3.3 and earlier of `marked` are affected by a regular expression
    denial of service ( ReDoS ) vulnerability when passed inputs that reach the `em`
    inline rule.

'
  affected_package: marked
  vulnerable_versions:
  - "<=0.3.3"
  severity: high
  package_manager: npm
  cve:
  - CVE-2015-8854
  cwe: CWE-400
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Barış Soner Uşaklı
  references: https://npmjs.com/advisories/23
  source_url: https://npmjs.com/advisories/23
- id: npmjs:npm:marked:24
  title: VBScript Content Injection
  description: "Versions 0.3.2 and earlier of `marked` are affected by a cross-site
    scripting vulnerability even when `sanitize:true` is set. \n\n## Proof of Concept
    ( IE10 Compatibility Mode Only )\n\n`[xss link](vbscript:alert(1&#41;)`\n\nwill
    get a link\n\n`<a href=\"vbscript:alert(1)\">xss link</a>`"
  affected_package: marked
  vulnerable_versions:
  - "<=0.3.2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2015-1370
  cwe: CWE-74
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Xiao Long
  references: https://npmjs.com/advisories/24
  source_url: https://npmjs.com/advisories/24
- id: npmjs:npm:marked:531
  title: Regular Expression Denial of Service
  description: "Affected versions of `marked` are vulnerable to a regular expression
    denial of service. \n\nThe amplification in this vulnerability is significant,
    with 1,000 characters resulting in the event loop being blocked for around 6 seconds."
  affected_package: marked
  vulnerable_versions:
  - "<0.3.9"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-16114
  cwe: CWE-400
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Cristian-Alexandru Staicu
  references: https://npmjs.com/advisories/531
  source_url: https://npmjs.com/advisories/531
- id: ossindex:npm:marked:367232
  title: "[CVE-2015-1370] Incomplete blacklist vulnerability in marked 0.3.2 and earlier
    for Node.js allow..."
  description: Incomplete blacklist vulnerability in marked 0.3.2 and earlier for
    Node.js allows remote attackers to conduct cross-site scripting (XSS) attacks
    via a vbscript tag in a link.
  affected_package: marked
  vulnerable_versions:
  - "<=0.3.2"
  package_manager: npm
  cve:
  - CVE-2015-1370
  disclosed_date: 2015-01-27
  created_date: 2015-01-27
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://www.openwall.com/lists/oss-security/2015/01/23/2
  - https://github.com/chjj/marked/issues/492
  - https://github.com/evilpacket/marked/commit/3c191144939107c45a7fa11ab6cb88be6694a1ba
  - https://nodesecurity.io/advisories/marked_vbscript_injection
  source_url: https://ossindex.net/resource/package/7014106540/vulnerabilities
- id: ossindex:npm:marked:8269291159
  title: Multiple Content Injection
  description: "> Even if [the sanitize] option is set, marked is vulnerable to content
    injection in multiple locations if untrusted user input is allowed to be provided
    into marked and that output is passed to the browser.\n> \n>  -- [redhat.com](https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2014-3743)"
  affected_package: marked
  vulnerable_versions:
  - "<0.3.1"
  package_manager: npm
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 2017-02-15
  credit:
  - OSSIndex
  references:
  - https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2014-3743
  - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-1850
  - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3743
  - https://cwe.mitre.org/data/definitions/74.html
  - https://nodesecurity.io/advisories/22
  source_url: https://ossindex.net/resource/package/7014106540/vulnerabilities
- id: ossindex:npm:marked:8269715394
  title: Regular expression denial of service (ReDoS)
  description: Using marked with a certain input seems to lock the process. CPU hits
    100% for a long time. Caused by a regular expression denial of service (ReDoS)
  affected_package: marked
  vulnerable_versions:
  - "<=0.3.3"
  package_manager: npm
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 2017-01-25
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/185.html
  - https://cwe.mitre.org/data/definitions/730.html
  - https://github.com/chjj/marked/issues/497
  - https://nodesecurity.io/advisories/23
  - https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS
  source_url: https://ossindex.net/resource/package/7014106540/vulnerabilities
- id: ossindex:npm:marked:8399946985
  title: "[Duplicate] XSS (Cross Site Scripting)"
  description: "> With the sanitize option on it is possible to create a link with
    a javascript: protocol with the following: [URL](javascript:document;alert(1)).\n>
    \n> -- [github.com](https://github.com/chjj/marked/pull/592)"
  affected_package: marked
  vulnerable_versions:
  - "<0.3.6"
  package_manager: npm
  disclosed_date: 2016-07-22
  created_date: 2016-07-22
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/chjj/marked/pull/592
  - https://github.com/chjj/marked/pull/592/commits/2cff85979be8e7a026a9aca35542c470cf5da523
  - https://nodesecurity.io/advisories/101
  source_url: https://ossindex.net/resource/package/7014106540/vulnerabilities
- id: ossindex:npm:marked:8402397936
  title: Cross Site Scripting (XSS) in data links
  description: Allowing `data:` links opens this package up to an XSS attack.
  affected_package: marked
  vulnerable_versions:
  - "<=0.3.6"
  package_manager: npm
  disclosed_date: 2017-02-11
  created_date: 2017-02-11
  last_modified_date: 2017-02-16
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/chjj/marked/commit/8f9d0b72f5606ed32057049f387161dd41c36ade
  - https://github.com/chjj/marked/commit/cd2f6f5b7091154c5526e79b5f3bfb4d15995a51
  - https://github.com/chjj/marked/issues/844
  - https://github.com/chjj/marked/issues/848
  source_url: https://ossindex.net/resource/package/7014106540/vulnerabilities
- id: ossindex:npm:marked:8402799898
  title: "[CVE-2015-8854]  Resource Management Errors"
  description: The marked package before 0.3.4 for Node.js allows attackers to cause
    a denial of service (CPU consumption) via unspecified vectors that trigger a "catastrophic
    backtracking issue for the em inline rule," aka a "regular expression denial of
    service (ReDoS)."
  affected_package: marked
  vulnerable_versions:
  - "<=0.3.3"
  package_manager: npm
  cve:
  - CVE-2015-8854
  disclosed_date: 2017-01-23
  created_date: 2017-01-23
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://www.openwall.com/lists/oss-security/2016/04/20/11
  - https://nodesecurity.io/advisories/23
  source_url: https://ossindex.net/resource/package/7014106540/vulnerabilities
- id: snykio:npm:marked:1
  title: Regular Expression Denial of Service (DoS)
  description: "[marked][1] is a markdown parser and compiler. Built for speed.\n\nAffected
    versions of this package are vulnerable to Regular Expressions\nDenial of Service
    (ReDoS) when certain types of input are passed in to\nbe parsed.\n\n\n\n[1]: https://github.com/markedjs/marked\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: marked
  vulnerable_versions:
  - "<=0.3.3"
  severity: high
  package_manager: npm
  cwe:
  - CWE-185
  - CWE-730
  disclosed_date: 2014-01-30
  created_date: 2014-01-30
  last_modified_date: 2014-01-30
  credit:
  - Barış Soner Uşaklı
  references:
  - https://github.com/chjj/marked/issues/497
  source_url: https://snyk.io/vuln/npm:marked:20140131-1
- id: snykio:npm:marked:2
  title: VBScript Content Injection
  description: |
    Marked 0.3.2 and earlier is vulnerable to content injection even when
    `sanitize: true` is enabled.

    `[xss link](vbscript:alert(1))`

    will get a link

    `<a href="vbscript:alert(1)">xss link</a>`

    This script does not work in IE 11 edge mode, but works in IE 10
    compatibility view.

    *Source: [Node Security Project][1]*



    [1]: https://nodesecurity.io/advisories/24
  affected_package: marked
  vulnerable_versions:
  - "<=0.3.2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2015-1370
  cwe:
  - CWE-74
  disclosed_date: 2014-01-30
  created_date: 2014-01-30
  last_modified_date: 2014-01-30
  credit:
  - Xiao Long
  references:
  - https://github.com/chjj/marked/issues/492
  source_url: https://snyk.io/vuln/npm:marked:20140131-2
- id: snykio:npm:marked:20140131
  title: Multiple Content Injection Vulnerabilities
  description: |
    Marked comes with an option to sanitize user output to help protect
    against content injection attacks.

    sanitize: true

    Even if this option is set, marked is vulnerable to content injection in
    multiple locations if untrusted user input is allowed to be provided
    into marked and that output is passed to the browser.

    Injection is possible in two locations

    * gfm codeblocks (language)
    * javascript url\'s

    *Source: [Node Security Project][1]*



    [1]: https://nodesecurity.io/advisories/22
  affected_package: marked
  vulnerable_versions:
  - "<=0.3.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2014-1850
  - CVE-2014-3743
  cwe:
  - CWE-74
  disclosed_date: 2014-01-30
  created_date: 2014-01-30
  last_modified_date: 2014-01-30
  credit:
  - Adam Baldwin
  source_url: https://snyk.io/vuln/npm:marked:20140131
- id: snykio:npm:marked:20150520
  title: Content & Code Injection (XSS)
  description: |+
    [`marked`][1] is a markdown parser and compiler used for rendering
    markdown content to html.

    It is vulnerable to content injection attack allowing the attacker to
    bypass its output sanitization (`sanitize: true`) protection. Using the
    [HTML Coded Character Set][2], attackers can inject `javascript:` code
    snippets into the output. For example, the following input
    `javascript&#x58document;alert(1)` will result in `alert(1)` being
    executed when the user clicks on the link.



    [1]: https://www.npmjs.com/package/marked
    [2]: https://www.w3.org/MarkUp/html-spec/html-spec_13.html#SEC13
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: marked
  vulnerable_versions:
  - "<0.3.6"
  severity: high
  package_manager: npm
  cve:
  - CVE-2016-10531
  cwe:
  - CWE-79
  disclosed_date: 2015-05-20
  created_date: 2016-04-20
  last_modified_date: 2016-04-20
  credit:
  - Matt Austin
  references:
  - https://github.com/chjj/marked/pull/592
  source_url: https://snyk.io/vuln/npm:marked:20150520
- id: snykio:npm:marked:20170112
  title: Cross-site Scripting (XSS) via Data URIs
  description: |+
    [`marked`][1] is a markdown parser and compiler used for rendering
    markdown content to html.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS). Data URIs enable embedding small files in line in HTML documents,
    provided in the URL itself. Attackers can craft malicious web pages
    containing either HTML or script code that utilizes the data URI scheme,
    allowing them to bypass access controls or steal sensitive information.

    An example of data URI used to deliver javascript code. The data holds
    `<script>alert('XSS')</script>` tag in base64 encoded format.

        [xss link](data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K)



    [1]: https://www.npmjs.com/package/marked
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: marked
  vulnerable_versions:
  - "<0.3.7"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-1000427
  cwe:
  - CWE-79
  disclosed_date: 2017-01-12
  created_date: 2017-01-30
  last_modified_date: 2017-01-30
  credit:
  - Snyk Security Research Team
  references:
  - https://github.com/chjj/marked/commit/cd2f6f5b7091154c5526e79b5f3bfb4d15995a51
  source_url: https://snyk.io/vuln/npm:marked:20170112
- id: snykio:npm:marked:20170815
  title: Cross-site Scripting (XSS)
  description: "[`marked`][1] is a markdown parser and compiler used for rendering\nmarkdown
    content to html.\n\nAffected versions of the package are vulnerable to Cross-site
    Scripting\n(XSS) attacks.\n\n\n\n[1]: https://www.npmjs.com/package/marked\n\\nBrowsers
    support both lowercase and uppercase x in hexadecimal form of\nHTML character
    entity, but marked [unescaped only lowercase][1].\n\nThis may allow an attacker
    to create a link with javascript code.\n\nFor example:\n\n    var marked = require('marked');\n
    \   marked.setOptions({\n      renderer: new marked.Renderer(),\n      sanitize:
    true\n    });\n    \n    text = `\n    lower[click me](javascript:...)lower\n
    \   upper[click me](javascript&#X3a;...)upper\n    `;\n    \n    console.log(marked(text));\n\nwill
    render the following:\n\n    <p>lowerlower\n    upper<a href=\"javascript&#X3a;...\">click
    me</a>upper</p>\n\n\n\n[1]: https://github.com/chjj/marked/blob/v0.3.7/lib/marked.js#L1096-L1108\n\\nCross-Site
    Scripting (XSS) attacks occur when an attacker tricks a\nuser’s browser to execute
    malicious JavaScript code in the context of a\nvictim’s domain. Such scripts can
    steal the user’s session cookies for\nthe domain, scrape or modify its content,
    and perform or modify actions\non the user’s behalf, actions typically blocked
    by the browser’s Same\nOrigin Policy.\n\nThese attacks are possible by escaping
    the context of the web\napplication and injecting malicious scripts in an otherwise
    trusted\nwebsite. These scripts can introduce additional attributes (say, a\n\\\"new\\\"
    option in a dropdown list or a new link to a malicious site) and\ncan potentially
    execute code on the clients side, unbeknown to the\nvictim. This occurs when characters
    like `<` `>` `\"` `'` are not escaped\nproperly.\n\nThere are a few types of XSS:\n\n*
    **Persistent XSS** is an attack in which the malicious code persists\n  into the
    web app’s database.\n* **Reflected XSS** is an which the website echoes back a
    portion of the\n  request. The attacker needs to trick the user into clicking
    a\n  malicious link (for instance through a phishing email or malicious JS\n  on
    another page), which triggers the XSS attack.\n* **DOM-based XSS** is an that
    occurs purely in the browser when\n  client-side JavaScript echoes back a portion
    of the URL onto the page.\n  DOM-Based XSS is notoriously hard to detect, as the
    server never gets\n  a chance to see the attack taking place.\n\n"
  affected_package: marked
  vulnerable_versions:
  - "<0.3.9"
  severity: high
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2017-08-15
  created_date: 2017-12-25
  last_modified_date: 2017-12-25
  credit:
  - Andrew Krasichkov
  references:
  - https://github.com/chjj/marked/issues/925
  - https://github.com/chjj/marked/pull/958
  source_url: https://snyk.io/vuln/npm:marked:20170815
- id: snykio:npm:marked:20170907
  title: Regular Expression Denial of Service (ReDoS)
  description: "[`marked`][1] is a full-featured markdown parser and compiler.\n\nAffected
    versions of this package are vulnerable to Regular expression\nDenial of Service
    (ReDoS) attacks when parsing the input markdown\ncontent (1,000 characters costs
    around 6 seconds matching time).\n\n\n\n[1]: https://www.npmjs.com/package/marked\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: marked
  vulnerable_versions:
  - "<0.3.9"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-16114
  cwe:
  - CWE-400
  disclosed_date: 2017-09-07
  created_date: 2017-09-21
  last_modified_date: 2017-09-21
  credit:
  - CristianAlexandru Staicu
  references:
  - https://github.com/chjj/marked/issues/937
  - https://github.com/chjj/marked/pull/958
  source_url: https://snyk.io/vuln/npm:marked:20170907
- id: snykio:npm:marked:20180225
  title: Regular Expression Denial of Service (ReDoS)
  description: "[`marked`][1] is a markdown parser built for speed\n\nAffected versions
    of this package are vulnerable to Regular Expression\nDenial of Service (ReDoS)
    attacks. This can cause an impact of about 10\nseconds matching time for data
    150 characters long.\n\n\n\n[1]: https://www.npmjs.com/package/marked\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: marked
  vulnerable_versions:
  - "<0.3.17"
  severity: high
  package_manager: npm
  cwe:
  - CWE-185
  - CWE-400
  disclosed_date: 2018-02-27
  created_date: 2018-02-27
  last_modified_date: 2018-02-27
  credit:
  - Jamie Davis
  references:
  - https://github.com/markedjs/marked/pull/1083
  - https://github.com/markedjs/marked/pull/1083
  source_url: https://snyk.io/vuln/npm:marked:20180225
- id: snykio:npm:marked:73637
  title: Regular Expression Denial of Service (ReDoS)
  description: |
    [marked][1] is a low-level compiler for parsing markdown without caching
    or blocking for long periods of time.

    Affected versions of this package are vulnerable to Regular Expression
    Denial of Service (ReDoS). Input to the `host` variable is vulnerable
    when input contains parenthesis in link URIs, coupled with a high number
    of link tokens in a single line.



    [1]: https://marked.js.org/
  affected_package: marked
  vulnerable_versions:
  - ">=0.5.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-400
  disclosed_date: 2019-01-30
  created_date: 2019-01-30
  last_modified_date: 2019-01-30
  credit:
  - Vanessa219
  references:
  - https://github.com/markedjs/marked/issues/1405
  - https://github.com/markedjs/marked/pull/1408
  source_url: https://snyk.io/vuln/SNYK-JS-MARKED-73637
