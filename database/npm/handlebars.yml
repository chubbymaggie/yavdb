---
- id: nodesecurity:npm:handlebars:2015-12-14
  title: Quoteless Attributes in Templates can lead to Content Injection
  description: |-
    Versions of `handlebars` prior to 4.0.0 are affected by a cross-site scripting vulnerability when attributes in handlebar templates are not quoted.


    ## Proof of Concept
    Template:
    ```<a href={{foo}}/>```

    Input:
    ```{ 'foo' : 'test.com onload=alert(1)'}```

    Rendered result:
    ```<a href=test.com onload=alert(1)/>```
  affected_package: handlebars
  vulnerable_versions:
  - "<4.0.0"
  patched_versions:
  - ">=4.0.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2015-8861
  cvss_v3_vector: CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N
  credit:
  - Matias P. Brutti
  references:
  - |-
    https://blog.srcclr.com/handlebars_vulnerability_research_findings/)
    https://github.com/wycats/handlebars.js/pull/1083)
  source_url: https://nodesecurity.io/advisories/61
- id: ossindex:npm:handlebars:2017-01-23
  title: '[CVE-2015-8861]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: The handlebars package before 4.0.0 for Node.js allows remote attackers
    to conduct cross-site scripting (XSS) attacks by leveraging a template with an
    attribute that is not quoted.
  affected_package: handlebars
  vulnerable_versions:
  - "<4.0.0"
  package_manager: npm
  cve:
  - CVE-2015-8861
  credit:
  - OSSIndex
  references:
  - http://www.openwall.com/lists/oss-security/2016/04/20/11
  - http://www.securityfocus.com/bid/96434
  - https://www.sourceclear.com/blog/handlebars_vulnerability_research_findings/
  - https://www.tenable.com/security/tns-2016-18
  source_url: https://ossindex.net/resource/package/7013824523/vulnerabilities
- id: ossindex:npm:handlebars:2016-12-29
  title: Cross Site Scripting (XSS)
  description: "The package is vulnerable to cross site scripting due to insufficient
    input escaping.\n\n> Handlebars template[s] that [use] user input in an HTML attribute
    value [are] wide open to a trivial XSS exploit. Note that unquoted attribute values
    are still open to attack, but this set of characters at least brings Handlebars
    in line with other Mustache implementations and other template languages.\n> \n>
    -- [github.com](https://github.com/wycats/handlebars.js/pull/68)"
  affected_package: handlebars
  vulnerable_versions:
  - "<1.0.rc.1"
  package_manager: npm
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/wycats/handlebars.js/commit/f07f70ca420e20a8c9e43545ebcbf4026718c3dd
  - https://github.com/wycats/handlebars.js/issues/68
  source_url: https://ossindex.net/resource/package/7013824523/vulnerabilities
- id: ossindex:npm:handlebars:2016-08-03
  title: Cross-Site Scripting (XSS)
  description: There are cases where un-escaped characters can result in a XSS vulnerability.
  affected_package: handlebars
  vulnerable_versions:
  - "<4.0.0"
  package_manager: npm
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/wycats/handlebars.js/commit/83b8e846a3569bd366cf0b6bdc1e4604d1a2077e
  - https://github.com/wycats/handlebars.js/pull/1083
  source_url: https://ossindex.net/resource/package/7013824523/vulnerabilities
- id: snykio:npm:handlebars:2015-12-07
  title: Cross-site Scripting (XSS)
  description: |+
    [handlebars][1] provides the power necessary to let you build semantic
    templates.

    When using attributes without quotes in a handlebars template, an
    attacker can manipulate the input to introduce additional attributes,
    potentially executing code. This may lead to a Cross-site Scripting
    (XSS) vulnerability, assuming an attacker can influence the value
    entered into the template. If the handlebars template is used to render
    user-generated content, this vulnerability may escalate to a persistent
    XSS vulnerability.



    [1]: https://github.com/wycats/handlebars.js/
    \n[handlebars][1] provides the power necessary to let you build semantic
    templates.

    When using attributes without quotes in a handlebars template, an
    attacker can manipulate the input to introduce additional attributes,
    potentially executing code. This may lead to a Cross-site Scripting
    (XSS) vulnerability, assuming an attacker can influence the value
    entered into the template. If the handlebars template is used to render
    user-generated content, this vulnerability may escalate to a persistent
    XSS vulnerability.



    [1]: https://github.com/wycats/handlebars.js/
    \n[handlebars][1] provides the power necessary to let you build semantic
    templates.

    When using attributes without quotes in a handlebars template, an
    attacker can manipulate the input to introduce additional attributes,
    potentially executing code. This may lead to a Cross-site Scripting
    (XSS) vulnerability, assuming an attacker can influence the value
    entered into the template. If the handlebars template is used to render
    user-generated content, this vulnerability may escalate to a persistent
    XSS vulnerability.



    [1]: https://github.com/wycats/handlebars.js/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    **Example:**

    Assume handlebars was used to display user comments and avatar, using
    the following template: `<img src={{avatarUrl}}><pre>{{comment}}</pre>`

    If an attacker spoofed their avatar URL and provided the following
    value: `http://evil.org/avatar.png onload=alert(document.cookie)`

    The resulting HTML would be the following, triggering the script once
    the image loads: `<img src=http://evil.org/avatar.png
    onload=alert(document.cookie)><pre>Gotcha!</pre>`

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    **Example:**

    Assume handlebars was used to display user comments and avatar, using
    the following template: `<img src={{avatarUrl}}><pre>{{comment}}</pre>`

    If an attacker spoofed their avatar URL and provided the following
    value: `http://evil.org/avatar.png onload=alert(document.cookie)`

    The resulting HTML would be the following, triggering the script once
    the image loads: `<img src=http://evil.org/avatar.png
    onload=alert(document.cookie)><pre>Gotcha!</pre>`

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    **Example:**

    Assume handlebars was used to display user comments and avatar, using
    the following template: `<img src={{avatarUrl}}><pre>{{comment}}</pre>`

    If an attacker spoofed their avatar URL and provided the following
    value: `http://evil.org/avatar.png onload=alert(document.cookie)`

    The resulting HTML would be the following, triggering the script once
    the image loads: `<img src=http://evil.org/avatar.png
    onload=alert(document.cookie)><pre>Gotcha!</pre>`

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    **Example:**

    Assume handlebars was used to display user comments and avatar, using
    the following template: `<img src={{avatarUrl}}><pre>{{comment}}</pre>`

    If an attacker spoofed their avatar URL and provided the following
    value: `http://evil.org/avatar.png onload=alert(document.cookie)`

    The resulting HTML would be the following, triggering the script once
    the image loads: `<img src=http://evil.org/avatar.png
    onload=alert(document.cookie)><pre>Gotcha!</pre>`

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    **Example:**

    Assume handlebars was used to display user comments and avatar, using
    the following template: `<img src={{avatarUrl}}><pre>{{comment}}</pre>`

    If an attacker spoofed their avatar URL and provided the following
    value: `http://evil.org/avatar.png onload=alert(document.cookie)`

    The resulting HTML would be the following, triggering the script once
    the image loads: `<img src=http://evil.org/avatar.png
    onload=alert(document.cookie)><pre>Gotcha!</pre>`

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    **Example:**

    Assume handlebars was used to display user comments and avatar, using
    the following template: `<img src={{avatarUrl}}><pre>{{comment}}</pre>`

    If an attacker spoofed their avatar URL and provided the following
    value: `http://evil.org/avatar.png onload=alert(document.cookie)`

    The resulting HTML would be the following, triggering the script once
    the image loads: `<img src=http://evil.org/avatar.png
    onload=alert(document.cookie)><pre>Gotcha!</pre>`

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    **Example:**

    Assume handlebars was used to display user comments and avatar, using
    the following template: `<img src={{avatarUrl}}><pre>{{comment}}</pre>`

    If an attacker spoofed their avatar URL and provided the following
    value: `http://evil.org/avatar.png onload=alert(document.cookie)`

    The resulting HTML would be the following, triggering the script once
    the image loads: `<img src=http://evil.org/avatar.png
    onload=alert(document.cookie)><pre>Gotcha!</pre>`

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    **Example:**

    Assume handlebars was used to display user comments and avatar, using
    the following template: `<img src={{avatarUrl}}><pre>{{comment}}</pre>`

    If an attacker spoofed their avatar URL and provided the following
    value: `http://evil.org/avatar.png onload=alert(document.cookie)`

    The resulting HTML would be the following, triggering the script once
    the image loads: `<img src=http://evil.org/avatar.png
    onload=alert(document.cookie)><pre>Gotcha!</pre>`

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    **Example:**

    Assume handlebars was used to display user comments and avatar, using
    the following template: `<img src={{avatarUrl}}><pre>{{comment}}</pre>`

    If an attacker spoofed their avatar URL and provided the following
    value: `http://evil.org/avatar.png onload=alert(document.cookie)`

    The resulting HTML would be the following, triggering the script once
    the image loads: `<img src=http://evil.org/avatar.png
    onload=alert(document.cookie)><pre>Gotcha!</pre>`

  affected_package: handlebars
  vulnerable_versions:
  - "<4.0.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  credit:
  - Matias P. Brutti
  references:
  - https://github.com/wycats/handlebars.js/commit/83b8e846a3569bd366cf0b6bdc1e4604d1a2077e
  source_url: https://snyk.io/vuln/npm:handlebars:20151207
- id: snykio:npm:handlebars:2015-11-06
  title: Cross-site Scripting (XSS)
  description: |+
    [handlebars][1] provides the power necessary to let you build semantic
    templates.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. Only the `<` and `>` chars were escaped. This meant that
    any Handlebars template that user used input in an HTML attribute value
    was wide open to a trivial XSS exploit. Note that unquoted attribute
    values are still open to attack, but this set of characters at least
    brings Handlebars in line with other Mustache implementations and other
    template languages.



    [1]: https://github.com/wycats/handlebars.js/
    \n[handlebars][1] provides the power necessary to let you build semantic
    templates.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. Only the `<` and `>` chars were escaped. This meant that
    any Handlebars template that user used input in an HTML attribute value
    was wide open to a trivial XSS exploit. Note that unquoted attribute
    values are still open to attack, but this set of characters at least
    brings Handlebars in line with other Mustache implementations and other
    template languages.



    [1]: https://github.com/wycats/handlebars.js/
    \n[handlebars][1] provides the power necessary to let you build semantic
    templates.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. Only the `<` and `>` chars were escaped. This meant that
    any Handlebars template that user used input in an HTML attribute value
    was wide open to a trivial XSS exploit. Note that unquoted attribute
    values are still open to attack, but this set of characters at least
    brings Handlebars in line with other Mustache implementations and other
    template languages.



    [1]: https://github.com/wycats/handlebars.js/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: handlebars
  vulnerable_versions:
  - "<=1.0.0-beta.3"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  references:
  - https://github.com/wycats/handlebars.js/pull/68
  source_url: https://snyk.io/vuln/npm:handlebars:20110425
