---
- id: nodesecurity:npm:npmconf:2018-05-16
  title: Out-of-bounds Read
  description: Versions of `npmconf` before 2.1.3 allocate and write to disk uninitialized
    memory contents when a typed number is passed as input on Node.js 4.x.
  affected_package: npmconf
  vulnerable_versions:
  - "<=2.1.2"
  patched_versions:
  - ">=2.1.3"
  severity: high
  package_manager: npm
  cvss_v3_vector: CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:N/A:N
  credit:
  - Сковорода Никита Андреевич
  references:
  - https://hackerone.com/reports/320269)
  source_url: https://nodesecurity.io/advisories/653
- id: snykio:npm:npmconf:2018-05-12
  title: Uninitialized Memory Exposure
  description: |+
    Affected versions of [npmconf][1] are vulnerable to Uninitialized Memory
    Exposure. It allocates and writes to disk uninitialized memory content
    when a typed number is passed as input.



    [1]: https://www.npmjs.com/package/npmconf
    \nAffected versions of [npmconf][1] are vulnerable to Uninitialized Memory
    Exposure. It allocates and writes to disk uninitialized memory content
    when a typed number is passed as input.



    [1]: https://www.npmjs.com/package/npmconf
    \nThe Buffer class on Node.js is a mutable array of binary data, and can
    be initialized with a string, array or number.

        const buf1 = new Buffer([1,2,3]);
        // creates a buffer containing [01, 02, 03]
        const buf2 = new Buffer('test');
        // creates a buffer containing ASCII bytes [74, 65, 73, 74]
        const buf3 = new Buffer(10);
        // creates a buffer of length 10

    The first two variants simply create a binary representation of the
    value it received. The last one, however, pre-allocates a buffer of the
    specified size, making it a useful buffer, especially when reading data
    from a stream. When using the number constructor of Buffer, it will
    allocate the memory, but will not fill it with zeros. Instead, the
    allocated buffer will hold whatever was in memory at the time. If the
    buffer is not `zeroed` by using `buf.fill(0)`, it may leak sensitive
    information like keys, source code, and system info.

    \nThe Buffer class on Node.js is a mutable array of binary data, and can
    be initialized with a string, array or number.

        const buf1 = new Buffer([1,2,3]);
        // creates a buffer containing [01, 02, 03]
        const buf2 = new Buffer('test');
        // creates a buffer containing ASCII bytes [74, 65, 73, 74]
        const buf3 = new Buffer(10);
        // creates a buffer of length 10

    The first two variants simply create a binary representation of the
    value it received. The last one, however, pre-allocates a buffer of the
    specified size, making it a useful buffer, especially when reading data
    from a stream. When using the number constructor of Buffer, it will
    allocate the memory, but will not fill it with zeros. Instead, the
    allocated buffer will hold whatever was in memory at the time. If the
    buffer is not `zeroed` by using `buf.fill(0)`, it may leak sensitive
    information like keys, source code, and system info.

    \nThe Buffer class on Node.js is a mutable array of binary data, and can
    be initialized with a string, array or number.

        const buf1 = new Buffer([1,2,3]);
        // creates a buffer containing [01, 02, 03]
        const buf2 = new Buffer('test');
        // creates a buffer containing ASCII bytes [74, 65, 73, 74]
        const buf3 = new Buffer(10);
        // creates a buffer of length 10

    The first two variants simply create a binary representation of the
    value it received. The last one, however, pre-allocates a buffer of the
    specified size, making it a useful buffer, especially when reading data
    from a stream. When using the number constructor of Buffer, it will
    allocate the memory, but will not fill it with zeros. Instead, the
    allocated buffer will hold whatever was in memory at the time. If the
    buffer is not `zeroed` by using `buf.fill(0)`, it may leak sensitive
    information like keys, source code, and system info.

    \nThe Buffer class on Node.js is a mutable array of binary data, and can
    be initialized with a string, array or number.

        const buf1 = new Buffer([1,2,3]);
        // creates a buffer containing [01, 02, 03]
        const buf2 = new Buffer('test');
        // creates a buffer containing ASCII bytes [74, 65, 73, 74]
        const buf3 = new Buffer(10);
        // creates a buffer of length 10

    The first two variants simply create a binary representation of the
    value it received. The last one, however, pre-allocates a buffer of the
    specified size, making it a useful buffer, especially when reading data
    from a stream. When using the number constructor of Buffer, it will
    allocate the memory, but will not fill it with zeros. Instead, the
    allocated buffer will hold whatever was in memory at the time. If the
    buffer is not `zeroed` by using `buf.fill(0)`, it may leak sensitive
    information like keys, source code, and system info.

  affected_package: npmconf
  vulnerable_versions:
  - "<2.1.3"
  severity: high
  package_manager: npm
  cwe:
  - CWE-201
  credit:
  - ChALkeR
  references:
  - https://hackerone.com/reports/320269
  source_url: https://snyk.io/vuln/npm:npmconf:20180512
