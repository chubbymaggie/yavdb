---
- id: ossindex:npm:markdown-it:2017-07-30
  title: Cross Site Scripting (XSS) in fence renderer
  description: 'Users can attach arbitrary classes to the code tag, allowing for possible
    Cross Site Scripting attacks.

'
  affected_package: markdown-it
  vulnerable_versions:
  - "<4.3.1"
  package_manager: npm
  disclosed_date: 2017-07-30
  created_date: 2017-07-30
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - https://github.com/markdown-it/markdown-it/commit/019bbda5f5ee8b7d00f2633340aef3b0d000e3f1
  - https://github.com/markdown-it/markdown-it/issues/128
  source_url: https://ossindex.net/resource/package/7014105690/vulnerabilities
- id: snykio:npm:markdown-it:20150702
  title: Cross-site Scripting (XSS) via Class Injection
  description: |+
    [`markdown-it`][1] is a modern pluggable markdown parser.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS) via Class Injection.

    The markdown-it renderer blindly appends the character class to the
    `language-` part of the tag. If there is a space in the language name,
    it\'ll be rendered into two separate classes.

        \`\`\`
        foo bar
        code
        \`\`\`

    will be rendered into

        <pre><code style="language-foo bar">
        code
        </code></pre>

    A malicious user can attach an arbitrary class to the `code` tag.



    [1]: https://www.npmjs.com/package/markdown-it
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: markdown-it
  vulnerable_versions:
  - "<4.3.1 >=4.0.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2015-07-01
  created_date: 2017-02-13
  last_modified_date: 2017-02-13
  credit:
  - Alex Kocharin
  references:
  - https://github.com/markdown-it/markdown-it/issues/128
  - https://github.com/markdown-it/markdown-it/commit/019bbda5f5ee8b7d00f2633340aef3b0d000e3f1
  source_url: https://snyk.io/vuln/npm:markdown-it:20150702
- id: snykio:npm:markdown-it:20160912
  title: Cross-site Scripting (XSS) via Data URIs
  description: |+
    [markdown-it][1] is a pluggable markdown parser used for rendering
    markdown content to html.

    Affected versions of the package allowed the use of `data:` URIs for all
    mime types by default potentially opening a door for Cross-site
    Scripting (XSS) attacks.

    The fix was introduced in version `4.1.0`, whitelisting the following
    four data types `image/gif`, `image/png`, `image/jpeg` and `image/webp`
    while blocking the others by default.

    Data URIs enable embedding small files in line in HTML documents,
    provided in the URL itself. Attackers can craft malicious web pages
    containing either HTML or script code that utilizes the data URI scheme,
    allowing them to bypass access controls or steal sensitive information.

    An example of data URI used to deliver javascript code. The data holds
    `<script>alert('XSS')</script>` tag in base64 encoded format.

        [xss link](data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K)



    [1]: https://www.npmjs.com/package/markdown-it
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: markdown-it
  vulnerable_versions:
  - "<=4.0.3"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2015-03-31
  created_date: 2016-09-27
  last_modified_date: 2016-09-27
  credit:
  - Vitaly Puzrin
  references:
  - https://github.com/markdown-it/markdown-it/blob/master/CHANGELOG.md#410--2015-03-31
  - https://github.com/markdown-it/markdown-it/compare/4.0.3...4.1.0
  - https://github.com/markdown-it/markdown-it/commit/f76d3beb46abd121892a2e2e5c78376354c214e3
  source_url: https://snyk.io/vuln/npm:markdown-it:20160912
