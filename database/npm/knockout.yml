---
- id: ossindex:npm:knockout:2016-10-05
  title: Cross Site Scripting (XSS) in attr name binding
  description: |-
    There is an XSS injection point that can be exploited for IE7 clients and older.

    It is considered "minor" and affects few users.
  affected_package: knockout
  vulnerable_versions:
  - ">0"
  package_manager: npm
  disclosed_date: 2016-10-05
  created_date: 2016-10-05
  last_modified_date: 2017-03-13
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/knockout/knockout/issues/1244
  source_url: https://ossindex.net/resource/package/7014041707/vulnerabilities
- id: snykio:npm:knockout:20130701
  title: Cross-site Scripting (XSS)
  description: |
    [`knockout`][1] makes it easier to create rich, responsive UIs with
    JavaScript.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://www.npmjs.com/package/knockout
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/marked-xss-vulnerability/
  affected_package: knockout
  vulnerable_versions:
  - "<3.0.0 >=2.1.0-pre"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2013-06-30
  created_date: 2017-03-13
  last_modified_date: 2017-03-13
  credit:
  - Steven Sanderson
  references:
  - https://github.com/knockout/knockout/pull/1022
  - https://github.com/knockout/knockout/commit/0f6e3c9dcc7df4a1b8e8b7c4ec3d5b8c5eb4e4c2
  source_url: https://snyk.io/vuln/npm:knockout:20130701
- id: snykio:npm:knockout:20180213
  title: Cross-site Scripting (XSS)
  description: |
    [`knockout`][1] makes it easier to create rich, responsive UIs with
    JavaScript.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS) attacks due to not escaping the `name` attribute.



    [1]: https://www.npmjs.com/package/knockout
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/xss-attacks-the-next-wave/
  affected_package: knockout
  vulnerable_versions:
  - "<3.5.0-beta"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2018-02-12
  created_date: 2018-03-01
  last_modified_date: 2018-03-01
  credit:
  - mbest
  references:
  - https://github.com/knockout/knockout/pull/2345
  - https://github.com/knockout/knockout/commit/7e280b2b8a04cc19176b5171263a5c68bda98efb
  source_url: https://snyk.io/vuln/npm:knockout:20180213
