---
- id: ossindex:npm:datatables:2017-01-25
  title: Cross-Site Scripting
  description: "> Cross-site scripting (XSS) vulnerability in the DataTables plugin
    1.10.8 and earlier for jQuery allows remote attackers to inject arbitrary web
    script or HTML via the scripts parameter to media/unit_testing/templates/6776.php.\n>
    \n> -- [nodesecurity.io](https://nodesecurity.io/advisories/5)"
  affected_package: datatables
  vulnerable_versions:
  - "<=1.10.8"
  package_manager: npm
  disclosed_date: 2017-01-25
  created_date: 2017-01-25
  last_modified_date: 2017-02-12
  credit:
  - OSSIndex
  references:
  - http://www.securityfocus.com/archive/1/archive/1/536437/100/0/threaded
  - https://github.com/DataTables/DataTables/issues/602
  - https://github.com/DataTables/DataTablesSrc/commit/ccf86dc5982bd8e16d
  - https://nodesecurity.io/advisories/5
  - https://www.netsparker.com/cve-2015-6384-xss-vulnerability-identified-in-datatables/
  source_url: https://ossindex.net/resource/package/7013447179/vulnerabilities
- id: ossindex:npm:datatables:2017-02-11
  title: Cross Site Scripting in unit tests
  description: An XSS vulnerability was identified in the unit tests. The tests should
    not be installed on a production system, and are likely not contained in all packages,
    reducing the impact of the bug.
  affected_package: datatables
  vulnerable_versions:
  - "<1.10.10"
  package_manager: npm
  disclosed_date: 2017-02-11
  created_date: 2017-02-11
  last_modified_date: 2017-06-02
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/DataTables/DataTables/issues/602
  - https://github.com/DataTables/DataTablesSrc/commit/ccf86dc5982bd8e16d
  source_url: https://ossindex.net/resource/package/7013447179/vulnerabilities
- id: ossindex:npm:datatables:CVE-2015-6584
  title: '[CVE-2015-6584]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in the DataTables plugin 1.10.8
    and earlier for jQuery allows remote attackers to inject arbitrary web script
    or HTML via the scripts parameter to media/unit_testing/templates/6776.php.
  affected_package: datatables
  vulnerable_versions:
  - "<=1.10.8"
  package_manager: npm
  cve:
  - CVE-2015-6584
  disclosed_date: 2015-09-11
  created_date: 2015-09-11
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://packetstormsecurity.com/files/133555/DataTables-1.10.8-Cross-Site-Scripting.html
  - http://seclists.org/fulldisclosure/2015/Sep/37
  - http://www.securityfocus.com/archive/1/archive/1/536437/100/0/threaded
  - https://www.netsparker.com/cve-2015-6384-xss-vulnerability-identified-in-datatables/
  source_url: https://ossindex.net/resource/package/7013447179/vulnerabilities
- id: snykio:npm:datatables:20151106
  title: Cross-site Scripting (XSS)
  description: |+
    [`datatables`][1] enhances HTML tables with the ability to sort, filter
    and page the data in the table very easily. Affected versions of the
    package are vulnerable to Cross-site Scripting (XSS).



    [1]: https://www.npmjs.com/package/datatables
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: datatables
  vulnerable_versions:
  - "<1.10.10 >=1.10.1"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2015-11-05
  created_date: 2017-05-08
  last_modified_date: 2017-05-08
  credit:
  - Allan Jardine
  references:
  - https://github.com/DataTables/DataTables/commit/6f67df2d21f9858ec40a6e9565c3a653cdb691a6
  source_url: https://snyk.io/vuln/npm:datatables:20151106
- id: snykio:npm:datatables:CVE-2015-6584
  title: Cross-site Scripting (XSS)
  description: |+
    Cross-site Scripting (XSS) vulnerability in the DataTables plugin 1.10.8
    and earlier for jQuery allows remote attackers to inject arbitrary web
    script or HTML via the scripts parameter to
    media/unit\_testing/templates/6776.php.

    *Source: [Node Security Project][1]*



    [1]: https://nodesecurity.io/advisories/5
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: datatables
  vulnerable_versions:
  - "<1.10.10"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2015-6584
  cwe:
  - CWE-80
  disclosed_date: 2015-09-18
  created_date: 2015-09-18
  last_modified_date: 2015-09-18
  credit:
  - Onur Yilmaz
  references:
  - http://www.securityfocus.com/archive/1/archive/1/536437/100/0/threaded
  - https://github.com/DataTables/DataTables/issues/602
  - https://github.com/DataTables/DataTablesSrc/commit/ccf86dc5982bd8e16d
  - https://www.netsparker.com/cve-2015-6384-xss-vulnerability-identified-in-datatables/
  source_url: https://snyk.io/vuln/npm:datatables:20150918
