---
- id: ossindex:npm:qs:2017-07-29
  title: Denial-of-Service Extended Event Loop Blocking
  description: "> The qs module does not have an option or default for specifying
    object depth and when parsing a string representing a deeply nested object will
    block the event loop for long periods of time. An attacker could leverage this
    to cause a temporary denial-of-service condition, for example, in a web application,
    other requests would not be processed while this blocking is occurring.\n> \n>
    -- [nodesecurity.io](https://nodesecurity.io/advisories/28)"
  affected_package: qs
  vulnerable_versions:
  - "<1.0.0"
  package_manager: npm
  disclosed_date: 2017-07-29
  created_date: 2017-07-29
  last_modified_date: 2017-07-29
  credit:
  - OSSIndex
  references:
  - https://nodesecurity.io/advisories/28
  source_url: https://ossindex.net/resource/package/7014336590/vulnerabilities
- id: ossindex:npm:qs:2017-07-30
  title: Prototype override protection bypass
  description: A prototype override protection bypass is possible, which allows attackers
    to overwrite properties and functions. A previous solution for the problem is
    incomplete.
  affected_package: qs
  vulnerable_versions:
  - "<6.4.0"
  package_manager: npm
  disclosed_date: 2017-07-30
  created_date: 2017-07-30
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d
  - https://github.com/ljharb/qs/commit/ec9e73654da35b205b0efacf750158d7b0b06413
  - https://github.com/ljharb/qs/issues/200
  - https://github.com/ljharb/qs/pull/201
  source_url: https://ossindex.net/resource/package/7014336590/vulnerabilities
- id: ossindex:npm:qs:CVE-2014-7191
  title: "[CVE-2014-7191]  Resource Management Errors"
  description: The qs module before 1.0.0 in Node.js does not call the compact function
    for array data, which allows remote attackers to cause a denial of service (memory
    consumption) by using a large index value to create a sparse array.
  affected_package: qs
  vulnerable_versions:
  - "<1.0.0"
  package_manager: npm
  cve:
  - CVE-2014-7191
  disclosed_date: 2014-10-19
  created_date: 2014-10-19
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://secunia.com/advisories/60026
  - http://secunia.com/advisories/62170
  - http://www-01.ibm.com/support/docview.wss?uid=swg21685987
  - http://www-01.ibm.com/support/docview.wss?uid=swg21687263
  - http://www-01.ibm.com/support/docview.wss?uid=swg21687928
  - http://xforce.iss.net/xforce/xfdb/96729
  - https://access.redhat.com/errata/RHSA-2016:1380
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/96729
  - https://github.com/raymondfeng/node-querystring/commit/43a604b7847e56bba49d0ce3e222fe89569354d8
  - https://github.com/visionmedia/node-querystring/issues/104
  - https://nodesecurity.io/advisories/qs_dos_memory_exhaustion
  source_url: https://ossindex.net/resource/package/7014336590/vulnerabilities
- id: snykio:npm:qs:20170213
  title: Prototype Override Protection Bypass
  description: "[`qs`][1] is a querystring parser that supports nesting and arrays,
    with\na depth limit.\n\nBy default `qs` protects against attacks that attempt
    to overwrite an\nobject\\'s existing prototype properties, such as `toString()`,\n`hasOwnProperty()`,etc.\n\nFrom
    [`qs` documentation][2]\\:\n\n> By default parameters that would overwrite properties
    on the object\n> prototype are ignored, if you wish to keep the data from those
    fields\n> either use plainObjects as mentioned above, or set allowPrototypes to\n>
    true which will allow user input to overwrite those properties.\n> WARNING It
    is generally a bad idea to enable this option as it can\n> cause problems when
    attempting to use the properties that have been\n> overwritten. Always be careful
    with this option.\n\nOverwriting these properties can impact application logic,
    potentially\nallowing attackers to work around security controls, modify data,
    make\nthe application unstable and more.\n\nIn versions of the package affected
    by this vulnerability, it is\npossible to circumvent this protection and overwrite
    prototype\nproperties and functions by prefixing the name of the parameter with
    `[`\nor `]`. e.g. `qs.parse(\"]=toString\")` will return `{toString = true}`,\nas
    a result, calling `toString()` on the object will throw an exception.\n\n**Example:**\n\n
    \   qs.parse('toString=foo', { allowPrototypes: false })\n    // {}\n    \n    qs.parse(\"]=toString\",
    { allowPrototypes: false })\n    // {toString = true} <== prototype overwritten\n\nFor
    more information, you can check out our [blog][3].\n\n\n\n[1]: https://www.npmjs.com/package/qs\n[2]:
    https://github.com/ljharb/qs\n[3]: https://snyk.io/blog/high-severity-vulnerability-qs/\n"
  affected_package: qs
  vulnerable_versions:
  - "<6.3.2 >=6.3.0"
  - "<6.2.3 >=6.2.0"
  - "<6.1.2 >=6.1.0"
  - "<6.0.4"
  severity: high
  package_manager: npm
  cwe:
  - CWE-20
  disclosed_date: 2017-02-13
  created_date: 2017-03-01
  last_modified_date: 2017-03-01
  credit:
  - Snyk Security Research Team
  references:
  - https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d
  - https://github.com/ljharb/qs/issues/200
  source_url: https://snyk.io/vuln/npm:qs:20170213
- id: snykio:npm:qs:CVE-2014-10064
  title: Denial of Service (Event Loop Blocking)
  description: |
    [`qs`][1] is a querystring parser that supports nesting and arrays, with
    a depth limit.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS). When parsing a string representing a deeply nested object, qs
    will block the event loop for long periods of time. Such a delay may
    hold up the server\'s resources, keeping it from processing other
    requests in the meantime, thus enabling a Denial-of-Service attack.



    [1]: https://www.npmjs.com/package/qs
  affected_package: qs
  vulnerable_versions:
  - "<1.0.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2014-10064
  cwe:
  - CWE-400
  disclosed_date: 2014-08-06
  created_date: 2014-08-06
  last_modified_date: 2014-08-06
  credit:
  - Tom Steele
  references:
  - https://nodesecurity.io/advisories/28
  source_url: https://snyk.io/vuln/npm:qs:20140806-1
- id: snykio:npm:qs:CVE-2014-7191
  title: Denial of Service (Memory Exhaustion)
  description: |
    [`qs`][1] is a querystring parser that supports nesting and arrays, with
    a depth limit.

    Affected versions of this package are vulnerable to Denial of Service
    (Dos) attacks. During parsing, the `qs` module may create a sparse area
    (an array where no elements are filled), and grow that array to the
    necessary size based on the indices used on it. An attacker can specify
    a high index value in a query string, thus making the server allocate a
    respectively big array. Truly large values can cause the server to run
    out of memory and cause it to crash - thus enabling a Denial-of-Service
    attack.



    [1]: https://www.npmjs.com/package/qs
  affected_package: qs
  vulnerable_versions:
  - "<1.0.0"
  severity: high
  package_manager: npm
  cve:
  - CVE-2014-7191
  cwe:
  - CWE-400
  disclosed_date: 2014-08-06
  created_date: 2014-08-06
  last_modified_date: 2014-08-06
  credit:
  - Dustin Shiver
  references:
  - https://github.com/visionmedia/node-querystring/issues/104
  - https://nvd.nist.gov/vuln/detail/CVE-2014-7191
  source_url: https://snyk.io/vuln/npm:qs:20140806
- id: snykio:npm:qs:CVE-2017-1000048
  title: Prototype Override Protection Bypass
  description: "[`qs`][1] is a querystring parser that supports nesting and arrays,
    with\na depth limit.\n\nBy default `qs` protects against attacks that attempt
    to overwrite an\nobject\\'s existing prototype properties, such as `toString()`,\n`hasOwnProperty()`,etc.\n\nFrom
    [`qs` documentation][2]\\:\n\n> By default parameters that would overwrite properties
    on the object\n> prototype are ignored, if you wish to keep the data from those
    fields\n> either use plainObjects as mentioned above, or set allowPrototypes to\n>
    true which will allow user input to overwrite those properties.\n> WARNING It
    is generally a bad idea to enable this option as it can\n> cause problems when
    attempting to use the properties that have been\n> overwritten. Always be careful
    with this option.\n\nOverwriting these properties can impact application logic,
    potentially\nallowing attackers to work around security controls, modify data,
    make\nthe application unstable and more.\n\nIn versions of the package affected
    by this vulnerability, it is\npossible to circumvent this protection and overwrite
    prototype\nproperties and functions by prefixing the name of the parameter with
    `[`\nor `]`. e.g. `qs.parse(\"]=toString\")` will return `{toString = true}`,\nas
    a result, calling `toString()` on the object will throw an exception.\n\n**Example:**\n\n
    \   qs.parse('toString=foo', { allowPrototypes: false })\n    // {}\n    \n    qs.parse(\"]=toString\",
    { allowPrototypes: false })\n    // {toString = true} <== prototype overwritten\n\nFor
    more information, you can check out our [blog][3].\n\n\n\n[1]: https://www.npmjs.com/package/qs\n[2]:
    https://github.com/ljharb/qs\n[3]: https://snyk.io/blog/high-severity-vulnerability-qs/\n"
  affected_package: qs
  vulnerable_versions:
  - "<6.3.2 >=6.3.0"
  - "<6.2.3 >=6.2.0"
  - "<6.1.2 >=6.1.0"
  - "<6.0.4"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-1000048
  cwe:
  - CWE-20
  disclosed_date: 2017-02-13
  created_date: 2017-03-01
  last_modified_date: 2017-03-01
  credit:
  - Snyk Security Research Team
  references:
  - https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d
  - https://github.com/ljharb/qs/issues/200
  source_url: https://snyk.io/vuln/npm:qs:20170213
