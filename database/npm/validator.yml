---
- id: ossindex:npm:validator:2016-05-20
  title: XSS Filter Bypass in validator Node.js Module
  description: The validator module for Node.js contains functionality meant to filter
    potential XSS attacks (a filter called xss). Several ways to bypass the filter
    were discovered.
  affected_package: validator
  vulnerable_versions:
  - "<1.1.0"
  package_manager: npm
  disclosed_date: 2016-05-20
  created_date: 2016-05-20
  last_modified_date: 2017-01-25
  credit:
  - OSSIndex
  references:
  - http://blog.kotowicz.net/2012/07/codeigniter-210-xssclean-cross-site.html
  - https://cwe.mitre.org/data/definitions/79.html
  - https://nealpoole.com/blog/2013/07/xss-filter-bypass-in-validator-nodejs-module/
  - https://nodesecurity.io/advisories/41
  source_url: https://ossindex.net/resource/package/7014587397/vulnerabilities
- id: ossindex:npm:validator:2016-05-22
  title: Regular Expression Denial of Service (ReDoS)
  description: The validator (isURL) method is vulnerable to Regular Expression Denial
    of Service (ReDoS).
  affected_package: validator
  vulnerable_versions:
  - "<3.22.1"
  package_manager: npm
  disclosed_date: 2016-05-22
  created_date: 2016-05-22
  last_modified_date: 2017-02-08
  credit:
  - OSSIndex
  references:
  - http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-8882
  - https://cwe.mitre.org/data/definitions/400.html
  - https://en.wikipedia.org/wiki/ReDoS
  - https://github.com/chriso/validator.js/issues/152
  - https://github.com/chriso/validator.js/issues/152#issuecomment-48107184
  - https://nodesecurity.io/advisories/42
  - https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS
  source_url: https://ossindex.net/resource/package/7014587397/vulnerabilities
- id: ossindex:npm:validator:2016-10-17
  title: Cross Site Scripting (XSS)
  description: The sanitize function was performing insufficient filtering when the
    input obfuscated the `javascript` keyword inside an href
  affected_package: validator
  vulnerable_versions:
  - "<2.0.0"
  package_manager: npm
  disclosed_date: 2016-10-17
  created_date: 2016-10-17
  last_modified_date: 2016-10-17
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/chriso/validator.js/issues/181
  source_url: https://ossindex.net/resource/package/7014587397/vulnerabilities
- id: ossindex:npm:validator:2016-12-30
  title: Regular Expression Denial of Service (ReDoS) in trim() and rtrim()
  description: A possible ReDoS was found in trim() and rtrim()
  affected_package: validator
  vulnerable_versions:
  - "<5.5.0"
  package_manager: npm
  disclosed_date: 2016-12-30
  created_date: 2016-12-30
  last_modified_date: 2016-12-30
  credit:
  - OSSIndex
  references:
  - https://github.com/chriso/validator.js/commit/351fa77edf5bcba390f5ea993b8d899eb4b1eb75
  - https://github.com/chriso/validator.js/issues/556
  source_url: https://ossindex.net/resource/package/7014587397/vulnerabilities
- id: ossindex:npm:validator:2017-01-30
  title: Cross Site Scripting (XSS) in isURL
  description: "The isURL function allows URLs with embedded XSS attacks to be marked
    valid.\n\n> I can fix this, but in general you should not be relying on the validator
    to suppress XSS attacks.\n> \n> -- [github.com](https://github.com/chriso/validator.js/issues/613)"
  affected_package: validator
  vulnerable_versions:
  - "<6.2.1"
  package_manager: npm
  disclosed_date: 2017-01-30
  created_date: 2017-01-30
  last_modified_date: 2017-02-02
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/chriso/validator.js/issues/613
  source_url: https://ossindex.net/resource/package/7014587397/vulnerabilities
- id: ossindex:npm:validator:CVE-2013-7451
  title: "[CVE-2013-7451] The validator module before 1.1.0 for Node.js allows remote
    attackers to bypass ..."
  description: The validator module before 1.1.0 for Node.js allows remote attackers
    to bypass the XSS filter via a nested tag.
  affected_package: validator
  vulnerable_versions:
  - "<1.1.0"
  package_manager: npm
  cve:
  - CVE-2013-7451
  disclosed_date: 2017-01-23
  created_date: 2017-01-23
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://www.openwall.com/lists/oss-security/2016/04/20/11
  - https://nodesecurity.io/advisories/41
  source_url: https://ossindex.net/resource/package/7014587397/vulnerabilities
- id: ossindex:npm:validator:CVE-2013-7452
  title: "[CVE-2013-7452] The validator module before 1.1.0 for Node.js allows remote
    attackers to bypass ..."
  description: The validator module before 1.1.0 for Node.js allows remote attackers
    to bypass the cross-site scripting (XSS) filter via a crafted javascript URI.
  affected_package: validator
  vulnerable_versions:
  - "<1.1.0"
  package_manager: npm
  cve:
  - CVE-2013-7452
  disclosed_date: 2017-01-23
  created_date: 2017-01-23
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://www.openwall.com/lists/oss-security/2016/04/20/11
  - https://nodesecurity.io/advisories/41
  source_url: https://ossindex.net/resource/package/7014587397/vulnerabilities
- id: ossindex:npm:validator:CVE-2013-7453
  title: "[CVE-2013-7453] The validator module before 1.1.0 for Node.js allows remote
    attackers to bypass ..."
  description: The validator module before 1.1.0 for Node.js allows remote attackers
    to bypass the cross-site scripting (XSS) filter via vectors related to UI redressing.
  affected_package: validator
  vulnerable_versions:
  - "<1.1.0"
  package_manager: npm
  cve:
  - CVE-2013-7453
  disclosed_date: 2017-01-23
  created_date: 2017-01-23
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://www.openwall.com/lists/oss-security/2016/04/20/11
  - https://nodesecurity.io/advisories/41
  source_url: https://ossindex.net/resource/package/7014587397/vulnerabilities
- id: ossindex:npm:validator:CVE-2013-7454
  title: "[CVE-2013-7454] The validator module before 1.1.0 for Node.js allows remote
    attackers to bypass ..."
  description: The validator module before 1.1.0 for Node.js allows remote attackers
    to bypass the cross-site scripting (XSS) filter via nested forbidden strings.
  affected_package: validator
  vulnerable_versions:
  - "<1.1.0"
  package_manager: npm
  cve:
  - CVE-2013-7454
  disclosed_date: 2017-01-23
  created_date: 2017-01-23
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://www.openwall.com/lists/oss-security/2016/04/20/11
  - https://nodesecurity.io/advisories/41
  source_url: https://ossindex.net/resource/package/7014587397/vulnerabilities
- id: ossindex:npm:validator:CVE-2014-9772
  title: '[CVE-2014-9772]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: The validator package before 2.0.0 for Node.js allows remote attackers
    to bypass the cross-site scripting (XSS) filter via hex-encoded characters.
  affected_package: validator
  vulnerable_versions:
  - "<2.0.0"
  package_manager: npm
  cve:
  - CVE-2014-9772
  disclosed_date: 2017-01-23
  created_date: 2017-01-23
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://www.openwall.com/lists/oss-security/2016/04/20/11
  - http://www.securityfocus.com/bid/97102
  - https://nodesecurity.io/advisories/43
  source_url: https://ossindex.net/resource/package/7014587397/vulnerabilities
- id: snykio:npm:validator:1
  title: Cross-site Scripting (XSS)
  description: |+
    [validator][1] is a module for Node.js contains functionality meant to
    filter potential XSS attacks (a filter called xss). A method of
    bypassing the filter via an encoded URL has been publicly disclosed. In
    general, because the function’s filtering is blacklist-based it is
    likely that other bypasses will be discovered in the future. Developers
    are encouraged not to use the xss filter function in this package. The
    xss() function removes the word \"javascript\" when contained inside an
    attribute. However, it does not properly handle cases where characters
    have been hex-encoded. As a result, it is possible to build an input
    that bypasses the filter but which the browser will accept as valid
    JavaScript.

    For example, browsers interpret [abc](javascript:...) as
    [abc](javascript:...).



    [1]: https://github.com/chriso/validator.js
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: validator
  vulnerable_versions:
  - "<2.0.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2014-10-27
  created_date: 2014-10-27
  last_modified_date: 2014-10-27
  credit:
  - taku0
  source_url: https://snyk.io/vuln/npm:validator:20130705-1
- id: snykio:npm:validator:20150313
  title: Cross-site Scripting (XSS)
  description: |+
    [`validator`][1] is a library of string validators and sanitizers.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) in IE9 due to unescaped backticks.



    [1]: https://www.npmjs.com/package/validator
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: validator
  vulnerable_versions:
  - "<3.34.0 >=3.0.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2015-03-12
  created_date: 2017-01-30
  last_modified_date: 2017-01-30
  credit:
  - Alessandro Segala
  references:
  - https://github.com/chriso/validator.js/commit/570889bf1b3c963439871a0c15aa5801ef6322d7
  source_url: https://snyk.io/vuln/npm:validator:20150313
- id: snykio:npm:validator:20160218
  title: Buffer Overflow
  description: |
    [`validator`][1] is a library of string validators and sanitizers.

    Affected versions of this package are vulnerable to Buffer Overflow. It
    used a regular expression
    (`/^(?:[A-Z0-9+\/]{4})*(?:[A-Z0-9+\/]{2}==|[A-Z0-9+\/]{3}=|[A-Z0-9+\/]{4})$/i`)
    in order to validate Base64 strings.



    [1]: https://www.npmjs.com/package/validator
  affected_package: validator
  vulnerable_versions:
  - "<5.0.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-185
  - CWE-400
  disclosed_date: 2016-02-18
  created_date: 2018-02-18
  last_modified_date: 2018-02-18
  credit:
  - Guillaume Leclerc
  references:
  - https://github.com/chriso/validator.js/blob/master/CHANGELOG.md#941
  - https://github.com/chriso/validator.js/commit/19508354cde4e08c75b377321a3d5f910dddee4e
  - https://github.com/chriso/validator.js/issues/502
  - https://github.com/chriso/validator.js/pull/503
  source_url: https://snyk.io/vuln/npm:validator:20160218
- id: snykio:npm:validator:20180218
  title: Regular Expression Denial of Service (ReDoS)
  description: "[`validator`][1] is a library of string validators and sanitizers.\n\nAffected
    versions of this package are vulnerable to Regular Expression\nDenial of Service
    (ReDoS) attacks. It used a regular expression\n(`^\\s*data:([a-z]+\\/[a-z0-9\\-\\+]+(;[a-z\\-]+=[a-z0-9\\-]+)?)?(;base64)?,[a-z0-9!\\$&',\\(\\)\\*\\+,;=\\-\\._~:@\\/\\?%\\s]*\\s*$`)\nin
    order to validate Data URIs. This can cause an impact of about 10\nseconds matching
    time for data 70K characters long.\n\n\n\n[1]: https://www.npmjs.com/package/validator\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: validator
  vulnerable_versions:
  - "<9.4.1"
  severity: low
  package_manager: npm
  cwe:
  - CWE-185
  - CWE-400
  disclosed_date: 2018-02-18
  created_date: 2018-02-18
  last_modified_date: 2018-02-18
  credit:
  - Jamie Davis
  references:
  - https://github.com/chriso/validator.js/blob/master/CHANGELOG.md#941
  - https://github.com/chriso/validator.js/commit/19508354cde4e08c75b377321a3d5f910dddee4e
  source_url: https://snyk.io/vuln/npm:validator:20180218
- id: snykio:npm:validator:CVE-2013-7451
  title: Cross-site Scripting (XSS)
  description: |+
    The validator module for Node.js contains functionality meant to filter
    potential XSS attacks (a filter called xss). Several ways to bypass the
    filter were discovered. In general, because the function’s filtering is
    blacklist-based it is likely that other bypasses will be discovered in
    the future. Developers are encouraged not to use the xss filter function
    in this package.

    *Source: [Node Security Project][1]*

    ### Details   {#details}

    Various inputs that could bypass the filter were discovered:

    Improper parsing of nested tags:

        <s <onmouseover="alert(1)"> <;s onmouseover="alert(1)">This is a test</s>

    Incomplete filtering of javascript: URIs:

        <a href="javascriptJ a V a S c R iPt::alert(1)" "<s>">test</a>

    UI Redressing:

        <div style="z-index: 9999999; background-color: green; width: 100%; height: 100%">
        <h1>You have won</h1>Please click the link and enter your login details:
        <a href="http://example.com/">http://good.com</a>
        </div>

    Bypass via Nested Forbidden Strings:

        <scrRedirecRedirect 302t 302ipt type="text/javascript">prompt(1);</scrRedirecRedirect 302t 302ipt>

    Additional bypasses were discovered by Krzysztof Kotowicz in 2012 when
    auditing CodeIgniter\'s XSS filtering function, which this code was
    based off of.



    [1]: https://nodesecurity.io/advisories/41
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: validator
  vulnerable_versions:
  - "< 1.1.1"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2013-7451
  - CVE-2013-7452
  - CVE-2013-7453
  - CVE-2013-7454
  cwe:
  - CWE-79
  disclosed_date: 2013-07-05
  created_date: 2013-07-05
  last_modified_date: 2013-07-05
  credit:
  - Krzysztof Kotowicz
  - Neal Poole
  references:
  - http://blog.kotowicz.net/2012/07/codeigniter-210-xssclean-cross-site.html
  - https://nealpoole.com/blog/2013/07/xss-filter-bypass-in-validator-nodejs-module/
  source_url: https://snyk.io/vuln/npm:validator:20130705-2
- id: snykio:npm:validator:CVE-2013-7454
  title: Cross-site Scripting (XSS)
  description: |+
    The validator module for Node.js contains functionality meant to filter
    potential XSS attacks (a filter called xss). Several ways to bypass the
    filter were discovered. In general, because the function’s filtering is
    blacklist-based it is likely that other bypasses will be discovered in
    the future. Developers are encouraged not to use the xss filter function
    in this package.

    *Source: [Node Security Project][1]*

    ### Details   {#details}

    Various inputs that could bypass the filter were discovered:

    Improper parsing of nested tags:

        <s <onmouseover="alert(1)"> <;s onmouseover="alert(1)">This is a test</s>

    Incomplete filtering of javascript: URIs:

        <a href="javascriptJ a V a S c R iPt::alert(1)" "<s>">test</a>

    UI Redressing:

        <div style="z-index: 9999999; background-color: green; width: 100%; height: 100%">
        <h1>You have won</h1>Please click the link and enter your login details:
        <a href="http://example.com/">http://good.com</a>
        </div>

    Bypass via Nested Forbidden Strings:

        <scrRedirecRedirect 302t 302ipt type="text/javascript">prompt(1);</scrRedirecRedirect 302t 302ipt>

    Additional bypasses were discovered by Krzysztof Kotowicz in 2012 when
    auditing CodeIgniter\'s XSS filtering function, which this code was
    based off of.



    [1]: https://nodesecurity.io/advisories/41
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: validator
  vulnerable_versions:
  - "< 1.1.1"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2013-7451
  - CVE-2013-7452
  - CVE-2013-7453
  - CVE-2013-7454
  cwe:
  - CWE-79
  disclosed_date: 2013-07-05
  created_date: 2013-07-05
  last_modified_date: 2013-07-05
  credit:
  - Krzysztof Kotowicz
  - Neal Poole
  references:
  - http://blog.kotowicz.net/2012/07/codeigniter-210-xssclean-cross-site.html
  - https://nealpoole.com/blog/2013/07/xss-filter-bypass-in-validator-nodejs-module/
  source_url: https://snyk.io/vuln/npm:validator:20130705-2
- id: snykio:npm:validator:CVE-2014-8882
  title: Regular Expression Denial of Service (DoS)
  description: "[`validator`][1] is a library of string validators and sanitizers.\n\nAffected
    versions of this package are vulnerable to Regular Expression\nDenial of Service
    (ReDoS) attacks. It used a regular expression in order\nto validate URLs.\n\n\n\n[1]:
    https://www.npmjs.com/package/validator\n\\nDenial of Service (DoS) describes
    a family of attacks, all aimed at\nmaking a system inaccessible to its original
    and legitimate users. There\nare many types of DoS attacks, ranging from trying
    to clog the network\npipes to the system by generating a large volume of traffic
    from many\nmachines (a Distributed Denial of Service - DDoS - attack) to sending\ncrafted
    requests that cause a system to crash or take a disproportional\namount of time
    to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial
    of\nService attack. Regular expressions are incredibly powerful, but they\naren\\'t
    very intuitive and can ultimately end up making it easy for\nattackers to take
    your site down.\n\nLet’s take the following regular expression as an example:\n\n
    \   regex = /A(B|C+)+D/\n\nThis regular expression accomplishes the following:\n\n*
    `A` The string must start with the letter \\'A\\'\n* `(B|C+)+` The string must
    then follow the letter A with either the\n  letter \\'B\\' or some number of occurrences
    of the letter \\'C\\' (the\n  `+` matches one or more times). The `+` at the end
    of this section\n  states that we can look for one or more matches of this section.\n*
    `D` Finally, we ensure this section of the string ends with a \\'D\\'\n\nThe expression
    would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt
    most cases, it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n
    \   $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s
    user 0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: validator
  vulnerable_versions:
  - "<3.22.1"
  severity: high
  package_manager: npm
  cve:
  - CVE-2014-8882
  cwe:
  - CWE-400
  disclosed_date: 2014-11-12
  created_date: 2014-11-12
  last_modified_date: 2014-11-12
  credit:
  - Karl Düüna
  references:
  - http://lab.cs.ttu.ee/dl93
  - https://github.com/chriso/validator.js/issues/152#issuecomment-48107184
  source_url: https://snyk.io/vuln/npm:validator:20130705
