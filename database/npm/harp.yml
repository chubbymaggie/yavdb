---
- id: npmjs:npm:harp:806
  title: Cross-Site Scripting
  description: All versions of `harp` are vulnerable to Cross-Site Scripting. Due
    to misconfiguration of its rendering engine, `harp` does not sanitize the HTML
    output allowing attackers to run arbitrary JavaScript when processing malicious
    files.
  affected_package: harp
  vulnerable_versions:
  - ">=0"
  severity: medium
  package_manager: npm
  cwe: CWE-79
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: skyn3t
  references: https://npmjs.com/advisories/806
  source_url: https://npmjs.com/advisories/806
- id: npmjs:npm:harp:807
  title: Unauthorized File Access
  description: All versions of `harp` are vulnerable to Unauthorized File Access.
    The documentation explicitly mentions that files or directories with names that
    start with an underscore are ignored by the server and are not served to the end
    user. By using simple URL encoding this verification is bypassed and files or
    directories that should be ignored are accessible.
  affected_package: harp
  vulnerable_versions:
  - ">=0"
  severity: medium
  package_manager: npm
  cwe: CWE-552
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: skyn3t
  references: https://npmjs.com/advisories/807
  source_url: https://npmjs.com/advisories/807
- id: snykio:npm:harp:174141
  title: Cross-site Scripting (XSS)
  description: |+
    [harp][1] is a zero-configuration web server with built in
    pre-processing.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) due to not sanitizing HTML output within its rendering engine,
    allowing attackers to run arbitrary JavaScript when processing malicious
    files.



    [1]: https://www.npmjs.com/package/harp
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: harp
  vulnerable_versions:
  - "*"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2019-04-08
  created_date: 2019-04-08
  last_modified_date: 2019-04-08
  credit:
  - skyn3t
  references:
  - https://hackerone.com/reports/453795
  source_url: https://snyk.io/vuln/SNYK-JS-HARP-174141
- id: snykio:npm:harp:174149
  title: Information Exposure
  description: |
    [harp][1] is a zero-configuration web server with built in
    pre-processing.

    Affected versions of this package are vulnerable to Information
    Exposure. The documentation explicitly mentions that files or
    directories with names that start with an underscore are ignored by the
    server and are not served to the end user. By using simple URL encoding
    this verification is bypassed and files or directories that should be
    ignored are accessible.



    [1]: https://www.npmjs.com/package/harp
  affected_package: harp
  vulnerable_versions:
  - "*"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-552
  disclosed_date: 2019-04-09
  created_date: 2019-04-10
  last_modified_date: 2019-04-10
  credit:
  - skyn3t
  references:
  - https://hackerone.com/reports/453820
  - https://www.npmjs.com/advisories/807
  source_url: https://snyk.io/vuln/SNYK-JS-HARP-174149
