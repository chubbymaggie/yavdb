---
- id: ossindex:npm:life_star:2017-07-30
  title: 'Information exposure: Uninitialized buffer in proxy'
  description: A buffer is allocated but not zeroed out, allowing for possible information
    exposure.
  affected_package: life_star
  vulnerable_versions:
  - "<0.8.6"
  package_manager: npm
  credit:
  - OSSIndex
  references:
  - https://github.com/LivelyKernel/life_star/blob/master/lib/proxy.js#L53
  - https://github.com/LivelyKernel/life_star/commit/b8d80b3209dcc26fc1f7784facaad0442b8c4218
  - https://github.com/LivelyKernel/life_star/issues/8
  source_url: https://ossindex.net/resource/package/7014069484/vulnerabilities
- id: snykio:npm:life_star:2016-02-12
  title: Uninitialized Memory Exposure
  description: |
    [`life_star`][1] is a web server for [`Lively`][2].

    A possible memory disclosure vulnerability exists when a value of type
    `number` is provided to the `buffer` and results in concatenation of
    uninitialized memory to the buffer collection. This is a result of
    unobstructed use of the `Buffer` constructor, whose [insecure default
    constructor increases the odds of memory leakage][3].

    You can read more about the insecure `Buffer` behavior [on our blog][3].

    Similar vulnerabilities were discovered in [bl][4], [request][5],
    [mongoose][6], [ws][7] and [sequelize][8].

    **Note** This is vulnerable only for Node &lt;=4



    [1]: https://www.npmjs.com/package/life_star
    [2]: https://github.com/LivelyKernel/LivelyKernel
    [3]: https://snyk.io/blog/exploiting-buffer/
    [4]: https://snyk.io/vuln/npm:bl:20160119
    [5]: https://snyk.io/vuln/npm:request:20160119
    [6]: https://snyk.io/vuln/npm:mongoose:20160116
    [7]: https://snyk.io/vuln/npm:ws:20160104
    [8]: https://snyk.io/vuln/npm:sequelize:20160115
    \n[`life_star`][1] is a web server for [`Lively`][2].

    A possible memory disclosure vulnerability exists when a value of type
    `number` is provided to the `buffer` and results in concatenation of
    uninitialized memory to the buffer collection. This is a result of
    unobstructed use of the `Buffer` constructor, whose [insecure default
    constructor increases the odds of memory leakage][3].

    You can read more about the insecure `Buffer` behavior [on our blog][3].

    Similar vulnerabilities were discovered in [bl][4], [request][5],
    [mongoose][6], [ws][7] and [sequelize][8].

    **Note** This is vulnerable only for Node &lt;=4



    [1]: https://www.npmjs.com/package/life_star
    [2]: https://github.com/LivelyKernel/LivelyKernel
    [3]: https://snyk.io/blog/exploiting-buffer/
    [4]: https://snyk.io/vuln/npm:bl:20160119
    [5]: https://snyk.io/vuln/npm:request:20160119
    [6]: https://snyk.io/vuln/npm:mongoose:20160116
    [7]: https://snyk.io/vuln/npm:ws:20160104
    [8]: https://snyk.io/vuln/npm:sequelize:20160115
    \n[`life_star`][1] is a web server for [`Lively`][2].

    A possible memory disclosure vulnerability exists when a value of type
    `number` is provided to the `buffer` and results in concatenation of
    uninitialized memory to the buffer collection. This is a result of
    unobstructed use of the `Buffer` constructor, whose [insecure default
    constructor increases the odds of memory leakage][3].

    You can read more about the insecure `Buffer` behavior [on our blog][3].

    Similar vulnerabilities were discovered in [bl][4], [request][5],
    [mongoose][6], [ws][7] and [sequelize][8].

    **Note** This is vulnerable only for Node &lt;=4



    [1]: https://www.npmjs.com/package/life_star
    [2]: https://github.com/LivelyKernel/LivelyKernel
    [3]: https://snyk.io/blog/exploiting-buffer/
    [4]: https://snyk.io/vuln/npm:bl:20160119
    [5]: https://snyk.io/vuln/npm:request:20160119
    [6]: https://snyk.io/vuln/npm:mongoose:20160116
    [7]: https://snyk.io/vuln/npm:ws:20160104
    [8]: https://snyk.io/vuln/npm:sequelize:20160115
    \n[`life_star`][1] is a web server for [`Lively`][2].

    A possible memory disclosure vulnerability exists when a value of type
    `number` is provided to the `buffer` and results in concatenation of
    uninitialized memory to the buffer collection. This is a result of
    unobstructed use of the `Buffer` constructor, whose [insecure default
    constructor increases the odds of memory leakage][3].

    You can read more about the insecure `Buffer` behavior [on our blog][3].

    Similar vulnerabilities were discovered in [bl][4], [request][5],
    [mongoose][6], [ws][7] and [sequelize][8].

    **Note** This is vulnerable only for Node &lt;=4



    [1]: https://www.npmjs.com/package/life_star
    [2]: https://github.com/LivelyKernel/LivelyKernel
    [3]: https://snyk.io/blog/exploiting-buffer/
    [4]: https://snyk.io/vuln/npm:bl:20160119
    [5]: https://snyk.io/vuln/npm:request:20160119
    [6]: https://snyk.io/vuln/npm:mongoose:20160116
    [7]: https://snyk.io/vuln/npm:ws:20160104
    [8]: https://snyk.io/vuln/npm:sequelize:20160115
    \n[`life_star`][1] is a web server for [`Lively`][2].

    A possible memory disclosure vulnerability exists when a value of type
    `number` is provided to the `buffer` and results in concatenation of
    uninitialized memory to the buffer collection. This is a result of
    unobstructed use of the `Buffer` constructor, whose [insecure default
    constructor increases the odds of memory leakage][3].

    You can read more about the insecure `Buffer` behavior [on our blog][3].

    Similar vulnerabilities were discovered in [bl][4], [request][5],
    [mongoose][6], [ws][7] and [sequelize][8].

    **Note** This is vulnerable only for Node &lt;=4



    [1]: https://www.npmjs.com/package/life_star
    [2]: https://github.com/LivelyKernel/LivelyKernel
    [3]: https://snyk.io/blog/exploiting-buffer/
    [4]: https://snyk.io/vuln/npm:bl:20160119
    [5]: https://snyk.io/vuln/npm:request:20160119
    [6]: https://snyk.io/vuln/npm:mongoose:20160116
    [7]: https://snyk.io/vuln/npm:ws:20160104
    [8]: https://snyk.io/vuln/npm:sequelize:20160115
    \n[`life_star`][1] is a web server for [`Lively`][2].

    A possible memory disclosure vulnerability exists when a value of type
    `number` is provided to the `buffer` and results in concatenation of
    uninitialized memory to the buffer collection. This is a result of
    unobstructed use of the `Buffer` constructor, whose [insecure default
    constructor increases the odds of memory leakage][3].

    You can read more about the insecure `Buffer` behavior [on our blog][3].

    Similar vulnerabilities were discovered in [bl][4], [request][5],
    [mongoose][6], [ws][7] and [sequelize][8].

    **Note** This is vulnerable only for Node &lt;=4



    [1]: https://www.npmjs.com/package/life_star
    [2]: https://github.com/LivelyKernel/LivelyKernel
    [3]: https://snyk.io/blog/exploiting-buffer/
    [4]: https://snyk.io/vuln/npm:bl:20160119
    [5]: https://snyk.io/vuln/npm:request:20160119
    [6]: https://snyk.io/vuln/npm:mongoose:20160116
    [7]: https://snyk.io/vuln/npm:ws:20160104
    [8]: https://snyk.io/vuln/npm:sequelize:20160115
  affected_package: life_star
  vulnerable_versions:
  - "<=0.8.4"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-201
  credit:
  - Сковорода Никита Андреевич (ChALkeR)
  references:
  - https://github.com/LivelyKernel/life_star/issues/8
  - https://github.com/LivelyKernel/life_star/compare/0.8.4...0.8.6
  - https://github.com/LivelyKernel/life_star/commit/b8d80b3209dcc26fc1f7784facaad0442b8c4218
  source_url: https://snyk.io/vuln/npm:life_star:20160212
