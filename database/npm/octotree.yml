---
- id: snykio:npm:octotree:20140514
  title: Cross-site Scripting (XSS)
  description: |+
    [`octotree`][1] Display GitHub code in tree format.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS). The filenames are added to jsTree without sanitization. jsTree
    will render HTML passed as a tree node\'s text, potentially compromising
    the GitHub tokens stored in local storage and allowing an attacker to
    access GitHub sessions.



    [1]: https://www.npmjs.com/package/octotree
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: octotree
  vulnerable_versions:
  - "<1.1"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2014-05-13
  created_date: 2017-05-30
  last_modified_date: 2017-05-30
  credit:
  - Greg Ose
  references:
  - https://github.com/buunguyen/octotree/issues/9
  - https://github.com/buunguyen/octotree/blob/master/HISTORY.md#v11
  - https://github.com/buunguyen/octotree/commit/a1e8a63ca894d4ecc58ba722727ca8b3c1a2128d
  source_url: https://snyk.io/vuln/npm:octotree:20140514
- id: snykio:npm:octotree:20160613
  title: Cross-site Scripting (XSS)
  description: |+
    [`octotree`][1] Display GitHub code in a tree format.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS) via the branch name, which may contain script.



    [1]: https://www.npmjs.com/package/octotree
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: octotree
  vulnerable_versions:
  - "<2.0.11"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2016-06-12
  created_date: 2017-05-30
  last_modified_date: 2017-05-30
  credit:
  - Bruno Volpato
  references:
  - https://github.com/buunguyen/octotree/issues/299
  - https://github.com/buunguyen/octotree/blob/master/HISTORY.md#v2011
  - https://github.com/buunguyen/octotree/commit/3bf37eac209c1fc0d3d6a70417e316d86612b426
  source_url: https://snyk.io/vuln/npm:octotree:20160613
