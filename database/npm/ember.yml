---
- id: ossindex:npm:ember:1970-01-01
  title: Potential XSS Exploit When Binding `tagName` to User-Supplied Data
  description: |
    Potential XSS Exploit When Binding `tagName` to User-Supplied Data

    This vulnerability has been assigned the CVE identifier CVE-2013-4170.

    In general, Ember.js escapes or strips any user-supplied content
    before inserting it in strings that will be sent to innerHTML.
    However, the `tagName` property of an `Ember.View` was inserted into
    such a string without being sanitized. This means that if an
    application assigns a view's `tagName` to user-supplied data, a
    specially-crafted payload could execute arbitrary JavaScript in the
    context of the current domain ("XSS").

    Versions Affected: ALL versions
    Not affected: NONE
    Fixed Versions: 1.0.0 RC6.1, 1.0.0 RC5.1, 1.0.0 RC4.1, 1.0.0 RC3.1,
    1.0.0 RC2.1, 1.0.0 RC1.1
  affected_package: ember
  vulnerable_versions:
  - "<1.0.0-rc61"
  package_manager: npm
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 2017-08-03
  credit:
  - OSSIndex
  references:
  - https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM
  source_url: https://ossindex.net/resource/package/7013522888/vulnerabilities
- id: ossindex:npm:ember:2016-08-03
  title: XSS Vulnerability in Ember.js with User-Supplied JSON
  description: |-
    It is possible for an attacker to create a specially-crafted payload
    that causes a non-sanitized string to be treated as a `SafeString`, and
    thus bypass Ember's normal escaping behavior. This could allow an
    attacker to execute arbitrary JavaScript in the context of the current
    domain ("XSS").
  affected_package: ember
  vulnerable_versions:
  - ">= 1.12.0 < 1.12.2"
  - ">= 1.13.0 < 1.13.12"
  - ">= 2.0.0 < 2.0.3"
  - ">= 2.1.0 < 2.1.2"
  - ">= 2.2.0 < 2.2.1"
  - ">=1.8.0 <1.11.4"
  package_manager: npm
  disclosed_date: 2016-08-03
  created_date: 2016-08-03
  last_modified_date: 2017-08-03
  credit:
  - OSSIndex
  references:
  - https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY
  source_url: https://ossindex.net/resource/package/7013522888/vulnerabilities
- id: ossindex:npm:ember:2016-08-11
  title: "[Duplicate] XSS Vulnerability in Ember.js with User-Supplied JSON"
  description: |-
    See https://ossindex.net/resource/vulnerability/8399958615

    It is possible for an attacker to create a specially-crafted payload that causes a non-sanitized string to be treated as a SafeString, and thus bypass Ember's normal escaping behavior. This could allow an attacker to execute arbitrary JavaScript in the context of the current domain ("XSS").
  affected_package: ember
  vulnerable_versions:
  - ">= 2.1.0 < 2.1.2"
  package_manager: npm
  disclosed_date: 2016-08-11
  created_date: 2016-08-11
  last_modified_date: 2017-08-03
  credit:
  - OSSIndex
  references:
  - https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY
  source_url: https://ossindex.net/resource/package/7013522888/vulnerabilities
- id: ossindex:npm:ember:2016-11-13
  title: Cross Site Scripting (XSS)
  description: Model attributes are not properly escaped due to a bug in RenderBuffer.
    This opens the door for some potentially serious XSS attacks.
  affected_package: ember
  vulnerable_versions:
  - "<1.0"
  package_manager: npm
  disclosed_date: 2016-11-13
  created_date: 2016-11-13
  last_modified_date: 2017-08-03
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/emberjs/ember.js/issues/699
  source_url: https://ossindex.net/resource/package/7013522888/vulnerabilities
- id: ossindex:npm:ember:2016-11-30
  title: Possible Cross Site Scripting (XSS)
  description: There was a potential XSS exploit when using unquoted attributes, in
    particular the `=` character.
  affected_package: ember
  vulnerable_versions:
  - "<4.0.0"
  package_manager: npm
  disclosed_date: 2016-11-30
  created_date: 2016-11-30
  last_modified_date: 2017-08-03
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/emberjs/ember.js/issues/14297
  - https://github.com/wycats/handlebars.js/commit/83b8e846a3569bd366cf0b6bdc1e4604d1a2077e
  - https://github.com/wycats/handlebars.js/pull/1083
  source_url: https://ossindex.net/resource/package/7013522888/vulnerabilities
- id: ossindex:npm:ember:CVE-2014-0046
  title: '[CVE-2014-0046]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in the link-to helper in Ember.js
    1.2.x before 1.2.2, 1.3.x before 1.3.2, and 1.4.x before 1.4.0-beta.6, when used
    in non-block form, allows remote attackers to inject arbitrary web script or HTML
    via the title attribute.
  affected_package: ember
  vulnerable_versions:
  - 1.2.0
  - 1.2.1
  - 1.3.0
  - 1.3.1
  - 1.4.0
  package_manager: npm
  cve:
  - CVE-2014-0046
  disclosed_date: 2014-02-27
  created_date: 2014-02-27
  last_modified_date: 2017-08-03
  credit:
  - OSSIndex
  references:
  - http://emberjs.com/blog/2014/02/07/ember-security-releases.html
  - http://secunia.com/advisories/56965
  - http://www.openwall.com/lists/oss-security/2014/02/14/6
  - http://www.securityfocus.com/bid/65579
  - http://xforce.iss.net/xforce/xfdb/91242
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/91242
  - https://groups.google.com/forum/#!topic/ember-security/1h6FRgr8lXQ
  - https://groups.google.com/forum/#%21topic/ember-security/1h6FRgr8lXQ
  source_url: https://ossindex.net/resource/package/7013522888/vulnerabilities
- id: ossindex:npm:ember:CVE-2015-7565
  title: '[CVE-2015-7565]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in Ember.js 1.8.x through
    1.10.x, 1.11.x before 1.11.4, 1.12.x before 1.12.2, 1.13.x before 1.13.12, 2.0.x
    before 2.0.3, 2.1.x before 2.1.2, and 2.2.x before 2.2.1 allows remote attackers
    to inject arbitrary web script or HTML.
  affected_package: ember
  vulnerable_versions:
  - '1.10'
  - 1.10.1
  - '1.11'
  - 1.11.1
  - 1.11.2
  - 1.11.3
  - '1.12'
  - 1.12.1
  - '1.13'
  - 1.13.1
  - 1.13.10
  - 1.13.11
  - 1.13.2
  - 1.13.3
  - 1.13.4
  - 1.13.5
  - 1.13.6
  - 1.13.7
  - 1.13.8
  - 1.13.9
  - '1.8'
  - 1.8.1
  - '1.9'
  - 1.9.1
  - '2.0'
  - 2.0.1
  - 2.0.2
  - '2.1'
  - 2.1.1
  - '2.2'
  package_manager: npm
  cve:
  - CVE-2015-7565
  disclosed_date: 2017-04-13
  created_date: 2017-04-13
  last_modified_date: 2017-08-03
  credit:
  - OSSIndex
  references:
  - http://emberjs.com/blog/2016/01/14/security-releases-ember-1-11-4-1-12-2-1-13-12-2-0-3-2-1-2-2-2-1.html
  - https://groups.google.com/forum/#!topic/ember-security/OfyQkoSuppY
  - https://groups.google.com/forum/#%21topic/ember-security/OfyQkoSuppY
  source_url: https://ossindex.net/resource/package/7013522888/vulnerabilities
- id: snykio:npm:ember:1
  title: Cross-site Scripting (XSS)
  description: |+
    Potential XSS Exploit With User-Supplied Data When Binding Primitive
    Values

    In general, Ember.js escapes or strips any user-supplied content before
    inserting it in strings that will be sent to innerHTML. However, a
    vulnerability that could lead to unescaped content being inserted into
    the innerHTML string without being sanitized has been identified.

    \n&lt;<XSS />

    **Impact:**

    This vulnerability affects applications that contain templates whose
    context is set to a user-supplied primitive value (such as a string or
    number) and also contain the `{{this}}` special Handlebars variable to
    display the value.

  affected_package: ember
  vulnerable_versions:
  - 1.2.0
  - 1.2.1
  - 1.3.0
  - 1.3.1
  severity: low
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2015-11-06
  created_date: 2015-11-06
  last_modified_date: 2015-11-06
  credit:
  - Hyder Ali
  references:
  - https://groups.google.com/forum/#!topic/ember-security/1h6FRgr8lXQ
  source_url: https://snyk.io/vuln/npm:ember:20140214-1
- id: snykio:npm:ember:CVE-2013-4170
  title: Potential Cross-site Scripting (XSS)
  description: |+
    In general, Ember.js escapes or strips any user-supplied content before
    inserting it in strings that will be sent to innerHTML. However, the
    `tagName` property of an `Ember.View` was inserted into such a string
    without being sanitized. This means that if an application assigns a
    view\'s `tagName` to user-supplied data, a specially-crafted payload
    could execute arbitrary JavaScript in the context of the current domain
    (XSS).

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: ember
  vulnerable_versions:
  - ">= 1.0.0-rc.1 <1.0.0-rc.1.1"
  - ">= 1.0.0-rc.2 <1.0.0-rc.2.1"
  - ">= 1.0.0-rc.3 <1.0.0-rc.3.1"
  - ">= 1.0.0-rc.4 <1.0.0-rc.4.1"
  - ">= 1.0.0-rc.5 <1.0.0-rc.5.1"
  - ">= 1.0.0-rc.6 <1.0.0-rc.6.1"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2013-4170
  cwe:
  - CWE-79
  disclosed_date: 2015-11-06
  created_date: 2015-11-06
  last_modified_date: 2015-11-06
  credit:
  - Mario Heiderich
  references:
  - https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM
  source_url: https://snyk.io/vuln/npm:ember:20130105-1
- id: snykio:npm:ember:CVE-2014-0013
  title: Potential Cross-site Scripting (XSS)
  description: |+
    Potential XSS Exploit With User-Supplied Data When Using \{\{group}}
    Helper

    In general, Ember.js escapes or strips any user-supplied content before
    inserting it in strings that will be sent to innerHTML. However, a
    vulnerability has been identified that could lead to unescaped content
    being inserted into the innerHTML string without being sanitized.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    **Impact**\:

    This vulnerability only affects applications that use the `{{group}}`
    helper to display user-provided content.

  affected_package: ember
  vulnerable_versions:
  - ">=1.0.0 <1.0.1"
  - ">=1.1.0 <1.1.3"
  - ">=1.2.0 <1.2.1"
  - ">=1.3.0 <1.3.1"
  - ">=1.4.0 <1.4.0-beta2"
  severity: low
  package_manager: npm
  cve:
  - CVE-2014-0013
  - CVE-2014-0014
  cwe:
  - CWE-79
  disclosed_date: 2015-11-06
  created_date: 2015-11-06
  last_modified_date: 2015-11-06
  credit:
  - Robert Jackson
  references:
  - https://groups.google.com/forum/#!topic/ember-security/2kpXXCxISS4
  - https://groups.google.com/forum/#!topic/ember-security/PSE4RzTi6l4
  source_url: https://snyk.io/vuln/npm:ember:20140114-1
- id: snykio:npm:ember:CVE-2014-0014
  title: Potential Cross-site Scripting (XSS)
  description: |+
    Potential XSS Exploit With User-Supplied Data When Using \{\{group}}
    Helper

    In general, Ember.js escapes or strips any user-supplied content before
    inserting it in strings that will be sent to innerHTML. However, a
    vulnerability has been identified that could lead to unescaped content
    being inserted into the innerHTML string without being sanitized.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    **Impact**\:

    This vulnerability only affects applications that use the `{{group}}`
    helper to display user-provided content.

  affected_package: ember
  vulnerable_versions:
  - ">=1.0.0 <1.0.1"
  - ">=1.1.0 <1.1.3"
  - ">=1.2.0 <1.2.1"
  - ">=1.3.0 <1.3.1"
  - ">=1.4.0 <1.4.0-beta2"
  severity: low
  package_manager: npm
  cve:
  - CVE-2014-0013
  - CVE-2014-0014
  cwe:
  - CWE-79
  disclosed_date: 2015-11-06
  created_date: 2015-11-06
  last_modified_date: 2015-11-06
  credit:
  - Robert Jackson
  references:
  - https://groups.google.com/forum/#!topic/ember-security/2kpXXCxISS4
  - https://groups.google.com/forum/#!topic/ember-security/PSE4RzTi6l4
  source_url: https://snyk.io/vuln/npm:ember:20140114-1
