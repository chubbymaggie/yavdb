---
- id: snykio:npm:semantic-ui:2017-01-29
  title: Cross-site Scripting (XSS)
  description: |
    [`semantic-ui`][1] empowers designers and developers by creating a
    shared vocabulary for UI..\]

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS). When using a dropdown and allowing users to type their own
    additions to a multi select, the user can escape outside of the selector
    and can be used in XSS attacks.



    [1]: https://www.npmjs.com/package/semantic-ui
    \n[`semantic-ui`][1] empowers designers and developers by creating a
    shared vocabulary for UI..\]

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS). When using a dropdown and allowing users to type their own
    additions to a multi select, the user can escape outside of the selector
    and can be used in XSS attacks.



    [1]: https://www.npmjs.com/package/semantic-ui
    \n[`semantic-ui`][1] empowers designers and developers by creating a
    shared vocabulary for UI..\]

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS). When using a dropdown and allowing users to type their own
    additions to a multi select, the user can escape outside of the selector
    and can be used in XSS attacks.



    [1]: https://www.npmjs.com/package/semantic-ui
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/marked-xss-vulnerability/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/marked-xss-vulnerability/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/marked-xss-vulnerability/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/marked-xss-vulnerability/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/marked-xss-vulnerability/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/marked-xss-vulnerability/
  affected_package: semantic-ui
  vulnerable_versions:
  - "<2.2.8"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  credit:
  - Scott Jackson
  references:
  - https://github.com/Semantic-Org/Semantic-UI/issues/4962
  source_url: https://snyk.io/vuln/npm:semantic-ui:20170130
- id: snykio:npm:semantic-ui:2014-08-23
  title: Cross-site Scripting (XSS)
  description: "[`semantic-ui`][1] empowers designers and developers by creating a\nshared
    vocabulary for UI.  \nAffected versions of the package are vulnerable to Cross-site
    Scripting\n(XSS)\n\n\n\n[1]: https://www.npmjs.com/package/semantic-ui\n\\n[`semantic-ui`][1]
    empowers designers and developers by creating a\nshared vocabulary for UI.  \nAffected
    versions of the package are vulnerable to Cross-site Scripting\n(XSS)\n\n\n\n[1]:
    https://www.npmjs.com/package/semantic-ui\n\\nCross-Site Scripting (XSS) attacks
    occur when an attacker tricks a\nuser’s browser to execute malicious JavaScript
    code in the context of a\nvictim’s domain. Such scripts can steal the user’s session
    cookies for\nthe domain, scrape or modify its content, and perform or modify actions\non
    the user’s behalf, actions typically blocked by the browser’s Same\nOrigin Policy.\n\nThese
    attacks are possible by escaping the context of the web\napplication and injecting
    malicious scripts in an otherwise trusted\nwebsite. These scripts can introduce
    additional attributes (say, a\n\\\"new\\\" option in a dropdown list or a new
    link to a malicious site) and\ncan potentially execute code on the clients side,
    unbeknown to the\nvictim. This occurs when characters like `<` `>` `\"` `'` are
    not escaped\nproperly.\n\nThere are a few types of XSS:\n\n* **Persistent XSS**
    is an attack in which the malicious code persists\n  into the web app’s database.\n*
    **Reflected XSS** is an which the website echoes back a portion of the\n  request.
    The attacker needs to trick the user into clicking a\n  malicious link (for instance
    through a phishing email or malicious JS\n  on another page), which triggers the
    XSS attack.\n* **DOM-based XSS** is an that occurs purely in the browser when\n
    \ client-side JavaScript echoes back a portion of the URL onto the page.\n  DOM-Based
    XSS is notoriously hard to detect, as the server never gets\n  a chance to see
    the attack taking place.\n\nYou can read more about `Cross-site Scripting (XSS)`
    on our [blog][1].\n\n\n\n[1]: https://snyk.io/blog/marked-xss-vulnerability/\n\\nCross-Site
    Scripting (XSS) attacks occur when an attacker tricks a\nuser’s browser to execute
    malicious JavaScript code in the context of a\nvictim’s domain. Such scripts can
    steal the user’s session cookies for\nthe domain, scrape or modify its content,
    and perform or modify actions\non the user’s behalf, actions typically blocked
    by the browser’s Same\nOrigin Policy.\n\nThese attacks are possible by escaping
    the context of the web\napplication and injecting malicious scripts in an otherwise
    trusted\nwebsite. These scripts can introduce additional attributes (say, a\n\\\"new\\\"
    option in a dropdown list or a new link to a malicious site) and\ncan potentially
    execute code on the clients side, unbeknown to the\nvictim. This occurs when characters
    like `<` `>` `\"` `'` are not escaped\nproperly.\n\nThere are a few types of XSS:\n\n*
    **Persistent XSS** is an attack in which the malicious code persists\n  into the
    web app’s database.\n* **Reflected XSS** is an which the website echoes back a
    portion of the\n  request. The attacker needs to trick the user into clicking
    a\n  malicious link (for instance through a phishing email or malicious JS\n  on
    another page), which triggers the XSS attack.\n* **DOM-based XSS** is an that
    occurs purely in the browser when\n  client-side JavaScript echoes back a portion
    of the URL onto the page.\n  DOM-Based XSS is notoriously hard to detect, as the
    server never gets\n  a chance to see the attack taking place.\n\nYou can read
    more about `Cross-site Scripting (XSS)` on our [blog][1].\n\n\n\n[1]: https://snyk.io/blog/marked-xss-vulnerability/\n\\nCross-Site
    Scripting (XSS) attacks occur when an attacker tricks a\nuser’s browser to execute
    malicious JavaScript code in the context of a\nvictim’s domain. Such scripts can
    steal the user’s session cookies for\nthe domain, scrape or modify its content,
    and perform or modify actions\non the user’s behalf, actions typically blocked
    by the browser’s Same\nOrigin Policy.\n\nThese attacks are possible by escaping
    the context of the web\napplication and injecting malicious scripts in an otherwise
    trusted\nwebsite. These scripts can introduce additional attributes (say, a\n\\\"new\\\"
    option in a dropdown list or a new link to a malicious site) and\ncan potentially
    execute code on the clients side, unbeknown to the\nvictim. This occurs when characters
    like `<` `>` `\"` `'` are not escaped\nproperly.\n\nThere are a few types of XSS:\n\n*
    **Persistent XSS** is an attack in which the malicious code persists\n  into the
    web app’s database.\n* **Reflected XSS** is an which the website echoes back a
    portion of the\n  request. The attacker needs to trick the user into clicking
    a\n  malicious link (for instance through a phishing email or malicious JS\n  on
    another page), which triggers the XSS attack.\n* **DOM-based XSS** is an that
    occurs purely in the browser when\n  client-side JavaScript echoes back a portion
    of the URL onto the page.\n  DOM-Based XSS is notoriously hard to detect, as the
    server never gets\n  a chance to see the attack taking place.\n\nYou can read
    more about `Cross-site Scripting (XSS)` on our [blog][1].\n\n\n\n[1]: https://snyk.io/blog/marked-xss-vulnerability/\n\\nCross-Site
    Scripting (XSS) attacks occur when an attacker tricks a\nuser’s browser to execute
    malicious JavaScript code in the context of a\nvictim’s domain. Such scripts can
    steal the user’s session cookies for\nthe domain, scrape or modify its content,
    and perform or modify actions\non the user’s behalf, actions typically blocked
    by the browser’s Same\nOrigin Policy.\n\nThese attacks are possible by escaping
    the context of the web\napplication and injecting malicious scripts in an otherwise
    trusted\nwebsite. These scripts can introduce additional attributes (say, a\n\\\"new\\\"
    option in a dropdown list or a new link to a malicious site) and\ncan potentially
    execute code on the clients side, unbeknown to the\nvictim. This occurs when characters
    like `<` `>` `\"` `'` are not escaped\nproperly.\n\nThere are a few types of XSS:\n\n*
    **Persistent XSS** is an attack in which the malicious code persists\n  into the
    web app’s database.\n* **Reflected XSS** is an which the website echoes back a
    portion of the\n  request. The attacker needs to trick the user into clicking
    a\n  malicious link (for instance through a phishing email or malicious JS\n  on
    another page), which triggers the XSS attack.\n* **DOM-based XSS** is an that
    occurs purely in the browser when\n  client-side JavaScript echoes back a portion
    of the URL onto the page.\n  DOM-Based XSS is notoriously hard to detect, as the
    server never gets\n  a chance to see the attack taking place.\n\nYou can read
    more about `Cross-site Scripting (XSS)` on our [blog][1].\n\n\n\n[1]: https://snyk.io/blog/marked-xss-vulnerability/\n\\nCross-Site
    Scripting (XSS) attacks occur when an attacker tricks a\nuser’s browser to execute
    malicious JavaScript code in the context of a\nvictim’s domain. Such scripts can
    steal the user’s session cookies for\nthe domain, scrape or modify its content,
    and perform or modify actions\non the user’s behalf, actions typically blocked
    by the browser’s Same\nOrigin Policy.\n\nThese attacks are possible by escaping
    the context of the web\napplication and injecting malicious scripts in an otherwise
    trusted\nwebsite. These scripts can introduce additional attributes (say, a\n\\\"new\\\"
    option in a dropdown list or a new link to a malicious site) and\ncan potentially
    execute code on the clients side, unbeknown to the\nvictim. This occurs when characters
    like `<` `>` `\"` `'` are not escaped\nproperly.\n\nThere are a few types of XSS:\n\n*
    **Persistent XSS** is an attack in which the malicious code persists\n  into the
    web app’s database.\n* **Reflected XSS** is an which the website echoes back a
    portion of the\n  request. The attacker needs to trick the user into clicking
    a\n  malicious link (for instance through a phishing email or malicious JS\n  on
    another page), which triggers the XSS attack.\n* **DOM-based XSS** is an that
    occurs purely in the browser when\n  client-side JavaScript echoes back a portion
    of the URL onto the page.\n  DOM-Based XSS is notoriously hard to detect, as the
    server never gets\n  a chance to see the attack taking place.\n\nYou can read
    more about `Cross-site Scripting (XSS)` on our [blog][1].\n\n\n\n[1]: https://snyk.io/blog/marked-xss-vulnerability/\n\\nCross-Site
    Scripting (XSS) attacks occur when an attacker tricks a\nuser’s browser to execute
    malicious JavaScript code in the context of a\nvictim’s domain. Such scripts can
    steal the user’s session cookies for\nthe domain, scrape or modify its content,
    and perform or modify actions\non the user’s behalf, actions typically blocked
    by the browser’s Same\nOrigin Policy.\n\nThese attacks are possible by escaping
    the context of the web\napplication and injecting malicious scripts in an otherwise
    trusted\nwebsite. These scripts can introduce additional attributes (say, a\n\\\"new\\\"
    option in a dropdown list or a new link to a malicious site) and\ncan potentially
    execute code on the clients side, unbeknown to the\nvictim. This occurs when characters
    like `<` `>` `\"` `'` are not escaped\nproperly.\n\nThere are a few types of XSS:\n\n*
    **Persistent XSS** is an attack in which the malicious code persists\n  into the
    web app’s database.\n* **Reflected XSS** is an which the website echoes back a
    portion of the\n  request. The attacker needs to trick the user into clicking
    a\n  malicious link (for instance through a phishing email or malicious JS\n  on
    another page), which triggers the XSS attack.\n* **DOM-based XSS** is an that
    occurs purely in the browser when\n  client-side JavaScript echoes back a portion
    of the URL onto the page.\n  DOM-Based XSS is notoriously hard to detect, as the
    server never gets\n  a chance to see the attack taking place.\n\nYou can read
    more about `Cross-site Scripting (XSS)` on our [blog][1].\n\n\n\n[1]: https://snyk.io/blog/marked-xss-vulnerability/\n"
  affected_package: semantic-ui
  vulnerable_versions:
  - "<1.0.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  credit:
  - Denis Rechkunov
  references:
  - https://github.com/Semantic-Org/Semantic-UI/pull/1033
  - https://github.com/Semantic-Org/Semantic-UI/commit/259fd6f0dbf07e3b67fcd190fa575980c0998ec8
  source_url: https://snyk.io/vuln/npm:semantic-ui:20140824
