---
- id: ossindex:npm:reveal.js:8402731344
  title: Cross Site Scripting (XSS) in pre tag
  description: Cross site scripting attacks are possible within pre tags due to the
    use of innerHtml instead of textContent in `navigateFragment(...)`
  affected_package: reveal.js
  vulnerable_versions:
  - "<3.1.0"
  package_manager: npm
  disclosed_date: 2017-03-31
  created_date: 2017-03-31
  last_modified_date: 2017-06-26
  credit:
  - OSSIndex
  references:
  - https://github.com/hakimel/reveal.js/blob/9a89e39367dda0d39a618c9672df59b95b7eb3a8/js/reveal.js
  - https://github.com/hakimel/reveal.js/issues/1100
  source_url: https://ossindex.net/resource/package/7014389336/vulnerabilities
- id: snykio:npm:reveal.js:173730
  title: Insecure Randomness
  description: |
    [reveal.js][1] is a framework for easily creating presentations using
    HTML.

    Affected versions of this package are vulnerable to Insecure Randomness.
    Authorisation tokens are generated using `math.random` which can be
    predicted.



    [1]: http://revealjs.com/
  affected_package: reveal.js
  vulnerable_versions:
  - "*"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-331
  disclosed_date: 2019-01-30
  created_date: 2019-02-26
  last_modified_date: 2019-02-26
  credit:
  - albertziegler
  references:
  - https://github.com/hakimel/reveal.js/pull/2312
  source_url: https://snyk.io/vuln/SNYK-JS-REVEALJS-173730
- id: snykio:npm:reveal.js:20131024
  title: Cross-site Scripting (XSS)
  description: |
    [`reveal.js`][1] is The HTML Presentation Framework.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://www.npmjs.com/package/reveal.js
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/marked-xss-vulnerability/
  affected_package: reveal.js
  vulnerable_versions:
  - "<2.6.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2013-10-23
  created_date: 2017-03-13
  last_modified_date: 2017-03-13
  credit:
  - Hakim El Hattab
  references:
  - https://github.com/hakimel/reveal.js/commit/f1f28f61e608b70f437860e82555e3e4a9abd4b9
  source_url: https://snyk.io/vuln/npm:reveal.js:20131024
