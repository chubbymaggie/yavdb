---
- id: snykio:npm:ghost:20160823
  title: Open Redirect
  description: |
    [`ghost`][1] is a blogging platform. Affected versions of the package
    are vulnerable to Open Redirect attacks. A malicious user can create a
    link containing double slashes, which are treated as HTTP calls, and
    redirect to a site of their choosing.



    [1]: https://www.npmjs.com/package/ghost
  affected_package: ghost
  vulnerable_versions:
  - "<0.10.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-601
  disclosed_date: 2016-08-22
  created_date: 2017-05-30
  last_modified_date: 2017-05-30
  credit:
  - Jesse Dijkstra
  references:
  - https://github.com/TryGhost/Ghost/commit/f546a5ce1d2dd7a018eeaf0413a23d71155f0869
  - https://github.com/TryGhost/Ghost/pull/7247
  source_url: https://snyk.io/vuln/npm:ghost:20160823
- id: snykio:npm:ghost:20161007
  title: Cross-site Scripting (XSS)
  description: |+
    [`ghost`][1] is a blogging platform. Affected versions of the package
    are vulnerable to Cross-site Scripting (XSS) via the subscribe url. If
    an attacker set the location parameter to `javascript:alert(0)`,
    javascript will executed in the users browser when pressing the back
    button.



    [1]: https://www.npmjs.com/package/ghost
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: ghost
  vulnerable_versions:
  - "<1.0.0-alpha.5 >=1.0.0-alpha.1"
  - ">=0.8.0 < 0.11.2"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2016-10-06
  created_date: 2017-05-30
  last_modified_date: 2017-05-30
  credit:
  - Shashank
  references:
  - https://github.com/TryGhost/Ghost/commit/03e4acdb374ce5067ce630b40f95743ca3e1ef21
  - https://github.com/TryGhost/Ghost/pull/7520
  - https://github.com/TryGhost/Ghost/pull/7539
  - https://github.com/TryGhost/Ghost/pull/7540
  source_url: https://snyk.io/vuln/npm:ghost:20161007
- id: snykio:npm:ghost:20170110
  title: Cross-site Scripting (XSS)
  description: |+
    [`ghost`][1] is a blogging platform. Affected versions of the package
    are vulnerable to Cross-site Scripting (XSS) because it fails to
    securely handle user data, making it possible for an attacker to supply
    crafted input in order to harm third party users.



    [1]: https://www.npmjs.com/package/ghost
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: ghost
  vulnerable_versions:
  - "<0.11.4 >=0.8.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2017-01-09
  created_date: 2017-05-30
  last_modified_date: 2017-05-30
  credit:
  - Katharina Irrgang
  references:
  - http://seclists.org/fulldisclosure/2017/Jan/49
  - https://github.com/TryGhost/Ghost/commit/32b9fc71a7f1400acff1f2446167b6c852769843
  - https://github.com/TryGhost/Ghost/issues/7832
  - https://github.com/TryGhost/Ghost/pull/7833
  source_url: https://snyk.io/vuln/npm:ghost:20170110
- id: snykio:npm:ghost:CVE-2015-1406
  title: Cross-site Scripting (XSS)
  description: |+
    [`ghost`][1] is a blogging platform. Affected versions of the package
    are vulnerable to Cross-site Scripting (XSS) attacks. An authenticated
    user can embed code in the blog\'s images, like the user avatar, cover
    image and blog image, with possible malicious intent to execute the code
    on the client-side. Additionally, another Cross-site Scripting (XSS) has
    been found in the Tag Manager. An authenticated user can create a new
    post and tag it with a tag containing javascript code. An administrator
    may want to delete this tag, triggering the javascript code. This will
    result in the administrator token is stolen and his session hijacked.



    [1]: https://www.npmjs.com/package/ghost
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: ghost
  vulnerable_versions:
  - "<0.5.9"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2015-1406
  cwe:
  - CWE-79
  disclosed_date: 2015-03-02
  created_date: 2017-05-30
  last_modified_date: 2017-05-30
  credit:
  - Abdel Adim Oisif
  references:
  - https://dev.ghost.org/ghost-0-5-9/
  - https://voidsec.com/ghost-blogging-platform/
  - https://voidsec.com/wp-content/uploads/2015/03/VoidSec-Ghost.pdf
  source_url: https://snyk.io/vuln/npm:ghost:20150303-2
- id: snykio:npm:ghost:CVE-2015-1407
  title: Denial of Service (DoS)
  description: |+
    [`ghost`][1] is a blogging platform. Affected versions of the package
    are vulnerable to Denial of Service (DoS) attack, via filesystem
    exhaustion. When updating a user avatar, the pervious one is saved and
    not deleted. Also, the file size of the avatar is not limited.



    [1]: https://www.npmjs.com/package/ghost
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: ghost
  vulnerable_versions:
  - "<0.5.9"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2015-1407
  cwe:
  - CWE-400
  disclosed_date: 2015-03-02
  created_date: 2017-05-30
  last_modified_date: 2017-05-30
  credit:
  - paolo Stagno
  references:
  - https://dev.ghost.org/ghost-0-5-9/
  - https://voidsec.com/ghost-blogging-platform/
  - https://voidsec.com/wp-content/uploads/2015/03/VoidSec-Ghost.pdf
  source_url: https://snyk.io/vuln/npm:ghost:20150303-5
- id: snykio:npm:ghost:CVE-2015-1408
  title: Authentication Bypass
  description: |
    [`ghost`][1] is a blogging platform. Affected versions of the package
    are vulnerable to Authentication Bypass via Privilege Reduction. An
    attacker can change the privileges of other users, and update their
    email.



    [1]: https://www.npmjs.com/package/ghost
  affected_package: ghost
  vulnerable_versions:
  - "<0.5.9"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2015-1408
  cwe:
  - CWE-285
  disclosed_date: 2015-03-02
  created_date: 2017-05-30
  last_modified_date: 2017-05-30
  credit:
  - Matteo Beccaro
  references:
  - https://dev.ghost.org/ghost-0-5-9/
  - https://voidsec.com/ghost-blogging-platform/
  - https://voidsec.com/wp-content/uploads/2015/03/VoidSec-Ghost.pdf
  source_url: https://snyk.io/vuln/npm:ghost:20150303-3
- id: snykio:npm:ghost:CVE-2015-1409
  title: Authentication Bypass
  description: |
    [`ghost`][1] is a blogging platform. Affected versions of the package
    are vulnerable to Authentication Bypass. An authenticated user can spoof
    an `HTTP GET` request with any username to access any other users’
    drafts. This is due to the user parameter not being validated upon the
    request.



    [1]: https://www.npmjs.com/package/ghost
  affected_package: ghost
  vulnerable_versions:
  - "<0.5.9"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2015-1409
  cwe:
  - CWE-285
  disclosed_date: 2015-03-02
  created_date: 2017-05-30
  last_modified_date: 2017-05-30
  credit:
  - Matteo Beccaro
  references:
  - https://dev.ghost.org/ghost-0-5-9/
  - https://voidsec.com/ghost-blogging-platform/
  - https://voidsec.com/wp-content/uploads/2015/03/VoidSec-Ghost.pdf
  source_url: https://snyk.io/vuln/npm:ghost:20150303-4
- id: snykio:npm:ghost:CVE-2015-1410
  title: Identity Spoofing
  description: |
    [`ghost`][1] is a blogging platform. Affected versions of the package
    are vulnerable to Identity Spoofing, allowing an attacker to use the
    name of any author and publish an article in their name.



    [1]: https://www.npmjs.com/package/ghost
  affected_package: ghost
  vulnerable_versions:
  - "<0.5.9"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2015-1410
  cwe:
  - CWE-285
  disclosed_date: 2015-03-02
  created_date: 2017-05-30
  last_modified_date: 2017-05-30
  credit:
  - Matteo Beccaro
  references:
  - https://gist.github.com/ErisDS/6111e30e006ed34cf9f6
  - https://voidsec.com/ghost-blogging-platform/
  - https://voidsec.com/wp-content/uploads/2015/03/VoidSec-Ghost.pdf
  source_url: https://snyk.io/vuln/npm:ghost:20150303-1
- id: snykio:npm:ghost:CVE-2015-1411
  title: Information Disclosure
  description: |
    [`ghost`][1] is Just a blogging platform. Affected versions of the
    package are vulnerable to Bearer token leakage, due to storing it in the
    `localStorage` of the browser. If used alongside a Cross-site Scripting
    (XSS) attack, a malicious user may hijack the user session.



    [1]: https://www.npmjs.com/package/ghost
  affected_package: ghost
  vulnerable_versions:
  - "<0.5.9"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2015-1411
  cwe:
  - CWE-200
  disclosed_date: 2015-03-02
  created_date: 2017-05-30
  last_modified_date: 2017-05-30
  credit:
  - Matteo Beccaro
  references:
  - https://gist.github.com/ErisDS/6111e30e006ed34cf9f6
  - https://voidsec.com/ghost-blogging-platform/
  - https://voidsec.com/wp-content/uploads/2015/03/VoidSec-Ghost.pdf
  source_url: https://snyk.io/vuln/npm:ghost:20150303
