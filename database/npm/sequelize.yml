---
- id: ossindex:npm:sequelize:2016-07-22
  title: SQL Injection
  description: 'An SQL injection can be caused by inserting GeoJSON documents with
    single quotes in an attribute. '
  affected_package: sequelize
  vulnerable_versions:
  - "<3.23.6"
  package_manager: npm
  disclosed_date: 2016-07-22
  created_date: 2016-07-22
  last_modified_date: 2017-02-14
  credit:
  - OSSIndex
  references:
  - http://docs.sequelizejs.com/en/latest/api/datatypes/#geometry
  - http://geojson.org/
  - https://cwe.mitre.org/data/definitions/89.html
  - https://github.com/sequelize/sequelize/commit/1b4af001dac239d277e545461f1f4932ebf5e058
  - https://github.com/sequelize/sequelize/commit/88c04218f5cd031ae65d441b1ece7fc72f266a5b
  - https://github.com/sequelize/sequelize/commit/9a0e140f9e9ae7d411cb99266dd0ea4c8fa6b159
  - https://github.com/sequelize/sequelize/issues/6194
  - https://nodesecurity.io/advisories/122
  source_url: https://ossindex.net/resource/package/7014430328/vulnerabilities
- id: ossindex:npm:sequelize:2017-01-25
  title: "[Duplicate] SQL Injection"
  description: "See https://ossindex.net/resource/cve/367231\n\n> SQL Injection is
    possible in an application using the npm module sequelize if untrusted user input
    is passed into the order parameter.\n> \n> -- [nodesecurity.io](https://nodesecurity.io/advisories/33)"
  affected_package: sequelize
  vulnerable_versions:
  - "<=2.0.0-rc7"
  package_manager: npm
  disclosed_date: 2017-01-25
  created_date: 2017-01-25
  last_modified_date: 2017-02-14
  credit:
  - OSSIndex
  references:
  - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-1369
  - https://cwe.mitre.org/data/definitions/89.html
  - https://github.com/sequelize/sequelize/issues/2906
  - https://nodesecurity.io/advisories/33
  source_url: https://ossindex.net/resource/package/7014430328/vulnerabilities
- id: ossindex:npm:sequelize:2017-02-11
  title: SQL injection with PostgreSQL
  description: Prior to PostgreSQL 9.1, back slashes were not escaped by default which
    results in a possible SQL Exception when using sequalize with older versions.
  affected_package: sequelize
  vulnerable_versions:
  - "<2.1.0"
  package_manager: npm
  disclosed_date: 2017-02-11
  created_date: 2017-02-11
  last_modified_date: 2017-02-14
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/89.html
  - https://github.com/sequelize/sequelize/commit/76727a6dda7650730f49155c417dc78efecdf62e
  - https://github.com/sequelize/sequelize/issues/3545
  source_url: https://ossindex.net/resource/package/7014430328/vulnerabilities
- id: ossindex:npm:sequelize:2017-07-29
  title: SQL Injection
  description: "> If user input goes into the limit or order parameters, a malicious
    user can put in their own SQL statements.\n> \n> -- [nodesecurity.io](https://nodesecurity.io/advisories/112)"
  affected_package: sequelize
  vulnerable_versions:
  - "<=3.16.0"
  package_manager: npm
  disclosed_date: 2017-07-29
  created_date: 2017-07-29
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - https://github.com/sequelize/sequelize/pull/5167/commits/f282d85e60e3df5e57ecdb82adccb4eaef404f03
  - https://nodesecurity.io/advisories/112
  source_url: https://ossindex.net/resource/package/7014430328/vulnerabilities
- id: ossindex:npm:sequelize:CVE-2015-1369
  title: "[CVE-2015-1369]  Improper Neutralization of Special Elements used in an
    SQL Command (SQL Injection)"
  description: SQL injection vulnerability in Sequelize before 2.0.0-rc7 for Node.js
    allows remote attackers to execute arbitrary SQL commands via the order parameter.
  affected_package: sequelize
  vulnerable_versions:
  - "<=2.0.0-rc7"
  package_manager: npm
  cve:
  - CVE-2015-1369
  disclosed_date: 2015-01-27
  created_date: 2015-01-27
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://www.openwall.com/lists/oss-security/2015/01/23/2
  - https://github.com/sequelize/sequelize/pull/2919
  - https://nodesecurity.io/advisories/sequelize-sql-injection-order
  source_url: https://ossindex.net/resource/package/7014430328/vulnerabilities
- id: snykio:npm:sequelize:20151019
  title: SQL Injection
  description: |
    [`sequelize`][1] is a multi dialect ORM for Node.JS/io.js. Affected
    versions of the package are vulnerable to SQL Injection via the user
    search by typing the name they want to search for and the application
    then executes:

        User.findAll( { where: { name: req.body.name } } )

    a malicious attacker may exploit this to find the users password by
    entering `$password$`. This could be avoided by specifying the exact
    column to search: the user column.



    [1]: https://www.npmjs.com/package/sequelize
  affected_package: sequelize
  vulnerable_versions:
  - "<3.12.1"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-89
  disclosed_date: 2015-10-18
  created_date: 2017-02-13
  last_modified_date: 2017-02-13
  credit:
  - overlookmotel
  references:
  - https://github.com/sequelize/sequelize/issues/4680
  - https://github.com/sequelize/sequelize/commit/3f11bd97386f1cad4961d2cd054347508ef0aca5
  source_url: https://snyk.io/vuln/npm:sequelize:20151019
- id: snykio:npm:sequelize:20160106
  title: SQL Injection in order/limit
  description: |+
    `sequelize` versions prior to 3.17.0 are vulnerable to SQL Injection
    attacks if untrusted user input is passed into the `order` or `limit`
    parameters.

  affected_package: sequelize
  vulnerable_versions:
  - "<=3.16.0 >=0.2.2"
  severity: high
  package_manager: npm
  cwe:
  - CWE-89
  disclosed_date: 2015-01-06
  created_date: 2016-04-01
  last_modified_date: 2016-04-01
  credit:
  - Spencer Creasey
  references:
  - https://github.com/sequelize/sequelize/pull/5167
  - https://github.com/sequelize/sequelize/blob/master/changelog.md#3170
  - https://github.com/sequelize/sequelize/commit/d198d78182cbf1ea3ef1706740b35813a6aa0838
  source_url: https://snyk.io/vuln/npm:sequelize:20160106
- id: snykio:npm:sequelize:20160718
  title: SQL Injection via GeoJSON
  description: |
    `sequelize` versions prior to `3.23.6` are vulnerable to SQL injection
    via [GeoJSON][1] documents that contain a value with a single quote.
    GeoJSON is a format used for encoding a variety of geographic data
    structures in a standard JSON document. The vulnerability exists within
    GeoJSON documents using the function `ST_GeomFromGeoJSON` (for
    postgresql/postgis) and the function `GeomFromText` (for mysql).

    Note that `sequelize` users who do not use these specific functions are
    not affected. For users who do use these functions, this vulnerability
    has a high impact and is easily expoited, hence its high severity
    classification.



    [1]: http://geojson.org/
  affected_package: sequelize
  vulnerable_versions:
  - "<3.23.6 >=3.4.0"
  severity: high
  package_manager: npm
  cwe:
  - CWE-89
  disclosed_date: 2016-07-20
  created_date: 2016-07-18
  last_modified_date: 2016-07-18
  credit:
  - contra
  references:
  - https://github.com/sequelize/sequelize/issues/6194
  - http://geojson.org/
  - http://docs.sequelizejs.com/en/latest/api/datatypes/#geometry
  source_url: https://snyk.io/vuln/npm:sequelize:20160718
- id: snykio:npm:sequelize:CVE-2015-1369
  title: SQL Injection in Order
  description: |+
    `sequelize` versions prior to 2.0.0-rc7 are vulnerable to SQL Injection
    attacks if untrusted user input is passed into the `order` parameter.

  affected_package: sequelize
  vulnerable_versions:
  - "<=2.0.0-rc7"
  severity: high
  package_manager: npm
  cve:
  - CVE-2015-1369
  cwe:
  - CWE-89
  disclosed_date: 2015-01-18
  created_date: 2015-01-18
  last_modified_date: 2015-01-18
  credit:
  - Levan Basharuli
  references:
  - https://github.com/sequelize/sequelize/issues/2906
  source_url: https://snyk.io/vuln/npm:sequelize:20150118
- id: snykio:npm:sequelize:CVE-2016-10550
  title: Remote Memory Exposure
  description: "A potential memory disclosure vulnerability exists in sequelize versions\nprior
    to 3.17.2. A field of type `DataTypes.BLOB` can be used to expose\nsensitive information
    such as code, runtime memory and user data into\nthe database.\n\n### Details
    \  {#details}\n\n`sequelize` uses the `Buffer` type to represent `DataTypes.BLOB`.\nInitializing
    a `Buffer` with integer `N` creates a `Buffer` of length\n`N` with non zero-ed
    out memory. **Example:**\n\n    var x = new Buffer(100); // uninitialized Buffer
    of length 100\n    // vs\n    var x = new Buffer('100'); // initialized Buffer
    with value of '100'\n\nInitializing a `BLOB` field in such manner will dump uninitialized\nmemory
    into the database. The patch wraps `Buffer` field initialization\nin sequelize
    by converting a `number` value `N` to a string,\ninitializing the `Buffer` with
    `N` in its ascii form.\n\n#### Proof of concept   {#proof-of-concept}\n\n    var
    Sequelize = require('sequelize');\n    var sequelize = new Sequelize('pastebin',
    null, null,\n        { host: '127.0.0.1', dialect: 'postgres', });\n    \n    var
    Task = sequelize.define('Pastebin', {\n        title: Sequelize.STRING,\n        content:
    Sequelize.BLOB,\n      });\n    \n    Task.create({\n      title: 'title',\n      content:
    100,\n    }).then(function (task) {\n      console.log(task.title);\n      console.log(task.content);
    // will print out 100 bytes of previously used memory\n    });\n\n"
  affected_package: sequelize
  vulnerable_versions:
  - "<3.17.2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2016-10550
  cwe:
  - CWE-201
  disclosed_date: 2016-01-15
  created_date: 2016-04-01
  last_modified_date: 2016-04-01
  references:
  - https://github.com/sequelize/sequelize/blob/master/changelog.md#3172
  - https://github.com/sequelize/sequelize/commit/cbfaa4f0a135cfc55874c9bfc39ead2d85c417e9
  - https://github.com/ChALkeR/notes/blob/master/Lets-fix-Buffer-API.md#previous-materials
  - https://github.com/ChALkeR/notes/blob/master/Buffer-knows-everything.md
  source_url: https://snyk.io/vuln/npm:sequelize:20160115
- id: snykio:npm:sequelize:CVE-2016-10553
  title: SQL Injection
  description: |+
    Beginning with `sequelize` version 3.0.0, two security related changes
    were introduced:

    * `findOne` no longer takes a string / integer / binary argument to
      represent a primaryKey. Use `findById` instead.
    * `where: "raw query"` is no longer legal, you must now explicitly use
      `where: ["raw query", [replacements]]`

  affected_package: sequelize
  vulnerable_versions:
  - "<=2.1.3"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2016-10553
  cwe:
  - CWE-89
  disclosed_date: 2015-05-17
  created_date: 2016-04-01
  last_modified_date: 2016-04-01
  credit:
  - Unknown
  references:
  - https://github.com/sequelize/sequelize/blob/master/changelog.md#300
  source_url: https://snyk.io/vuln/npm:sequelize:20150517
- id: snykio:npm:sequelize:CVE-2016-10554
  title: SQL Injection
  description: |+
    `sequelize` versions prior to 1.7.0-alpha3 are vulnerable to SQL
    Injection attacks if untrusted user input is passed into the `order`
    parameter.

  affected_package: sequelize
  vulnerable_versions:
  - "<=1.7.0-alpha2 >=0.2.2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2016-10554
  cwe:
  - CWE-89
  disclosed_date: 2013-05-24
  created_date: 2016-04-01
  last_modified_date: 2016-04-01
  credit:
  - Unknown
  references:
  - https://github.com/sequelize/sequelize/commit/c876192aa6ce1f67e22b26a4d175b8478615f42d
  source_url: https://snyk.io/vuln/npm:sequelize:20130614
- id: snykio:npm:sequelize:CVE-2016-10556
  title: SQL Injection in IN statement
  description: |+
    `sequelize` versions prior to 3.20.0 improperly escape arrays of strings
    bound to named parameters.

  affected_package: sequelize
  vulnerable_versions:
  - "<=3.19.3"
  severity: high
  package_manager: npm
  cve:
  - CVE-2016-10556
  cwe:
  - CWE-89
  disclosed_date: 2016-03-29
  created_date: 2016-04-01
  last_modified_date: 2016-04-01
  references:
  - https://github.com/sequelize/sequelize/issues/5671
  - https://github.com/sequelize/sequelize/commit/23952a2b020cc3571f090e67dae7feb084e1be71
  source_url: https://snyk.io/vuln/npm:sequelize:20160329
