---
- id: npmjs:npm:i18next:325
  title: Cross-Site Scripting
  description: |-
    Affected versions of `i18next` allow untrusted user input to be injected into dictionary key names, resulting in a cross-site scripting vulnerability.

    ## Proof of Concept
    ```
    var init = i18n.init({debug: true}, function(){
      var test = i18n.t('__firstName__ __lastName__', {
            escapeInterpolation: true,
            firstName: '__lastNameHTML__',
            lastName: '<script>',
      });
      console.log(test);
    });
    // equals "<script> &lt;script&gt;"
    ```
  affected_package: i18next
  vulnerable_versions:
  - "<=1.10.2"
  severity: moderate
  package_manager: npm
  cve:
  - CVE-2017-16008
  cwe: CWE-725
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: KJ Tsanaktsidis
  references: https://npmjs.com/advisories/325
  source_url: https://npmjs.com/advisories/325
- id: npmjs:npm:i18next:326
  title: Cross-Site Scripting
  description: "Affected versions of `i18next` may fail to sanitize user input when
    certain configuration options are used. When using the `.init` method, passing
    interpolation options without passing an `escapeValue` will default to `undefined`
    rather than the assumed `true`. \n\n## Proof of Concept\n\n```\nvar init = i18n.init({\n
    \ interpolation: {\n    prefix: \"__\",\n    suffix: \"__\",\n    escapeValue:
    true\n  }\n}, function(){\n  var test = i18n.t('__firstName__ __lastName__', {\n
    \       firstName: 'Bob',\n        lastName: '[\"foo\",\"bar\"]',\n  });\n  console.log(test);\n});\n```\nWhen
    `escapeValue` is explicitly passed, the result of `test` is: \n\n```\n&lt;script&gt;alert(1)&lt;&#x2F;script&gt;
    Johnson\n```\n\nThis is supposed to be the default. However, if `escapeValue`
    is not included, the result is the unescaped string: \n \n```\n<script>alert(1)</script>
    Johnson\n```"
  affected_package: i18next
  vulnerable_versions:
  - ">=2.0.0 <=3.4.3"
  severity: moderate
  package_manager: npm
  cve:
  - CVE-2017-16010
  cwe: CWE-725
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: alexmchardy
  references: https://npmjs.com/advisories/326
  source_url: https://npmjs.com/advisories/326
- id: ossindex:npm:i18next:8400185064
  title: Cross Site Scripting (XSS)
  description: Cross Site Scripting is possible due to a bug in the `interpolation
    resolution code`.
  affected_package: i18next
  vulnerable_versions:
  - "<1.10.3"
  package_manager: npm
  disclosed_date: 2016-10-17
  created_date: 2016-10-17
  last_modified_date: 2017-03-15
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/i18next/i18next/issues/443
  - https://github.com/i18next/i18next/pull/443
  - https://github.com/i18next/i18next/pull/443/commits/34e8e13a2b64708a0aed01092e4dbfd0e5013831
  - https://nodesecurity.io/advisories/325
  source_url: https://ossindex.net/resource/package/7013884133/vulnerabilities
- id: ossindex:npm:i18next:8402281066
  title: Fix Interpolator.escapeValue defaulting to undefined in some cases
  description: "> [When passing] any `interpolation` options without including `escapeValue`,
    `this.escapeValue` will get set to `undefined` in `Interpolator`. The documentation
    indicates `escapeValue` defaults to `true`, so this could cause variables to not
    be escaped as expected in some cases.\n> \n> -- [github.com](https://github.com/i18next/i18next/pull/826)"
  affected_package: i18next
  vulnerable_versions:
  - "<3.4.4 >=2.0.0"
  package_manager: npm
  disclosed_date: 2016-12-29
  created_date: 2016-12-29
  last_modified_date: 2017-03-16
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/i18next/i18next/issues/826
  - https://github.com/i18next/i18next/pull/826/commits/d367309d4427c2d651b0f0b304504cf59c056cab
  - https://nodesecurity.io/advisories/326
  source_url: https://ossindex.net/resource/package/7013884133/vulnerabilities
- id: snykio:npm:i18next:20151018
  title: Cross-site Scripting (XSS)
  description: |+
    [`i18next`][1] is i18next internationalization framework. Affected
    versions of the package are vulnerable to Cross-site Scripting (XSS) due
    to the interpolation resolution code in `translate.js` loops over each
    key in the dictionary and applies replacements one at a time. Along with
    the unescaped suffix feature in `i18next`, may allow attackers to use
    the name of another key in the dictionary to leverage themselves to
    inject code into the browser.



    [1]: https://www.npmjs.com/package/i18next
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: i18next
  vulnerable_versions:
  - "<1.10.3"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-16008
  cwe:
  - CWE-79
  disclosed_date: 2015-10-17
  created_date: 2017-02-13
  last_modified_date: 2017-02-13
  credit:
  - KJ Tsanaktsidis
  references:
  - https://github.com/i18next/i18next/pull/443
  - https://github.com/i18next/i18next/pull/443/commits/34e8e13a2b64708a0aed01092e4dbfd0e5013831
  source_url: https://snyk.io/vuln/npm:i18next:20151018
- id: snykio:npm:i18next:20161013
  title: Cross-site Scripting (XSS)
  description: |+
    [`i18next`][1] is i18next internationalization framework. Affected
    versions of the package are vulnerable to Cross-site Scripting (XSS) due
    to not escaping variables as expected. When passing any `interpolation`
    options without including `escapeValue`, the function `this.escapeValue`
    will get set to `undefined` in `Interpolator`. Meaning values aren\'t
    being escaped even though users expect them to be.



    [1]: https://www.npmjs.com/package/i18next
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: i18next
  vulnerable_versions:
  - "<3.4.4 >=2.0.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-16010
  cwe:
  - CWE-79
  disclosed_date: 2016-10-12
  created_date: 2017-02-13
  last_modified_date: 2017-02-13
  credit:
  - alexmchardy
  references:
  - https://github.com/i18next/i18next/pull/826
  - https://github.com/i18next/i18next/pull/826/commits/d367309d4427c2d651b0f0b304504cf59c056cab
  source_url: https://snyk.io/vuln/npm:i18next:20161013
