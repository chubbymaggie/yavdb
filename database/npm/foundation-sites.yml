---
- id: snykio:npm:foundation-sites:2017-08-01
  title: Cross-site Scripting (XSS)
  description: |+
    [`foundation-sites`][1] is an advanced responsive front-end framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks due to an insufficient fix to
    [npm:foundation-sites:20150619][2]

    Thanks to [Nathaniel Paulus][3] for disclosing this vulnerability!

    Although `innerHTML` does not make script tags executable, [script tags
    are not the only way to run arbitrary code][4].

    This vulnerability was [introduced][5] in a deliberate attempt to allow
    HTML in captions. The file was subsequently deleted when version 6 was
    merged into the develop branch in
    1e08494bb2118c9786ffc33c28158311cd542bcb. Confirmation of its removal
    (as well as plans to re-add it) can be found in [issue 7759][6]



    [1]: https://www.npmjs.com/package/foundation-sites
    [2]: https://snyk.io/vuln/npm:foundation-sites:20150619
    [3]: https://github.com/Nateowami
    [4]: https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML#Security_considerations
    [5]: https://github.com/zurb/foundation-sites/commit/82ece95365e2f7b1f8773bee2e402695788656b2
    [6]: https://github.com/zurb/foundation-sites/issues/7759
    \n[`foundation-sites`][1] is an advanced responsive front-end framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks due to an insufficient fix to
    [npm:foundation-sites:20150619][2]

    Thanks to [Nathaniel Paulus][3] for disclosing this vulnerability!

    Although `innerHTML` does not make script tags executable, [script tags
    are not the only way to run arbitrary code][4].

    This vulnerability was [introduced][5] in a deliberate attempt to allow
    HTML in captions. The file was subsequently deleted when version 6 was
    merged into the develop branch in
    1e08494bb2118c9786ffc33c28158311cd542bcb. Confirmation of its removal
    (as well as plans to re-add it) can be found in [issue 7759][6]



    [1]: https://www.npmjs.com/package/foundation-sites
    [2]: https://snyk.io/vuln/npm:foundation-sites:20150619
    [3]: https://github.com/Nateowami
    [4]: https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML#Security_considerations
    [5]: https://github.com/zurb/foundation-sites/commit/82ece95365e2f7b1f8773bee2e402695788656b2
    [6]: https://github.com/zurb/foundation-sites/issues/7759
    \n[`foundation-sites`][1] is an advanced responsive front-end framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks due to an insufficient fix to
    [npm:foundation-sites:20150619][2]

    Thanks to [Nathaniel Paulus][3] for disclosing this vulnerability!

    Although `innerHTML` does not make script tags executable, [script tags
    are not the only way to run arbitrary code][4].

    This vulnerability was [introduced][5] in a deliberate attempt to allow
    HTML in captions. The file was subsequently deleted when version 6 was
    merged into the develop branch in
    1e08494bb2118c9786ffc33c28158311cd542bcb. Confirmation of its removal
    (as well as plans to re-add it) can be found in [issue 7759][6]



    [1]: https://www.npmjs.com/package/foundation-sites
    [2]: https://snyk.io/vuln/npm:foundation-sites:20150619
    [3]: https://github.com/Nateowami
    [4]: https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML#Security_considerations
    [5]: https://github.com/zurb/foundation-sites/commit/82ece95365e2f7b1f8773bee2e402695788656b2
    [6]: https://github.com/zurb/foundation-sites/issues/7759
    \n[`foundation-sites`][1] is an advanced responsive front-end framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks due to an insufficient fix to
    [npm:foundation-sites:20150619][2]

    Thanks to [Nathaniel Paulus][3] for disclosing this vulnerability!

    Although `innerHTML` does not make script tags executable, [script tags
    are not the only way to run arbitrary code][4].

    This vulnerability was [introduced][5] in a deliberate attempt to allow
    HTML in captions. The file was subsequently deleted when version 6 was
    merged into the develop branch in
    1e08494bb2118c9786ffc33c28158311cd542bcb. Confirmation of its removal
    (as well as plans to re-add it) can be found in [issue 7759][6]



    [1]: https://www.npmjs.com/package/foundation-sites
    [2]: https://snyk.io/vuln/npm:foundation-sites:20150619
    [3]: https://github.com/Nateowami
    [4]: https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML#Security_considerations
    [5]: https://github.com/zurb/foundation-sites/commit/82ece95365e2f7b1f8773bee2e402695788656b2
    [6]: https://github.com/zurb/foundation-sites/issues/7759
    \n[`foundation-sites`][1] is an advanced responsive front-end framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks due to an insufficient fix to
    [npm:foundation-sites:20150619][2]

    Thanks to [Nathaniel Paulus][3] for disclosing this vulnerability!

    Although `innerHTML` does not make script tags executable, [script tags
    are not the only way to run arbitrary code][4].

    This vulnerability was [introduced][5] in a deliberate attempt to allow
    HTML in captions. The file was subsequently deleted when version 6 was
    merged into the develop branch in
    1e08494bb2118c9786ffc33c28158311cd542bcb. Confirmation of its removal
    (as well as plans to re-add it) can be found in [issue 7759][6]



    [1]: https://www.npmjs.com/package/foundation-sites
    [2]: https://snyk.io/vuln/npm:foundation-sites:20150619
    [3]: https://github.com/Nateowami
    [4]: https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML#Security_considerations
    [5]: https://github.com/zurb/foundation-sites/commit/82ece95365e2f7b1f8773bee2e402695788656b2
    [6]: https://github.com/zurb/foundation-sites/issues/7759
    \n[`foundation-sites`][1] is an advanced responsive front-end framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks due to an insufficient fix to
    [npm:foundation-sites:20150619][2]

    Thanks to [Nathaniel Paulus][3] for disclosing this vulnerability!

    Although `innerHTML` does not make script tags executable, [script tags
    are not the only way to run arbitrary code][4].

    This vulnerability was [introduced][5] in a deliberate attempt to allow
    HTML in captions. The file was subsequently deleted when version 6 was
    merged into the develop branch in
    1e08494bb2118c9786ffc33c28158311cd542bcb. Confirmation of its removal
    (as well as plans to re-add it) can be found in [issue 7759][6]



    [1]: https://www.npmjs.com/package/foundation-sites
    [2]: https://snyk.io/vuln/npm:foundation-sites:20150619
    [3]: https://github.com/Nateowami
    [4]: https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML#Security_considerations
    [5]: https://github.com/zurb/foundation-sites/commit/82ece95365e2f7b1f8773bee2e402695788656b2
    [6]: https://github.com/zurb/foundation-sites/issues/7759
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: foundation-sites
  vulnerable_versions:
  - "<6.0.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  credit:
  - Nathaniel Paulus
  source_url: https://snyk.io/vuln/npm:foundation-sites:20170802
- id: snykio:npm:foundation-sites:2015-06-18
  title: Cross-site Scripting (XSS)
  description: |+
    [`foundation-sites`][1] is an advanced responsive front-end framework.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS) due to using `innerHTML` without sanitizing user input.



    [1]: https://www.npmjs.com/package/foundation-sites
    \n[`foundation-sites`][1] is an advanced responsive front-end framework.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS) due to using `innerHTML` without sanitizing user input.



    [1]: https://www.npmjs.com/package/foundation-sites
    \n[`foundation-sites`][1] is an advanced responsive front-end framework.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS) due to using `innerHTML` without sanitizing user input.



    [1]: https://www.npmjs.com/package/foundation-sites
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: foundation-sites
  vulnerable_versions:
  - "<5.5.3"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  credit:
  - Maya Kokits
  references:
  - https://github.com/zurb/foundation-sites/pull/6640
  - https://github.com/zurb/foundation-sites/issues/6639
  - https://github.com/zurb/foundation-sites/commit/bf57af9429fbe5e4b18e32e951504136df996e10
  source_url: https://snyk.io/vuln/npm:foundation-sites:20150619
- id: snykio:npm:foundation-sites:2012-07-16
  title: Cross-site Scripting (XSS)
  description: |+
    [`foundation-sites`][1] is an advanced responsive front-end framework.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://www.npmjs.com/package/foundation-sites
    \n[`foundation-sites`][1] is an advanced responsive front-end framework.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://www.npmjs.com/package/foundation-sites
    \n[`foundation-sites`][1] is an advanced responsive front-end framework.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://www.npmjs.com/package/foundation-sites
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: foundation-sites
  vulnerable_versions:
  - "<3.0.6 >=3.0.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  credit:
  - Mathieu Amiot
  references:
  - https://github.com/zurb/foundation-sites/pull/659
  - https://github.com/zurb/foundation-sites/commit/f3b408c955011cf19c69be3e5a3c582ced5fd24c
  source_url: https://snyk.io/vuln/npm:foundation-sites:20120717
