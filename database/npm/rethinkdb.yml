---
- id: ossindex:npm:rethinkdb:2017-03-31
  title: Denial of Service (DoS)
  description: Running nmap against the rethinkdb socket running on OSX crashes the
    process.
  affected_package: rethinkdb
  vulnerable_versions:
  - "<2.3.6"
  package_manager: npm
  credit:
  - OSSIndex
  references:
  - https://github.com/rethinkdb/rethinkdb/commit/3558c75d391409c51c43c85e7f4a0b25c1d8301a
  - https://github.com/rethinkdb/rethinkdb/commit/494477929675dd1b5546f8a2791ecd4d8b0b6a9b
  - https://github.com/rethinkdb/rethinkdb/issues/6084
  source_url: https://ossindex.net/resource/package/7014388625/vulnerabilities
- id: ossindex:npm:rethinkdb:2017-03-31
  title: Cross Site Scripting (XSS) in Web-based admin UI
  description: An error message in the admin UI was unescaped, allowing for Cross
    Site Scripting attacks.
  affected_package: rethinkdb
  vulnerable_versions:
  - "<1.12.0"
  package_manager: npm
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/rethinkdb/rethinkdb/commit/64279f5890620bd5470160e7d1603a4821041c2c
  - https://github.com/rethinkdb/rethinkdb/issues/2018
  source_url: https://ossindex.net/resource/package/7014388625/vulnerabilities
- id: snykio:npm:rethinkdb:2015-05-13
  title: Cross-site Scripting (XSS)
  description: |+
    [`rethinkdb`][1] provides the JavaScript driver library for the
    RethinkDB database server for use in your node application.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS) due to using a non-cryptographic hash map to store connection IDs,
    making it possible to easily guess the connection ID. Attackers can use
    this ID to run queries on the connection setup.



    [1]: https://www.npmjs.com/package/rethinkdb
    \n[`rethinkdb`][1] provides the JavaScript driver library for the
    RethinkDB database server for use in your node application.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS) due to using a non-cryptographic hash map to store connection IDs,
    making it possible to easily guess the connection ID. Attackers can use
    this ID to run queries on the connection setup.



    [1]: https://www.npmjs.com/package/rethinkdb
    \n[`rethinkdb`][1] provides the JavaScript driver library for the
    RethinkDB database server for use in your node application.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS) due to using a non-cryptographic hash map to store connection IDs,
    making it possible to easily guess the connection ID. Attackers can use
    this ID to run queries on the connection setup.



    [1]: https://www.npmjs.com/package/rethinkdb
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: rethinkdb
  vulnerable_versions:
  - "<2.1.0 >=1.2.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  credit:
  - Daniel Mewes
  references:
  - https://github.com/rethinkdb/rethinkdb/commit/439f0fa2224adc53a094c857f391c618a2526aa7
  source_url: https://snyk.io/vuln/npm:rethinkdb:20150514
- id: snykio:npm:rethinkdb:2015-05-13
  title: Information Disclosure
  description: |
    [`rethinkdb`][1] provides the JavaScript driver library for the
    RethinkDB database server for use in your node application. Affected
    versions of the package use a non-cryptographic hash map to store
    connection IDs, making the connection ID easy to guess.



    [1]: https://www.npmjs.com/package/rethinkdb
    \n[`rethinkdb`][1] provides the JavaScript driver library for the
    RethinkDB database server for use in your node application. Affected
    versions of the package use a non-cryptographic hash map to store
    connection IDs, making the connection ID easy to guess.



    [1]: https://www.npmjs.com/package/rethinkdb
  affected_package: rethinkdb
  vulnerable_versions:
  - "<2.1.0 >=1.2.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-200
  credit:
  - Daniel Mewes
  references:
  - https://github.com/rethinkdb/rethinkdb/commit/439f0fa2224adc53a094c857f391c618a2526aa7
  source_url: https://snyk.io/vuln/npm:rethinkdb:20150514-1
