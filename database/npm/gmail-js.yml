---
- id: nodesecurity:npm:gmail-js:2016-07-21
  title: DOM-based XSS
  description: 'Affected versions of `gmail-js` are vulnerable to cross-site scripting
    in the `tools.parse_response`, `helper.get.visible_emails_post`, and `helper.get.email_data_post`
    functions, which pass user input directly into the Function constructor.

'
  affected_package: gmail-js
  vulnerable_versions:
  - "<=0.6.4"
  patched_versions:
  - ">=0.6.5"
  severity: high
  package_manager: npm
  cve:
  - CVE-2016-1000228
  cvss_v3_vector: CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N
  credit:
  - Gursev Singh Kalra
  references:
  - |-
    https://github.com/KartikTalwar/gmail.js/issues/281)
    https://github.com/KartikTalwar/gmail.js/commit/a83436f499f9c01b04280af945a5a81137b6baf1)
  source_url: https://nodesecurity.io/advisories/125
- id: snykio:npm:gmail-js:2016-07-21
  title: DOM-based XSS
  description: |+
    `gmail-js` is a client side library for interacting with the Gmail API.

    As part of its execution, the library dynamically creates functions out
    of response data, loaded into a `new Function(data)` call, and executes
    the function. The response data read is not encoded and may include user
    content (e.g. from the emails themselves), thus exposing a DOM-Based
    Cross-Site Scripting (DOMXSS) vulnerability.

    At least three functions perform this vulnerable flow:
    `tools.parse_response`, `helper.get.visible_emails_post`, and
    `helper.get.email_data_post`.

    \n`gmail-js` is a client side library for interacting with the Gmail API.

    As part of its execution, the library dynamically creates functions out
    of response data, loaded into a `new Function(data)` call, and executes
    the function. The response data read is not encoded and may include user
    content (e.g. from the emails themselves), thus exposing a DOM-Based
    Cross-Site Scripting (DOMXSS) vulnerability.

    At least three functions perform this vulnerable flow:
    `tools.parse_response`, `helper.get.visible_emails_post`, and
    `helper.get.email_data_post`.

    \n`gmail-js` is a client side library for interacting with the Gmail API.

    As part of its execution, the library dynamically creates functions out
    of response data, loaded into a `new Function(data)` call, and executes
    the function. The response data read is not encoded and may include user
    content (e.g. from the emails themselves), thus exposing a DOM-Based
    Cross-Site Scripting (DOMXSS) vulnerability.

    At least three functions perform this vulnerable flow:
    `tools.parse_response`, `helper.get.visible_emails_post`, and
    `helper.get.email_data_post`.

    \n`gmail-js` is a client side library for interacting with the Gmail API.

    As part of its execution, the library dynamically creates functions out
    of response data, loaded into a `new Function(data)` call, and executes
    the function. The response data read is not encoded and may include user
    content (e.g. from the emails themselves), thus exposing a DOM-Based
    Cross-Site Scripting (DOMXSS) vulnerability.

    At least three functions perform this vulnerable flow:
    `tools.parse_response`, `helper.get.visible_emails_post`, and
    `helper.get.email_data_post`.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: gmail-js
  vulnerable_versions:
  - "<0.6.5"
  severity: high
  package_manager: npm
  cve:
  - CVE-2016-1000228
  cwe:
  - CWE-79
  credit:
  - Gursev Singh Kalra
  references:
  - https://github.com/KartikTalwar/gmail.js/issues/281
  - https://github.com/KartikTalwar/gmail.js/commit/82f1876bdc379531043d3f46ee19b338e8ec907d
  - https://www.owasp.org/index.php/DOM_Based_XSS
  source_url: https://snyk.io/vuln/npm:gmail-js:20160721
