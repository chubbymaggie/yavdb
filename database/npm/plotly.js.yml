---
- id: ossindex:npm:plotly.js:2016-12-29
  title: Cross Site Scripting (XSS) in href tags
  description: The package is vulnerable to a cross site scripting attack where `javascript:`
    protocols can be set in href tags.
  affected_package: plotly.js
  vulnerable_versions:
  - ">=1.0.0 <1.2.1"
  package_manager: npm
  disclosed_date: 2016-12-29
  created_date: 2016-12-29
  last_modified_date: 2017-03-01
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/plotly/plotly.js/commit/d5885957f72e21a25782dc28e2028ffe8debf5ef
  - https://github.com/plotly/plotly.js/issues/100
  source_url: https://ossindex.net/resource/package/8398732976/vulnerabilities
- id: ossindex:npm:plotly.js:2017-02-12
  title: Cross Site Scripting (XSS) in trace name on hover
  description: JavaScript can be injected into the name of traces in the legend, allowing
    it to execute when the user hovers over the trace.
  affected_package: plotly.js
  vulnerable_versions:
  - "<1.22.0"
  package_manager: npm
  disclosed_date: 2017-02-12
  created_date: 2017-02-12
  last_modified_date: 2017-03-01
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/plotly/plotly.js/commit/9b7c18f5f576f103b65889574d25ad9924d4d7c1
  - https://github.com/plotly/plotly.js/issues/1307
  source_url: https://ossindex.net/resource/package/8398732976/vulnerabilities
- id: ossindex:npm:plotly.js:2017-07-29
  title: Cross Site Scripting (XSS)
  description: "> If an attacker can trick an unsuspecting user into viewing a specially
    crafted plot on a site that uses plotly.js, then the attacker could potentially
    retrieve authentication tokens and perform actions on behalf of the user.\n> \n>
    -- [nodesecurity.io](https://nodesecurity.io/advisories/145)"
  affected_package: plotly.js
  vulnerable_versions:
  - "<1.10.4 | >=1.11.0 <1.16.0"
  package_manager: npm
  disclosed_date: 2017-07-29
  created_date: 2017-07-29
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://help.plot.ly/security-advisories/2016-08-08-plotlyjs-xss-advisory/
  - https://nodesecurity.io/advisories/145
  source_url: https://ossindex.net/resource/package/8398732976/vulnerabilities
- id: snykio:npm:plotly.js:1
  title: CSS Injection
  description: |
    [`plotly.js`][1] is a high-level, declarative charting library.

    Affected versions of the package allowed the style attribute to be
    manipulated in the tag inside the embedded `svg` making them vulnerable
    to a css injection which allowed for tracking images to be embedded and
    leak information to an external domain.



    [1]: https://www.npmjs.com/package/plotly.js
    \nFor more information, see Jared\'s [post][1] explaining the issue very
    well.



    [1]: https://acloudtree.com/2016-08-09-how-i-hacked-plotly-by-exploiting-a-svg-vulnerability-in-plotlyjs/
  affected_package: plotly.js
  vulnerable_versions:
  - "<1.16.0"
  severity: low
  package_manager: npm
  cwe:
  - CWE-74
  disclosed_date: 2016-08-09
  created_date: 2016-10-17
  last_modified_date: 2016-10-17
  credit:
  - Jared Folkins
  references:
  - https://snyk.io/vuln/npm:plotly.js:20160808
  - https://acloudtree.com/2016-08-09-how-i-hacked-plotly-by-exploiting-a-svg-vulnerability-in-plotlyjs/
  - http://help.plot.ly/security-advisories/2016-08-08-plotlyjs-xss-advisory/
  - https://github.com/plotly/plotly.js/pull/736
  - https://github.com/plotly/plotly.js/commit/d5885957f72e21a25782dc28e2028ffe8debf5ef
  source_url: https://snyk.io/vuln/npm:plotly.js:20160808-1
- id: snykio:npm:plotly.js:20151210
  title: Cross-site Scripting (XSS)
  description: |
    [`plotly.js`][1] is a open source javascript graphing library that
    powers plotly.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://www.npmjs.com/package/plotly.js
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/marked-xss-vulnerability/
  affected_package: plotly.js
  vulnerable_versions:
  - "<1.2.1 >=1.0.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2015-12-09
  created_date: 2017-02-28
  last_modified_date: 2017-02-28
  credit:
  - Étienne TétreaultPinard
  references:
  - https://github.com/plotly/plotly.js/pull/100
  - https://github.com/plotly/plotly.js/commit/d5885957f72e21a25782dc28e2028ffe8debf5ef
  source_url: https://snyk.io/vuln/npm:plotly.js:20151210
- id: snykio:npm:plotly.js:20160808
  title: Cross-site Scripting (XSS)
  description: |+
    [`plotly.js`][1] is a high-level, declarative charting library.

    Affected versions of the package allow attackers to trick an
    unsuspecting user into viewing a specially crafted plot on a site that
    uses `plotly.js`. The vulnerability would have allowed the attacker to
    retrieve authentication tokens and perform actions on behalf of the
    user.

    `plot.ly` is rendering SVG objects inside the DOM. `href` tags are
    converted to the xlink:href attriubute on the `<a>` tag. This allowed an
    attacker to break out into the DOM and inject a payload.

    For more information, see Jared\'s [post][2] explaining the issue very
    well.



    [1]: https://www.npmjs.com/package/plotly.js
    [2]: https://acloudtree.com/2016-08-09-how-i-hacked-plotly-by-exploiting-a-svg-vulnerability-in-plotlyjs/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: plotly.js
  vulnerable_versions:
  - ">=1.10.4 <1.16.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2016-08-09
  created_date: 2016-10-17
  last_modified_date: 2016-10-17
  credit:
  - Jared Folkins
  references:
  - https://acloudtree.com/2016-08-09-how-i-hacked-plotly-by-exploiting-a-svg-vulnerability-in-plotlyjs/
  - http://help.plot.ly/security-advisories/2016-08-08-plotlyjs-xss-advisory/
  - https://github.com/plotly/plotly.js/pull/736
  - https://github.com/plotly/plotly.js/commit/d5885957f72e21a25782dc28e2028ffe8debf5ef
  source_url: https://snyk.io/vuln/npm:plotly.js:20160808
