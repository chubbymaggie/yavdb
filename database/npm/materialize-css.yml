---
- id: snykio:npm:materialize-css:174144
  title: Cross-site Scripting (XSS)
  description: |+
    [materialize-css][1] is a CSS Framework based on Material Design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) due to unescaped text being inserted into the Document Object
    Model (DOM).

    A vulnerability can arise when user input is provided to the
    `autocomplete` component. Typically \"safe\" data is used as part of
    this feature such as application links and urls. However there are cases
    where it may be reasonable to use user generated content. As such, this
    could allow a malicious user to pass a specially crafted JavaScript
    payload and render them within the element.



    [1]: https://materializecss.com/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: materialize-css
  vulnerable_versions:
  - "*"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2019-11003
  cwe:
  - CWE-79
  disclosed_date: 2019-04-08
  created_date: 2019-04-08
  last_modified_date: 2019-04-08
  credit:
  - lucianot54
  references:
  - https://github.com/Dogfalo/materialize/issues/6286
  source_url: https://snyk.io/vuln/SNYK-JS-MATERIALIZECSS-174144
- id: snykio:npm:materialize-css:174148
  title: Cross-site Scripting (XSS)
  description: |+
    [materialize-css][1] is a CSS Framework based on Material Design.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) due to unescaped text being inserted into the Document Object
    Model (DOM).

    A vulnerability can arise when user input is provided to the `tooltip`
    component. Typically \"safe\" data is used as part of this feature such
    as application data generated server-side. However there are cases where
    it may be reasonable to use user generated content. As such, this could
    allow a malicious user to pass a specially crafted JavaScript payload
    and render them within the element.



    [1]: https://materializecss.com/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: materialize-css
  vulnerable_versions:
  - "*"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2019-11002
  cwe:
  - CWE-79
  disclosed_date: 2019-04-08
  created_date: 2019-04-09
  last_modified_date: 2019-04-09
  credit:
  - lucianot54
  references:
  - https://github.com/Dogfalo/materialize/issues/6286
  source_url: https://snyk.io/vuln/SNYK-JS-MATERIALIZECSS-174148
