---
- id: nodesecurity:npm:keystone:2015-12-04
  title: Authentication Weakness
  description: Versions of `keystone` prior to 0.3.16 are affected by a partial authentication
    bypass vulnerability. In the default sign in functionality, if an attacker provides
    a full and correct password, yet only provides part of the associated email address,
    authentication will be granted.
  affected_package: keystone
  vulnerable_versions:
  - "<0.3.16"
  patched_versions:
  - ">=0.3.16"
  severity: medium
  package_manager: npm
  cvss_v3_vector: CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N
  credit:
  - Greg Meyer
  references:
  - ''
  source_url: https://nodesecurity.io/advisories/60
- id: ossindex:npm:keystone:2016-05-24
  title: Possible click jacking attack
  description: A click-jacking attack was successfully demonstrated on the Keystone
    demo site.
  affected_package: keystone
  vulnerable_versions:
  - "<0.3.6"
  package_manager: npm
  credit:
  - OSSIndex
  references:
  - https://github.com/keystonejs/keystone/issues/1086
  source_url: https://ossindex.net/resource/package/7014036893/vulnerabilities
- id: ossindex:npm:keystone:2016-05-24
  title: Timing attack vulnerabilities
  description: |-
    Two timing attack vulnerabilities could occur when:

    1. comparing password hashes
    2. comparing CSRF token hashes
  affected_package: keystone
  vulnerable_versions:
  - "<0.3.6"
  package_manager: npm
  credit:
  - OSSIndex
  references:
  - https://github.com/keystonejs/keystone/pull/701
  source_url: https://ossindex.net/resource/package/7014036893/vulnerabilities
- id: ossindex:npm:keystone:2016-05-24
  title: Azure dependency has security vulnerability
  description: 'Currently included version of azure includes validator<3.22.1, which
    has security issue: https://portal.requiresafe.com/advisories/validator-isurl-denial-of-service'
  affected_package: keystone
  vulnerable_versions:
  - "<0.3.15"
  package_manager: npm
  credit:
  - OSSIndex
  references:
  - https://github.com/keystonejs/keystone/issues/1575
  source_url: https://ossindex.net/resource/package/7014036893/vulnerabilities
- id: ossindex:npm:keystone:2016-11-10
  title: Open Redirect vulnerability
  description: "> The req.querystring.from parameter is not validated.  It will redirect
    the user to any url. It is vulnerable to an open redirect.\n> \n> -- [github.com](https://github.com/keystonejs/keystone/pull/242)"
  affected_package: keystone
  vulnerable_versions:
  - ">=0.2.7 <0.3.6"
  package_manager: npm
  credit:
  - OSSIndex
  references:
  - https://github.com/keystonejs/keystone/commit/d06a688e36bfb95c88336659fee9be10416ce46b
  - https://github.com/keystonejs/keystone/issues/242
  - https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards
  source_url: https://ossindex.net/resource/package/7014036893/vulnerabilities
- id: snykio:npm:keystone:2014-03-15
  title: Open Redirect
  description: |
    [`keystone`][1] is a Web Application Framework and Admin GUI / Content
    Management System built on Express.js and Mongoose. Affected versions of
    the package are vulnerable to Open redirection which occurs when a
    vulnerable web page is redirected to an untrusted and malicious page
    that may compromise the user. Open redirection attacks usually come with
    a phishing attack because the modified vulnerable link is identical to
    the original site, which increases the likelihood of success for the
    phishing attack.



    [1]: https://www.npmjs.com/package/keystone
    \n[`keystone`][1] is a Web Application Framework and Admin GUI / Content
    Management System built on Express.js and Mongoose. Affected versions of
    the package are vulnerable to Open redirection which occurs when a
    vulnerable web page is redirected to an untrusted and malicious page
    that may compromise the user. Open redirection attacks usually come with
    a phishing attack because the modified vulnerable link is identical to
    the original site, which increases the likelihood of success for the
    phishing attack.



    [1]: https://www.npmjs.com/package/keystone
  affected_package: keystone
  vulnerable_versions:
  - "<0.3.6 >=0.2.7"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-601
  credit:
  - Oliver Jenkins
  references:
  - https://github.com/keystonejs/keystone/pull/242
  - https://github.com/keystonejs/keystone/commit/d06a688e36bfb95c88336659fee9be10416ce46b
  source_url: https://snyk.io/vuln/npm:keystone:20140316
- id: snykio:npm:keystone:2014-11-28
  title: Cross-site Request Forgery (CSRF)
  description: |
    [`keystone`][1] is a web Application Framework and Admin GUI / Content
    Management System built on Express.js and Mongoose.

    Affected versions of the package are vulnerable to Cross-site Request
    Forgery (CSRF).



    [1]: https://www.npmjs.com/package/keystone
    \n[`keystone`][1] is a web Application Framework and Admin GUI / Content
    Management System built on Express.js and Mongoose.

    Affected versions of the package are vulnerable to Cross-site Request
    Forgery (CSRF).



    [1]: https://www.npmjs.com/package/keystone
    \n[`keystone`][1] is a web Application Framework and Admin GUI / Content
    Management System built on Express.js and Mongoose.

    Affected versions of the package are vulnerable to Cross-site Request
    Forgery (CSRF).



    [1]: https://www.npmjs.com/package/keystone
  affected_package: keystone
  vulnerable_versions:
  - "<0.2.34"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-352
  credit:
  - Mickael van der Beek
  references:
  - https://github.com/keystonejs/keystone/blob/master/HISTORY.md#v0234--2014-11-29
  source_url: https://snyk.io/vuln/npm:keystone:20141129
- id: snykio:npm:keystone:2015-12-04
  title: Authentication Weakness
  description: |+
    Invalid email addresses can be mistakenly matched during sign-in. This
    affects the `User` record to be fetched from the DB. Correct password
    for that `User` is still required to authenticate.

    \nInvalid email addresses can be mistakenly matched during sign-in. This
    affects the `User` record to be fetched from the DB. Correct password
    for that `User` is still required to authenticate.

  affected_package: keystone
  vulnerable_versions:
  - "<0.3.16"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2015-9240
  cwe:
  - CWE-287
  credit:
  - Greg Meyer
  references:
  - https://www.npmjs.com/package/keystone
  - https://github.com/keystonejs/keystone/issues/1085
  source_url: https://snyk.io/vuln/npm:keystone:20151204
- id: snykio:npm:keystone:2017-09-18
  title: Cross-site Scripting (XSS)
  description: |+
    [`keystone`][1] is an web Application Framework and Admin GUI / Content
    Management System built on Express.js and Mongoose.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. Cross-Site Scripting vulnerability in KeystoneJS before
    4.0.0-beta.7 allows remote authenticated administrators to inject
    arbitrary web script or HTML via the \"content brief\" or \"content
    extended\" field, a different vulnerability than [CVE-2017-15878][2].



    [1]: https://www.npmjs.com/package/keystone
    [2]: https://snyk.io/vuln/npm:keystone:20171023
    \n[`keystone`][1] is an web Application Framework and Admin GUI / Content
    Management System built on Express.js and Mongoose.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. Cross-Site Scripting vulnerability in KeystoneJS before
    4.0.0-beta.7 allows remote authenticated administrators to inject
    arbitrary web script or HTML via the \"content brief\" or \"content
    extended\" field, a different vulnerability than [CVE-2017-15878][2].



    [1]: https://www.npmjs.com/package/keystone
    [2]: https://snyk.io/vuln/npm:keystone:20171023
    \n[`keystone`][1] is an web Application Framework and Admin GUI / Content
    Management System built on Express.js and Mongoose.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks. Cross-Site Scripting vulnerability in KeystoneJS before
    4.0.0-beta.7 allows remote authenticated administrators to inject
    arbitrary web script or HTML via the \"content brief\" or \"content
    extended\" field, a different vulnerability than [CVE-2017-15878][2].



    [1]: https://www.npmjs.com/package/keystone
    [2]: https://snyk.io/vuln/npm:keystone:20171023
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: keystone
  vulnerable_versions:
  - "<4.0.0-beta.7"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-15881
  cwe:
  - CWE-79
  credit:
  - Sandeep Kamble
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2017-15881
  - https://github.com/keystonejs/keystone/pull/4478
  - https://github.com/keystonejs/keystone/issues/4437
  - https://github.com/keystonejs/keystone/commit/f08baa4fb4084b7ec9f356d313dcfd6d7d7d0f8b
  source_url: https://snyk.io/vuln/npm:keystone:20170918
- id: snykio:npm:keystone:2017-09-18
  title: CSV Injection
  description: |
    [`keystone`][1] is an web Application Framework and Admin GUI / Content
    Management System built on Express.js and Mongoose.

    Affected versions of the package are vulnerable to CSV Injection.



    [1]: https://www.npmjs.com/package/keystone
    \n[`keystone`][1] is an web Application Framework and Admin GUI / Content
    Management System built on Express.js and Mongoose.

    Affected versions of the package are vulnerable to CSV Injection.



    [1]: https://www.npmjs.com/package/keystone
    \n[`keystone`][1] is an web Application Framework and Admin GUI / Content
    Management System built on Express.js and Mongoose.

    Affected versions of the package are vulnerable to CSV Injection.



    [1]: https://www.npmjs.com/package/keystone
  affected_package: keystone
  vulnerable_versions:
  - "<4.0.0-beta.7"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-15879
  cwe:
  - CWE-74
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2017-15878
  - https://github.com/keystonejs/keystone/pull/4478
  - https://github.com/keystonejs/keystone/issues/4437
  - https://github.com/keystonejs/keystone/commit/f08baa4fb4084b7ec9f356d313dcfd6d7d7d0f8b
  source_url: https://snyk.io/vuln/npm:keystone:20170918-2
- id: snykio:npm:keystone:2017-09-18
  title: Cross-site Scripting (XSS)
  description: |+
    [`keystone`][1] is Web Application Framework and Admin GUI / Content
    Management System built on Express.js and Mongoose.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS). A cross-site scripting (XSS) vulnerability exists in
    fields/types/markdown/MarkdownType.js in KeystoneJS before 4.0.0-beta.7
    via the Contact Us feature.



    [1]: https://www.npmjs.com/package/keystone
    \n[`keystone`][1] is Web Application Framework and Admin GUI / Content
    Management System built on Express.js and Mongoose.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS). A cross-site scripting (XSS) vulnerability exists in
    fields/types/markdown/MarkdownType.js in KeystoneJS before 4.0.0-beta.7
    via the Contact Us feature.



    [1]: https://www.npmjs.com/package/keystone
    \n[`keystone`][1] is Web Application Framework and Admin GUI / Content
    Management System built on Express.js and Mongoose.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS). A cross-site scripting (XSS) vulnerability exists in
    fields/types/markdown/MarkdownType.js in KeystoneJS before 4.0.0-beta.7
    via the Contact Us feature.



    [1]: https://www.npmjs.com/package/keystone
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: keystone
  vulnerable_versions:
  - "<4.0.0-beta.7"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-15878
  cwe:
  - CWE-79
  credit:
  - Sandeep Kamble
  references:
  - https://github.com/keystonejs/keystone/pull/4478
  - https://github.com/keystonejs/keystone/issues/4437
  - https://github.com/keystonejs/keystone/commit/1b791d55839ebf434e104cc9936ccb8c29019231
  source_url: https://snyk.io/vuln/npm:keystone:20170918-1
