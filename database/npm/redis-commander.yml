---
- id: npmjs:npm:redis-commander:562
  title: Reflected Cross-Site Scripting
  description: |-
    Affected versions of `redis-commander` contain a cross-site scripting vulnerability in the `highlighterId` paramter of the clipboard.swf component on hosts serving Redis Commander.

    Mitigating factors:
    Flash must be installed / enabled for this to work. The below proof of concept was verified to work using Firefox 57.0 on Windows 10 by manually installing the [Flash NPAPI Windows plugin](https://get.adobe.com/flashplayer/otherversions/)

    ## Proof of concept

    ```
    http://instance/jstree/_docs/syntax/clipboard.swf?highlighterId=\%22))}%20catch(e)%20{alert(document.domain);}//
    ```
  affected_package: redis-commander
  vulnerable_versions:
  - "<=99.999.99999"
  severity: low
  package_manager: npm
  cwe: CWE-79
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Yasin Soliman (ysx)
  references: https://npmjs.com/advisories/562
  source_url: https://npmjs.com/advisories/562
- id: snykio:npm:redis-commander:20180109
  title: Cross-site Scripting (XSS)
  description: |+
    [`redis-commander`][1] is a Redis management tool written in node.js

    Affected versions of this package are vulnerable to Reflected Cross-Site
    Scripting (XSS) via the `clipboard.swf` component.

    An attacker may input a crafted XXX in the `highlighterId` parameter of
    the clipboard.swf component, causing a Reflected XSS on hosts serving
    Redis Commander.



    [1]: https://www.npmjs.com/package/redis-commander
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: redis-commander
  vulnerable_versions:
  - "<0.5.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  disclosed_date: 2018-01-08
  created_date: 2018-01-25
  last_modified_date: 2018-01-25
  credit:
  - Yasin Soliman
  references:
  - https://github.com/joeferner/redis-commander/commit/1a483ebb3a706cf199dd283cf0aead96606adb14
  - https://github.com/joeferner/redis-commander/commit/1a483ebb3a706cf199dd283cf0aead96606adb14
  - https://github.com/joeferner/redis-commander/issues/227
  - https://hackerone.com/reports/296377
  source_url: https://snyk.io/vuln/npm:redis-commander:20180109
