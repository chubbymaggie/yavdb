---
- id: snykio:npm:vue:2018-08-02
  title: Cross-site Scripting (XSS)
  description: |
    [vue][1] is an MIT-licensed open source project.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks.

    This attack is possible only only if the following two conditions are
    true:

    * The application is being rendered to HTML using `ReactDOMServer` API,
      and
    * The app includes a user-supplied attribute name in an HTML tag.

    Server-rendered React apps, which contain the following pattern may by
    affected:

        let props = {};
        props[userProvidedData] = "hello";
        let element = <div {...props} />;
        let html = ReactDOMServer.renderToString(element);

    Given the attacker could influence the `userProvidedData`, they could
    craft an attribute name that would triggler an XSS vulnerability, like:

        ></div><script>alert("hi")</script>`

    Allowing the attacker to inject arbitrary markup:

        <div ></div><script>alert("hi")</script>

    **Note:** This vulnerability affects only some server-rendered React
    apps, which contain a the pattern. Purely client-rendered apps are not
    affected.



    [1]: https://www.npmjs.com/package/vue
    \n[vue][1] is an MIT-licensed open source project.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks.

    This attack is possible only only if the following two conditions are
    true:

    * The application is being rendered to HTML using `ReactDOMServer` API,
      and
    * The app includes a user-supplied attribute name in an HTML tag.

    Server-rendered React apps, which contain the following pattern may by
    affected:

        let props = {};
        props[userProvidedData] = "hello";
        let element = <div {...props} />;
        let html = ReactDOMServer.renderToString(element);

    Given the attacker could influence the `userProvidedData`, they could
    craft an attribute name that would triggler an XSS vulnerability, like:

        ></div><script>alert("hi")</script>`

    Allowing the attacker to inject arbitrary markup:

        <div ></div><script>alert("hi")</script>

    **Note:** This vulnerability affects only some server-rendered React
    apps, which contain a the pattern. Purely client-rendered apps are not
    affected.



    [1]: https://www.npmjs.com/package/vue
    \n[vue][1] is an MIT-licensed open source project.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks.

    This attack is possible only only if the following two conditions are
    true:

    * The application is being rendered to HTML using `ReactDOMServer` API,
      and
    * The app includes a user-supplied attribute name in an HTML tag.

    Server-rendered React apps, which contain the following pattern may by
    affected:

        let props = {};
        props[userProvidedData] = "hello";
        let element = <div {...props} />;
        let html = ReactDOMServer.renderToString(element);

    Given the attacker could influence the `userProvidedData`, they could
    craft an attribute name that would triggler an XSS vulnerability, like:

        ></div><script>alert("hi")</script>`

    Allowing the attacker to inject arbitrary markup:

        <div ></div><script>alert("hi")</script>

    **Note:** This vulnerability affects only some server-rendered React
    apps, which contain a the pattern. Purely client-rendered apps are not
    affected.



    [1]: https://www.npmjs.com/package/vue
    \n[vue][1] is an MIT-licensed open source project.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks.

    This attack is possible only only if the following two conditions are
    true:

    * The application is being rendered to HTML using `ReactDOMServer` API,
      and
    * The app includes a user-supplied attribute name in an HTML tag.

    Server-rendered React apps, which contain the following pattern may by
    affected:

        let props = {};
        props[userProvidedData] = "hello";
        let element = <div {...props} />;
        let html = ReactDOMServer.renderToString(element);

    Given the attacker could influence the `userProvidedData`, they could
    craft an attribute name that would triggler an XSS vulnerability, like:

        ></div><script>alert("hi")</script>`

    Allowing the attacker to inject arbitrary markup:

        <div ></div><script>alert("hi")</script>

    **Note:** This vulnerability affects only some server-rendered React
    apps, which contain a the pattern. Purely client-rendered apps are not
    affected.



    [1]: https://www.npmjs.com/package/vue
    \n[vue][1] is an MIT-licensed open source project.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks.

    This attack is possible only only if the following two conditions are
    true:

    * The application is being rendered to HTML using `ReactDOMServer` API,
      and
    * The app includes a user-supplied attribute name in an HTML tag.

    Server-rendered React apps, which contain the following pattern may by
    affected:

        let props = {};
        props[userProvidedData] = "hello";
        let element = <div {...props} />;
        let html = ReactDOMServer.renderToString(element);

    Given the attacker could influence the `userProvidedData`, they could
    craft an attribute name that would triggler an XSS vulnerability, like:

        ></div><script>alert("hi")</script>`

    Allowing the attacker to inject arbitrary markup:

        <div ></div><script>alert("hi")</script>

    **Note:** This vulnerability affects only some server-rendered React
    apps, which contain a the pattern. Purely client-rendered apps are not
    affected.



    [1]: https://www.npmjs.com/package/vue
    \n[vue][1] is an MIT-licensed open source project.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks.

    This attack is possible only only if the following two conditions are
    true:

    * The application is being rendered to HTML using `ReactDOMServer` API,
      and
    * The app includes a user-supplied attribute name in an HTML tag.

    Server-rendered React apps, which contain the following pattern may by
    affected:

        let props = {};
        props[userProvidedData] = "hello";
        let element = <div {...props} />;
        let html = ReactDOMServer.renderToString(element);

    Given the attacker could influence the `userProvidedData`, they could
    craft an attribute name that would triggler an XSS vulnerability, like:

        ></div><script>alert("hi")</script>`

    Allowing the attacker to inject arbitrary markup:

        <div ></div><script>alert("hi")</script>

    **Note:** This vulnerability affects only some server-rendered React
    apps, which contain a the pattern. Purely client-rendered apps are not
    affected.



    [1]: https://www.npmjs.com/package/vue
    \n[vue][1] is an MIT-licensed open source project.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks.

    This attack is possible only only if the following two conditions are
    true:

    * The application is being rendered to HTML using `ReactDOMServer` API,
      and
    * The app includes a user-supplied attribute name in an HTML tag.

    Server-rendered React apps, which contain the following pattern may by
    affected:

        let props = {};
        props[userProvidedData] = "hello";
        let element = <div {...props} />;
        let html = ReactDOMServer.renderToString(element);

    Given the attacker could influence the `userProvidedData`, they could
    craft an attribute name that would triggler an XSS vulnerability, like:

        ></div><script>alert("hi")</script>`

    Allowing the attacker to inject arbitrary markup:

        <div ></div><script>alert("hi")</script>

    **Note:** This vulnerability affects only some server-rendered React
    apps, which contain a the pattern. Purely client-rendered apps are not
    affected.



    [1]: https://www.npmjs.com/package/vue
    \n[vue][1] is an MIT-licensed open source project.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks.

    This attack is possible only only if the following two conditions are
    true:

    * The application is being rendered to HTML using `ReactDOMServer` API,
      and
    * The app includes a user-supplied attribute name in an HTML tag.

    Server-rendered React apps, which contain the following pattern may by
    affected:

        let props = {};
        props[userProvidedData] = "hello";
        let element = <div {...props} />;
        let html = ReactDOMServer.renderToString(element);

    Given the attacker could influence the `userProvidedData`, they could
    craft an attribute name that would triggler an XSS vulnerability, like:

        ></div><script>alert("hi")</script>`

    Allowing the attacker to inject arbitrary markup:

        <div ></div><script>alert("hi")</script>

    **Note:** This vulnerability affects only some server-rendered React
    apps, which contain a the pattern. Purely client-rendered apps are not
    affected.



    [1]: https://www.npmjs.com/package/vue
    \n[vue][1] is an MIT-licensed open source project.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks.

    This attack is possible only only if the following two conditions are
    true:

    * The application is being rendered to HTML using `ReactDOMServer` API,
      and
    * The app includes a user-supplied attribute name in an HTML tag.

    Server-rendered React apps, which contain the following pattern may by
    affected:

        let props = {};
        props[userProvidedData] = "hello";
        let element = <div {...props} />;
        let html = ReactDOMServer.renderToString(element);

    Given the attacker could influence the `userProvidedData`, they could
    craft an attribute name that would triggler an XSS vulnerability, like:

        ></div><script>alert("hi")</script>`

    Allowing the attacker to inject arbitrary markup:

        <div ></div><script>alert("hi")</script>

    **Note:** This vulnerability affects only some server-rendered React
    apps, which contain a the pattern. Purely client-rendered apps are not
    affected.



    [1]: https://www.npmjs.com/package/vue
    \n[vue][1] is an MIT-licensed open source project.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks.

    This attack is possible only only if the following two conditions are
    true:

    * The application is being rendered to HTML using `ReactDOMServer` API,
      and
    * The app includes a user-supplied attribute name in an HTML tag.

    Server-rendered React apps, which contain the following pattern may by
    affected:

        let props = {};
        props[userProvidedData] = "hello";
        let element = <div {...props} />;
        let html = ReactDOMServer.renderToString(element);

    Given the attacker could influence the `userProvidedData`, they could
    craft an attribute name that would triggler an XSS vulnerability, like:

        ></div><script>alert("hi")</script>`

    Allowing the attacker to inject arbitrary markup:

        <div ></div><script>alert("hi")</script>

    **Note:** This vulnerability affects only some server-rendered React
    apps, which contain a the pattern. Purely client-rendered apps are not
    affected.



    [1]: https://www.npmjs.com/package/vue
    \n[vue][1] is an MIT-licensed open source project.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks.

    This attack is possible only only if the following two conditions are
    true:

    * The application is being rendered to HTML using `ReactDOMServer` API,
      and
    * The app includes a user-supplied attribute name in an HTML tag.

    Server-rendered React apps, which contain the following pattern may by
    affected:

        let props = {};
        props[userProvidedData] = "hello";
        let element = <div {...props} />;
        let html = ReactDOMServer.renderToString(element);

    Given the attacker could influence the `userProvidedData`, they could
    craft an attribute name that would triggler an XSS vulnerability, like:

        ></div><script>alert("hi")</script>`

    Allowing the attacker to inject arbitrary markup:

        <div ></div><script>alert("hi")</script>

    **Note:** This vulnerability affects only some server-rendered React
    apps, which contain a the pattern. Purely client-rendered apps are not
    affected.



    [1]: https://www.npmjs.com/package/vue
    \n[vue][1] is an MIT-licensed open source project.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) attacks.

    This attack is possible only only if the following two conditions are
    true:

    * The application is being rendered to HTML using `ReactDOMServer` API,
      and
    * The app includes a user-supplied attribute name in an HTML tag.

    Server-rendered React apps, which contain the following pattern may by
    affected:

        let props = {};
        props[userProvidedData] = "hello";
        let element = <div {...props} />;
        let html = ReactDOMServer.renderToString(element);

    Given the attacker could influence the `userProvidedData`, they could
    craft an attribute name that would triggler an XSS vulnerability, like:

        ></div><script>alert("hi")</script>`

    Allowing the attacker to inject arbitrary markup:

        <div ></div><script>alert("hi")</script>

    **Note:** This vulnerability affects only some server-rendered React
    apps, which contain a the pattern. Purely client-rendered apps are not
    affected.



    [1]: https://www.npmjs.com/package/vue
  affected_package: vue
  vulnerable_versions:
  - "<2.5.17"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2018-6341
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://reactjs.org/blog/2018/08/01/react-v-16-4-2.html
  - https://github.com/vuejs/vue/commit/c28f79290d57240c607d8cec3b3413b49702e1fb
  - https://github.com/vuejs/vue/releases/tag/v2.5.17
  - https://twitter.com/vuejs/status/1024754536877973504
  source_url: https://snyk.io/vuln/npm:vue:20180802
- id: snykio:npm:vue:2018-02-21
  title: Regular Expression Denial of Service (ReDoS)
  description: "[`vue`][1] is a React UI component library that uses inline styles
    to\navoid CSS dependencies and prevent leaky global styles from affecting an\napplication.\n\nAffected
    versions of this package are vulnerable to Regular Expression\nDenial of Service
    (ReDoS) attacks. This can cause an impact of about 10\nseconds matching time for
    data 70k characters long.\n\n\n\n[1]: https://www.npmjs.com/package/vue\n\\n[`vue`][1]
    is a React UI component library that uses inline styles to\navoid CSS dependencies
    and prevent leaky global styles from affecting an\napplication.\n\nAffected versions
    of this package are vulnerable to Regular Expression\nDenial of Service (ReDoS)
    attacks. This can cause an impact of about 10\nseconds matching time for data
    70k characters long.\n\n\n\n[1]: https://www.npmjs.com/package/vue\n\\n[`vue`][1]
    is a React UI component library that uses inline styles to\navoid CSS dependencies
    and prevent leaky global styles from affecting an\napplication.\n\nAffected versions
    of this package are vulnerable to Regular Expression\nDenial of Service (ReDoS)
    attacks. This can cause an impact of about 10\nseconds matching time for data
    70k characters long.\n\n\n\n[1]: https://www.npmjs.com/package/vue\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n\\nDenial
    of Service (DoS) describes a family of attacks, all aimed at\nmaking a system
    inaccessible to its original and legitimate users. There\nare many types of DoS
    attacks, ranging from trying to clog the network\npipes to the system by generating
    a large volume of traffic from many\nmachines (a Distributed Denial of Service
    - DDoS - attack) to sending\ncrafted requests that cause a system to crash or
    take a disproportional\namount of time to process.\n\nThe Regular expression Denial
    of Service (ReDoS) is a type of Denial of\nService attack. Regular expressions
    are incredibly powerful, but they\naren\\'t very intuitive and can ultimately
    end up making it easy for\nattackers to take your site down.\n\nLet’s take the
    following regular expression as an example:\n\n    regex = /A(B|C+)+D/\n\nThis
    regular expression accomplishes the following:\n\n* `A` The string must start
    with the letter \\'A\\'\n* `(B|C+)+` The string must then follow the letter A
    with either the\n  letter \\'B\\' or some number of occurrences of the letter
    \\'C\\' (the\n  `+` matches one or more times). The `+` at the end of this section\n
    \ states that we can look for one or more matches of this section.\n* `D` Finally,
    we ensure this section of the string ends with a \\'D\\'\n\nThe expression would
    match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD`\nand `ACCCCCD`\n\nIt most cases,
    it doesn\\'t take very long for a regex engine to find a\nmatch:\n\n    $ time
    node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n    0.04s user
    0.01s system 95% cpu 0.052 total\n    \n    $ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n
    \   1.79s user 0.02s system 99% cpu 1.812 total\n\nThe entire process of testing
    it against a 30 characters long string\ntakes around ~52ms. But when given an
    invalid string, it takes nearly\ntwo seconds to complete the test, over ten times
    as long as it took to\ntest a valid string. The dramatic difference is due to
    the way regular\nexpressions get evaluated.\n\nMost Regex engines will work very
    similarly (with minor differences).\nThe engine will match the first possible
    way to accept the current\ncharacter and proceed to the next one. If it then fails
    to match the\nnext one, it will backtrack and see if there was another way to
    digest\nthe previous character. If it goes too far down the rabbit hole only to\nfind
    out the string doesn’t match in the end, and if many characters\nhave multiple
    valid regex paths, the number of backtracking steps can\nbecome very large, resulting
    in what is known as *catastrophic\nbacktracking*.\n\nLet\\'s look at how our expression
    runs into this problem, using a\nshorter string: \\\"ACCCX\\\". While it seems
    fairly straightforward, there\nare still four different ways that the engine could
    match those three\nC\\'s:\n\n1.  CCC\n2.  CC+C\n3.  C+CC\n4.  C+C+C.\n\nThe engine
    has to try each of those combinations to see if any of them\npotentially match
    against the expression. When you combine that with the\nother steps the engine
    must take, we can use [RegEx 101 debugger][1] to\nsee the engine has to take a
    total of 38 steps before it can determine\nthe string doesn\\'t match.\n\nFrom
    there, the number of steps the engine must use to validate a string\njust continues
    to grow.\n\n| String | Number of C\\'s | Number of steps |\n|----------\n| ACCCX
    | 3 | 38 |\n| ACCCCX | 4 | 71 |\n| ACCCCCX | 5 | 136 |\n| ACCCCCCCCCCCCCCX | 14
    | 65,553 |\n\nBy the time the string includes 14 C\\'s, the engine has to take
    over\n65,000 steps just to see if the string is valid. These extreme\nsituations
    can cause them to work very slowly (exponentially related to\ninput size, as shown
    above), allowing an attacker to exploit this and\ncan cause the service to excessively
    consume CPU, resulting in a Denial\nof Service.\n\n\n\n[1]: https://regex101.com/debugger\n"
  affected_package: vue
  vulnerable_versions:
  - "<=2.5.14"
  severity: low
  package_manager: npm
  cwe:
  - CWE-400
  - CWE-185
  credit:
  - Jamie Davis
  references:
  - https://github.com/vuejs/vue/commit/cd334070f3b82d3f5892c4999cc290ccd4f56fd8
  source_url: https://snyk.io/vuln/npm:vue:20180222
- id: snykio:npm:vue:2017-08-28
  title: Cross-site Scripting (XSS)
  description: |
    [`vue`][1] is a Reactive, component-oriented view layer for modern web
    interfaces.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://www.npmjs.com/package/vue
    \n[`vue`][1] is a Reactive, component-oriented view layer for modern web
    interfaces.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://www.npmjs.com/package/vue
    \n[`vue`][1] is a Reactive, component-oriented view layer for modern web
    interfaces.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://www.npmjs.com/package/vue
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/xss-attacks-the-next-wave/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/xss-attacks-the-next-wave/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/xss-attacks-the-next-wave/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/xss-attacks-the-next-wave/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/xss-attacks-the-next-wave/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/xss-attacks-the-next-wave/
  affected_package: vue
  vulnerable_versions:
  - "<2.4.3"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://github.com/vuejs/vue/commit/5091e2c9847601e329ac36d17eae90bb5cb77a91
  source_url: https://snyk.io/vuln/npm:vue:20170829
- id: snykio:npm:vue:2017-03-31
  title: Cross-site Scripting (XSS)
  description: |
    [`vue`][1] is a Reactive, component-oriented view layer for modern web
    interfaces.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://www.npmjs.com/package/vue
    \n[`vue`][1] is a Reactive, component-oriented view layer for modern web
    interfaces.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://www.npmjs.com/package/vue
    \n[`vue`][1] is a Reactive, component-oriented view layer for modern web
    interfaces.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://www.npmjs.com/package/vue
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/xss-attacks-the-next-wave/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/xss-attacks-the-next-wave/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/xss-attacks-the-next-wave/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/xss-attacks-the-next-wave/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/xss-attacks-the-next-wave/
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    You can read more about `Cross-site Scripting (XSS)` on our [blog][1].



    [1]: https://snyk.io/blog/xss-attacks-the-next-wave/
  affected_package: vue
  vulnerable_versions:
  - "<2.3.0-beta.1"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-79
  credit:
  - Unknown
  references:
  - https://github.com/vuejs/vue/issues/5351
  - https://github.com/vuejs/vue/commit/1e37633567f5d015db24ae0210b1adb4b1c3d355
  source_url: https://snyk.io/vuln/npm:vue:20170401
