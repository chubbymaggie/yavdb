---
- id: ossindex:npm:crypto-browserify:1970-01-01
  title: rng.js is not cryptographically safe
  description: |-
    The usage of Math.random in rng.js is not cryptographically safe for browsers that do not support window.crypto.getRandomValues. It must be altered from its current design.
    ...
    Updated this at to at least have a better error message, and to work correctly in node (published as 3.2.2).
  affected_package: crypto-browserify
  vulnerable_versions:
  - "<3.2.2"
  package_manager: npm
  credit:
  - OSSIndex
  references:
  - https://github.com/crypto-browserify/crypto-browserify/issues/37
  source_url: https://ossindex.net/resource/package/7013422183/vulnerabilities
- id: ossindex:npm:crypto-browserify:1970-01-01
  title: Remove Math.random RNG as it is not cryptographically safe
  description: |-
    Math.random is not cryptographically secure. It is used in browsers which don't support the new crypto.getRandomValues (https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues), but with the advent of things like Bitcoin, I believe it is not appropriate to provide a mechanism for generating randomness that does not carry the usual guarantees of good security.

    The consequence of this PR is that older browsers will no longer work. It is possible to in the future make a way to do legacy support for those that truly don't need real random numbers, but I think the onus is on the developer to reach this problem organically, understand why it exists, and if they decide to, develop a workaround on their own.
  affected_package: crypto-browserify
  vulnerable_versions:
  - "<3.0.0"
  package_manager: npm
  credit:
  - OSSIndex
  references:
  - https://github.com/crypto-browserify/crypto-browserify/pull/45
  source_url: https://ossindex.net/resource/package/7013422183/vulnerabilities
- id: snykio:npm:crypto-browserify:2014-07-21
  title: Insecure Randomness
  description: |
    [`crypto-browserify`][1] is implementation of crypto for the browser.

    Affected versions of the package are vulnerable to Insecure Randomness
    due to using the cryptographically insecure `Math.random()`. This
    function can produce predictable values and should not be used in
    security-sensitive context.



    [1]: https://www.npmjs.com/package/crypto-browserify
    \n[`crypto-browserify`][1] is implementation of crypto for the browser.

    Affected versions of the package are vulnerable to Insecure Randomness
    due to using the cryptographically insecure `Math.random()`. This
    function can produce predictable values and should not be used in
    security-sensitive context.



    [1]: https://www.npmjs.com/package/crypto-browserify
    \n[`crypto-browserify`][1] is implementation of crypto for the browser.

    Affected versions of the package are vulnerable to Insecure Randomness
    due to using the cryptographically insecure `Math.random()`. This
    function can produce predictable values and should not be used in
    security-sensitive context.



    [1]: https://www.npmjs.com/package/crypto-browserify
    \nComputers are deterministic machines, and as such are unable to produce
    true randomness. Pseudo-Random Number Generators (PRNGs) approximate
    randomness algorithmically, starting with a seed from which subsequent
    values are calculated.

    There are two types of PRNGs: statistical and cryptographic. Statistical
    PRNGs provide useful statistical properties, but their output is highly
    predictable and forms an easy to reproduce numeric stream that is
    unsuitable for use in cases where security depends on generated values
    being unpredictable. Cryptographic PRNGs address this problem by
    generating output that is more difficult to predict. For a value to be
    cryptographically secure, it must be impossible or highly improbable for
    an attacker to distinguish between it and a truly random value. In
    general, if a PRNG algorithm is not advertised as being
    cryptographically secure, then it is probably a statistical PRNG and
    should not be used in security-sensitive contexts.

    You can read more about node\'s insecure `Math.random()` in [Mike
    Malone\'s post][1].



    [1]: https://medium.com/@betable/tifu-by-using-math-random-f1c308c4fd9d
    \nComputers are deterministic machines, and as such are unable to produce
    true randomness. Pseudo-Random Number Generators (PRNGs) approximate
    randomness algorithmically, starting with a seed from which subsequent
    values are calculated.

    There are two types of PRNGs: statistical and cryptographic. Statistical
    PRNGs provide useful statistical properties, but their output is highly
    predictable and forms an easy to reproduce numeric stream that is
    unsuitable for use in cases where security depends on generated values
    being unpredictable. Cryptographic PRNGs address this problem by
    generating output that is more difficult to predict. For a value to be
    cryptographically secure, it must be impossible or highly improbable for
    an attacker to distinguish between it and a truly random value. In
    general, if a PRNG algorithm is not advertised as being
    cryptographically secure, then it is probably a statistical PRNG and
    should not be used in security-sensitive contexts.

    You can read more about node\'s insecure `Math.random()` in [Mike
    Malone\'s post][1].



    [1]: https://medium.com/@betable/tifu-by-using-math-random-f1c308c4fd9d
    \nComputers are deterministic machines, and as such are unable to produce
    true randomness. Pseudo-Random Number Generators (PRNGs) approximate
    randomness algorithmically, starting with a seed from which subsequent
    values are calculated.

    There are two types of PRNGs: statistical and cryptographic. Statistical
    PRNGs provide useful statistical properties, but their output is highly
    predictable and forms an easy to reproduce numeric stream that is
    unsuitable for use in cases where security depends on generated values
    being unpredictable. Cryptographic PRNGs address this problem by
    generating output that is more difficult to predict. For a value to be
    cryptographically secure, it must be impossible or highly improbable for
    an attacker to distinguish between it and a truly random value. In
    general, if a PRNG algorithm is not advertised as being
    cryptographically secure, then it is probably a statistical PRNG and
    should not be used in security-sensitive contexts.

    You can read more about node\'s insecure `Math.random()` in [Mike
    Malone\'s post][1].



    [1]: https://medium.com/@betable/tifu-by-using-math-random-f1c308c4fd9d
    \nComputers are deterministic machines, and as such are unable to produce
    true randomness. Pseudo-Random Number Generators (PRNGs) approximate
    randomness algorithmically, starting with a seed from which subsequent
    values are calculated.

    There are two types of PRNGs: statistical and cryptographic. Statistical
    PRNGs provide useful statistical properties, but their output is highly
    predictable and forms an easy to reproduce numeric stream that is
    unsuitable for use in cases where security depends on generated values
    being unpredictable. Cryptographic PRNGs address this problem by
    generating output that is more difficult to predict. For a value to be
    cryptographically secure, it must be impossible or highly improbable for
    an attacker to distinguish between it and a truly random value. In
    general, if a PRNG algorithm is not advertised as being
    cryptographically secure, then it is probably a statistical PRNG and
    should not be used in security-sensitive contexts.

    You can read more about node\'s insecure `Math.random()` in [Mike
    Malone\'s post][1].



    [1]: https://medium.com/@betable/tifu-by-using-math-random-f1c308c4fd9d
  affected_package: crypto-browserify
  vulnerable_versions:
  - "<2.1.11"
  severity: high
  package_manager: npm
  cwe:
  - CWE-330
  credit:
  - Unknown
  references:
  - https://github.com/crypto-browserify/crypto-browserify/commit/b8695c478baa705e18cc7130be3af6c679ae0bf7
  source_url: https://snyk.io/vuln/npm:crypto-browserify:20140722
