---
- id: nodesecurity:npm:react-marked-markdown:2018-05-17
  title: Cross-Site Scripting
  description: |-
    All versions of `react-marked-markdown` are vulnerable to cross-site scripting (XSS) via `href` attributes. This is exploitable if user is provided to `react-marked-markdown`

    Proof of concept:

    ```
    import React from 'react'
    import ReactDOM from 'react-dom'
    import { MarkdownPreview } from 'react-marked-markdown'

    ReactDOM.render(
    <MarkdownPreview
    markedOptions={{ sanitize: true }}
    value={'[XSS](javascript: alert`1`)'}
    />,
    document.getElementById('root')
    )
    ```
  affected_package: react-marked-markdown
  vulnerable_versions:
  - "<=99.999.99999"
  patched_versions:
  - "<0.0.0"
  severity: high
  package_manager: npm
  cvss_v3_vector: CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:N
  credit:
  - Ron Perris
  references:
  - |-
    https://hackerone.com/reports/344069)
    https://github.com/Vincent-P/react-marked-markdown/issues/61
  source_url: https://nodesecurity.io/advisories/668
- id: snykio:npm:react-marked-markdown:2018-05-17
  title: Cross-Site Scripting (XSS)
  description: "[`react-marked-markdown`][1] is a react components package that helps\nyou
    use Markdown easily.\n\nAffected versions of this package are vulnerable to cross-site
    scripting\n(XSS) via `href` attributes. It uses `marked.Render()` but overwrites\nthe
    link method with a custom version that doesn\\'t correctly escape\nvalues passed
    to the href prop of anchor components.\n\nProof of concept:\n\n    import React
    from 'react'\n    import ReactDOM from 'react-dom'\n    import { MarkdownPreview
    } from 'react-marked-markdown'\n    \n    ReactDOM.render(\n    <MarkdownPreview\n
    \   markedOptions={{ sanitize: true }}\n    value={'[XSS](javascript: alert`1`)'}\n
    \   />,\n    document.getElementById('root')\n    )\n\n\n\n[1]: https://www.npmjs.com/package/react-marked-markdown\n\\n[`react-marked-markdown`][1]
    is a react components package that helps\nyou use Markdown easily.\n\nAffected
    versions of this package are vulnerable to cross-site scripting\n(XSS) via `href`
    attributes. It uses `marked.Render()` but overwrites\nthe link method with a custom
    version that doesn\\'t correctly escape\nvalues passed to the href prop of anchor
    components.\n\nProof of concept:\n\n    import React from 'react'\n    import
    ReactDOM from 'react-dom'\n    import { MarkdownPreview } from 'react-marked-markdown'\n
    \   \n    ReactDOM.render(\n    <MarkdownPreview\n    markedOptions={{ sanitize:
    true }}\n    value={'[XSS](javascript: alert`1`)'}\n    />,\n    document.getElementById('root')\n
    \   )\n\n\n\n[1]: https://www.npmjs.com/package/react-marked-markdown\n\\n[`react-marked-markdown`][1]
    is a react components package that helps\nyou use Markdown easily.\n\nAffected
    versions of this package are vulnerable to cross-site scripting\n(XSS) via `href`
    attributes. It uses `marked.Render()` but overwrites\nthe link method with a custom
    version that doesn\\'t correctly escape\nvalues passed to the href prop of anchor
    components.\n\nProof of concept:\n\n    import React from 'react'\n    import
    ReactDOM from 'react-dom'\n    import { MarkdownPreview } from 'react-marked-markdown'\n
    \   \n    ReactDOM.render(\n    <MarkdownPreview\n    markedOptions={{ sanitize:
    true }}\n    value={'[XSS](javascript: alert`1`)'}\n    />,\n    document.getElementById('root')\n
    \   )\n\n\n\n[1]: https://www.npmjs.com/package/react-marked-markdown\n\\n[`react-marked-markdown`][1]
    is a react components package that helps\nyou use Markdown easily.\n\nAffected
    versions of this package are vulnerable to cross-site scripting\n(XSS) via `href`
    attributes. It uses `marked.Render()` but overwrites\nthe link method with a custom
    version that doesn\\'t correctly escape\nvalues passed to the href prop of anchor
    components.\n\nProof of concept:\n\n    import React from 'react'\n    import
    ReactDOM from 'react-dom'\n    import { MarkdownPreview } from 'react-marked-markdown'\n
    \   \n    ReactDOM.render(\n    <MarkdownPreview\n    markedOptions={{ sanitize:
    true }}\n    value={'[XSS](javascript: alert`1`)'}\n    />,\n    document.getElementById('root')\n
    \   )\n\n\n\n[1]: https://www.npmjs.com/package/react-marked-markdown\n\\n[`react-marked-markdown`][1]
    is a react components package that helps\nyou use Markdown easily.\n\nAffected
    versions of this package are vulnerable to cross-site scripting\n(XSS) via `href`
    attributes. It uses `marked.Render()` but overwrites\nthe link method with a custom
    version that doesn\\'t correctly escape\nvalues passed to the href prop of anchor
    components.\n\nProof of concept:\n\n    import React from 'react'\n    import
    ReactDOM from 'react-dom'\n    import { MarkdownPreview } from 'react-marked-markdown'\n
    \   \n    ReactDOM.render(\n    <MarkdownPreview\n    markedOptions={{ sanitize:
    true }}\n    value={'[XSS](javascript: alert`1`)'}\n    />,\n    document.getElementById('root')\n
    \   )\n\n\n\n[1]: https://www.npmjs.com/package/react-marked-markdown\n\\nCross-Site
    Scripting (XSS) attacks occur when an attacker tricks a\nuser’s browser to execute
    malicious JavaScript code in the context of a\nvictim’s domain. Such scripts can
    steal the user’s session cookies for\nthe domain, scrape or modify its content,
    and perform or modify actions\non the user’s behalf, actions typically blocked
    by the browser’s Same\nOrigin Policy.\n\nThese attacks are possible by escaping
    the context of the web\napplication and injecting malicious scripts in an otherwise
    trusted\nwebsite. These scripts can introduce additional attributes (say, a\n\\\"new\\\"
    option in a dropdown list or a new link to a malicious site) and\ncan potentially
    execute code on the clients side, unbeknown to the\nvictim. This occurs when characters
    like `<` `>` `\"` `'` are not escaped\nproperly.\n\nThere are a few types of XSS:\n\n*
    **Persistent XSS** is an attack in which the malicious code persists\n  into the
    web app’s database.\n* **Reflected XSS** is an which the website echoes back a
    portion of the\n  request. The attacker needs to trick the user into clicking
    a\n  malicious link (for instance through a phishing email or malicious JS\n  on
    another page), which triggers the XSS attack.\n* **DOM-based XSS** is an that
    occurs purely in the browser when\n  client-side JavaScript echoes back a portion
    of the URL onto the page.\n  DOM-Based XSS is notoriously hard to detect, as the
    server never gets\n  a chance to see the attack taking place.\n\n\\nCross-Site
    Scripting (XSS) attacks occur when an attacker tricks a\nuser’s browser to execute
    malicious JavaScript code in the context of a\nvictim’s domain. Such scripts can
    steal the user’s session cookies for\nthe domain, scrape or modify its content,
    and perform or modify actions\non the user’s behalf, actions typically blocked
    by the browser’s Same\nOrigin Policy.\n\nThese attacks are possible by escaping
    the context of the web\napplication and injecting malicious scripts in an otherwise
    trusted\nwebsite. These scripts can introduce additional attributes (say, a\n\\\"new\\\"
    option in a dropdown list or a new link to a malicious site) and\ncan potentially
    execute code on the clients side, unbeknown to the\nvictim. This occurs when characters
    like `<` `>` `\"` `'` are not escaped\nproperly.\n\nThere are a few types of XSS:\n\n*
    **Persistent XSS** is an attack in which the malicious code persists\n  into the
    web app’s database.\n* **Reflected XSS** is an which the website echoes back a
    portion of the\n  request. The attacker needs to trick the user into clicking
    a\n  malicious link (for instance through a phishing email or malicious JS\n  on
    another page), which triggers the XSS attack.\n* **DOM-based XSS** is an that
    occurs purely in the browser when\n  client-side JavaScript echoes back a portion
    of the URL onto the page.\n  DOM-Based XSS is notoriously hard to detect, as the
    server never gets\n  a chance to see the attack taking place.\n\n\\nCross-Site
    Scripting (XSS) attacks occur when an attacker tricks a\nuser’s browser to execute
    malicious JavaScript code in the context of a\nvictim’s domain. Such scripts can
    steal the user’s session cookies for\nthe domain, scrape or modify its content,
    and perform or modify actions\non the user’s behalf, actions typically blocked
    by the browser’s Same\nOrigin Policy.\n\nThese attacks are possible by escaping
    the context of the web\napplication and injecting malicious scripts in an otherwise
    trusted\nwebsite. These scripts can introduce additional attributes (say, a\n\\\"new\\\"
    option in a dropdown list or a new link to a malicious site) and\ncan potentially
    execute code on the clients side, unbeknown to the\nvictim. This occurs when characters
    like `<` `>` `\"` `'` are not escaped\nproperly.\n\nThere are a few types of XSS:\n\n*
    **Persistent XSS** is an attack in which the malicious code persists\n  into the
    web app’s database.\n* **Reflected XSS** is an which the website echoes back a
    portion of the\n  request. The attacker needs to trick the user into clicking
    a\n  malicious link (for instance through a phishing email or malicious JS\n  on
    another page), which triggers the XSS attack.\n* **DOM-based XSS** is an that
    occurs purely in the browser when\n  client-side JavaScript echoes back a portion
    of the URL onto the page.\n  DOM-Based XSS is notoriously hard to detect, as the
    server never gets\n  a chance to see the attack taking place.\n\n\\nCross-Site
    Scripting (XSS) attacks occur when an attacker tricks a\nuser’s browser to execute
    malicious JavaScript code in the context of a\nvictim’s domain. Such scripts can
    steal the user’s session cookies for\nthe domain, scrape or modify its content,
    and perform or modify actions\non the user’s behalf, actions typically blocked
    by the browser’s Same\nOrigin Policy.\n\nThese attacks are possible by escaping
    the context of the web\napplication and injecting malicious scripts in an otherwise
    trusted\nwebsite. These scripts can introduce additional attributes (say, a\n\\\"new\\\"
    option in a dropdown list or a new link to a malicious site) and\ncan potentially
    execute code on the clients side, unbeknown to the\nvictim. This occurs when characters
    like `<` `>` `\"` `'` are not escaped\nproperly.\n\nThere are a few types of XSS:\n\n*
    **Persistent XSS** is an attack in which the malicious code persists\n  into the
    web app’s database.\n* **Reflected XSS** is an which the website echoes back a
    portion of the\n  request. The attacker needs to trick the user into clicking
    a\n  malicious link (for instance through a phishing email or malicious JS\n  on
    another page), which triggers the XSS attack.\n* **DOM-based XSS** is an that
    occurs purely in the browser when\n  client-side JavaScript echoes back a portion
    of the URL onto the page.\n  DOM-Based XSS is notoriously hard to detect, as the
    server never gets\n  a chance to see the attack taking place.\n\n\\nCross-Site
    Scripting (XSS) attacks occur when an attacker tricks a\nuser’s browser to execute
    malicious JavaScript code in the context of a\nvictim’s domain. Such scripts can
    steal the user’s session cookies for\nthe domain, scrape or modify its content,
    and perform or modify actions\non the user’s behalf, actions typically blocked
    by the browser’s Same\nOrigin Policy.\n\nThese attacks are possible by escaping
    the context of the web\napplication and injecting malicious scripts in an otherwise
    trusted\nwebsite. These scripts can introduce additional attributes (say, a\n\\\"new\\\"
    option in a dropdown list or a new link to a malicious site) and\ncan potentially
    execute code on the clients side, unbeknown to the\nvictim. This occurs when characters
    like `<` `>` `\"` `'` are not escaped\nproperly.\n\nThere are a few types of XSS:\n\n*
    **Persistent XSS** is an attack in which the malicious code persists\n  into the
    web app’s database.\n* **Reflected XSS** is an which the website echoes back a
    portion of the\n  request. The attacker needs to trick the user into clicking
    a\n  malicious link (for instance through a phishing email or malicious JS\n  on
    another page), which triggers the XSS attack.\n* **DOM-based XSS** is an that
    occurs purely in the browser when\n  client-side JavaScript echoes back a portion
    of the URL onto the page.\n  DOM-Based XSS is notoriously hard to detect, as the
    server never gets\n  a chance to see the attack taking place.\n\n"
  affected_package: react-marked-markdown
  vulnerable_versions:
  - "*"
  severity: high
  package_manager: npm
  cwe:
  - CWE-79
  credit:
  - Ron Perris
  references:
  - https://hackerone.com/reports/344069
  - https://github.com/Vincent-P/react-marked-markdown/issues/61
  source_url: https://snyk.io/vuln/npm:react-marked-markdown:20180517
