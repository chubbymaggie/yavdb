---
- id: npmjs:npm:jquery-ui:127
  title: XSS in dialog closeText
  description: "Affected versions of `jquery-ui` are vulnerable to a cross-site scripting
    vulnerability when arbitrary user input is supplied as the value of the `closeText`
    parameter in the `dialog` function. \n\njQuery-UI is a library for manipulating
    UI elements via jQuery.\n\nVersion 1.11.4 has a cross site scripting (XSS) vulnerability
    in the `closeText` parameter of the `dialog`  function.  If your application passes
    user input to this parameter, it may be vulnerable to XSS via this attack vector."
  affected_package: jquery-ui
  vulnerable_versions:
  - "<=1.11.4"
  severity: high
  package_manager: npm
  cve:
  - CVE-2016-7103
  cwe: CWE-79
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Phat Ly
  references: https://npmjs.com/advisories/127
  source_url: https://npmjs.com/advisories/127
- id: ossindex:npm:jquery-ui:344396
  title: '[CVE-2010-5312]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in jquery.ui.dialog.js in
    the Dialog widget in jQuery UI before 1.10.0 allows remote attackers to inject
    arbitrary web script or HTML via the title option.
  affected_package: jquery-ui
  vulnerable_versions:
  - "<1.10.1"
  package_manager: npm
  cve:
  - CVE-2010-5312
  disclosed_date: 2014-11-24
  created_date: 2014-11-24
  last_modified_date: 2017-01-19
  credit:
  - OSSIndex
  references:
  - http://bugs.jqueryui.com/ticket/6016
  - http://rhn.redhat.com/errata/RHSA-2015-0442.html
  - http://rhn.redhat.com/errata/RHSA-2015-1462.html
  - http://seclists.org/oss-sec/2014/q4/613
  - http://seclists.org/oss-sec/2014/q4/616
  - http://www.debian.org/security/2015/dsa-3249
  - http://www.oracle.com/technetwork/security-advisory/cpuoct2016-2881722.html
  - http://www.securityfocus.com/bid/71106
  - http://www.securitytracker.com/id/1037035
  - http://xforce.iss.net/xforce/xfdb/98696
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/98696
  - https://github.com/jquery/jquery-ui/commit/7e9060c109b928769a664dbcc2c17bd21231b6f3
  source_url: https://ossindex.net/resource/package/7014004199/vulnerabilities
- id: ossindex:npm:jquery-ui:354010
  title: '[CVE-2012-6662]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in the default content option
    in jquery.ui.tooltip.js in the Tooltip widget in jQuery UI before 1.10.0 allows
    remote attackers to inject arbitrary web script or HTML via the title attribute,
    which is not properly handled in the autocomplete combo box demo.
  affected_package: jquery-ui
  vulnerable_versions:
  - 1.10.0
  package_manager: npm
  cve:
  - CVE-2012-6662
  disclosed_date: 2014-11-24
  created_date: 2014-11-24
  last_modified_date: 2017-01-20
  credit:
  - OSSIndex
  references:
  - http://bugs.jqueryui.com/ticket/8859
  - http://bugs.jqueryui.com/ticket/8861
  - http://rhn.redhat.com/errata/RHSA-2015-0442.html
  - http://rhn.redhat.com/errata/RHSA-2015-1462.html
  - http://seclists.org/oss-sec/2014/q4/613
  - http://seclists.org/oss-sec/2014/q4/616
  - http://www.securityfocus.com/bid/71107
  - http://xforce.iss.net/xforce/xfdb/98697
  - https://exchange.xforce.ibmcloud.com/vulnerabilities/98697
  - https://github.com/jquery/jquery-ui/commit/5fee6fd5000072ff32f2d65b6451f39af9e0e39e
  - https://github.com/jquery/jquery-ui/commit/f2854408cce7e4b7fc6bf8676761904af9c96bde
  source_url: https://ossindex.net/resource/package/7014004199/vulnerabilities
- id: ossindex:npm:jquery-ui:8397111714
  title: Cross Site Scripting (XSS)
  description: jQuery.ui.dialog's title option is not properly escaped before being
    set in the dom, resulting in an XSS vulnerability for applications with dynamic
    titles.
  affected_package: jquery-ui
  vulnerable_versions:
  - "<1.10.0"
  package_manager: npm
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 2017-02-07
  credit:
  - OSSIndex
  references:
  - http://bugs.jqueryui.com/ticket/6016
  - https://bugs.jqueryui.com/ticket/8861
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/jquery/jquery-ui/commit/f2854408cce7e4b7fc6bf8676761904af9c96bde
  source_url: https://ossindex.net/resource/package/7014004199/vulnerabilities
- id: ossindex:npm:jquery-ui:8399946931
  title: Cross Site Scripting (XSS)
  description: A potential bug enables the injecting of XSS content into the closeText
    option while using the component ui dialog.
  affected_package: jquery-ui
  vulnerable_versions:
  - "<=1.11.4"
  package_manager: npm
  disclosed_date: 2016-07-22
  created_date: 2016-07-22
  last_modified_date: 2017-02-11
  credit:
  - OSSIndex
  references:
  - https://cwe.mitre.org/data/definitions/79.html
  - https://github.com/jquery/jquery-ui/pull/1622
  - https://nodesecurity.io/advisories/127
  source_url: https://ossindex.net/resource/package/7014004199/vulnerabilities
- id: ossindex:npm:jquery-ui:8402677061
  title: '[CVE-2016-7103]  Improper Neutralization of Input During Web Page Generation
    ("Cross-site Scripting")'
  description: Cross-site scripting (XSS) vulnerability in jQuery UI before 1.12.0
    might allow remote attackers to inject arbitrary web script or HTML via the closeText
    parameter of the dialog function.
  affected_package: jquery-ui
  vulnerable_versions:
  - "<=1.11.4"
  package_manager: npm
  cve:
  - CVE-2016-7103
  disclosed_date: 2017-03-15
  created_date: 2017-03-15
  last_modified_date: 2017-07-30
  credit:
  - OSSIndex
  references:
  - http://rhn.redhat.com/errata/RHSA-2016-2932.html
  - http://rhn.redhat.com/errata/RHSA-2016-2933.html
  - http://rhn.redhat.com/errata/RHSA-2017-0161.html
  - https://github.com/jquery/api.jqueryui.com/issues/281
  - https://github.com/jquery/jquery-ui/commit/9644e7bae9116edaf8d37c5b38cb32b892f10ff6
  - https://jqueryui.com/changelog/1.12.0/
  - https://nodesecurity.io/advisories/127
  - https://www.tenable.com/security/tns-2016-19
  source_url: https://ossindex.net/resource/package/7014004199/vulnerabilities
- id: snykio:npm:jquery-ui:20100903
  title: Cross-site Scripting (XSS)
  description: |+
    [`jquery-ui`][1] is a curated set of user interface interactions,
    effects, widgets, and themes built on top of the jQuery JavaScript
    Library.. Affected versions of the package are vulnerable to Cross-site
    Scripting (XSS) due to improper escaping of the title option in
    `jquery.ui.dialog.js`, before it being set in the DOM. This results in
    an XSS vulnerability for applications with dynamic titles.



    [1]: https://www.npmjs.com/package/jquery-ui
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: jquery-ui
  vulnerable_versions:
  - "<1.10.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2010-5312
  cwe:
  - CWE-79
  disclosed_date: 2010-09-02
  created_date: 2017-02-13
  last_modified_date: 2017-02-13
  credit:
  - shadowman131
  references:
  - http://www.openwall.com/lists/oss-security/2014/11/14/8
  - https://bugs.jqueryui.com/ticket/6016
  - https://github.com/jquery/jquery-ui/commit/7e9060c109b928769a664dbcc2c17bd21231b6f3
  source_url: https://snyk.io/vuln/npm:jquery-ui:20100903
- id: snykio:npm:jquery-ui:20121127
  title: Cross-site Scripting (XSS) via Tooltip
  description: |+
    [`jquery-ui`][1] is a curated set of user interface interactions,
    effects, widgets, and themes built on top of the jQuery JavaScript
    Library.. Affected versions of the package are vulnerable to Cross-site
    Scripting (XSS) via the tooltip title attribute not being escaped and
    was treated as html and not text.



    [1]: https://www.npmjs.com/package/jquery-ui
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: jquery-ui
  vulnerable_versions:
  - "<1.10.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2012-6662
  cwe:
  - CWE-79
  disclosed_date: 2012-11-26
  created_date: 2016-12-26
  last_modified_date: 2016-12-26
  credit:
  - Scott González
  references:
  - https://bugs.jqueryui.com/ticket/8861
  - https://github.com/jquery/jquery-ui/commit/f2854408cce7e4b7fc6bf8676761904af9c96bde
  source_url: https://snyk.io/vuln/npm:jquery-ui:20121127
- id: snykio:npm:jquery-ui:20160721
  title: XSS in dialog closeText
  description: |+
    jQuery-UI is a library for manipulating UI elements via jQuery.

    One of the provided elements is a dialog, which also supports showing
    custom text for closing via the [*closeText*][1] property. However, the
    content of this property is added to the HTML with no sanitization,
    allowing arbitrary scripts.

    If you allow user input to be passed through to the *closeText*
    property, you may have a Cross-site Scripting (XSS) vulnerability.



    [1]: https://api.jqueryui.com/dialog/#option-closeText
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: jquery-ui
  vulnerable_versions:
  - "<=1.11.4"
  severity: high
  package_manager: npm
  cve:
  - CVE-2016-7103
  cwe:
  - CWE-79
  disclosed_date: 2016-07-21
  created_date: 2016-07-21
  last_modified_date: 2016-07-21
  credit:
  - Phat Ly
  references:
  - https://github.com/jquery/api.jqueryui.com/issues/281
  - https://github.com/jquery/jquery-ui/pull/1622
  source_url: https://snyk.io/vuln/npm:jquery-ui:20160721
