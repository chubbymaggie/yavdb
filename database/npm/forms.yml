---
- id: npmjs:npm:forms:158
  title: Cross-Site Scripting
  description: Affected versions of `forms` do not properly escape HTML in generated
    forms, which may result in cross-site scripting.
  affected_package: forms
  vulnerable_versions:
  - "<1.3.0"
  severity: moderate
  package_manager: npm
  cve:
  - CVE-2017-16015
  cwe: CWE-80
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Jordan Harband
  references: https://npmjs.com/advisories/158
  source_url: https://npmjs.com/advisories/158
- id: ossindex:npm:forms:8402788598
  title: Lack of HTML Escaping
  description: "> If the application did not sanitize html on behalf of forms, use
    of forms may be vulnerable to cross site scripting.\n> \n> -- [nodesecurity.io](https://nodesecurity.io/advisories/158)"
  affected_package: forms
  vulnerable_versions:
  - "<1.3.0"
  package_manager: npm
  disclosed_date: 2017-04-12
  created_date: 2017-04-12
  last_modified_date: 2017-04-14
  credit:
  - OSSIndex
  references:
  - https://github.com/caolan/forms/commit/bc01e534a0ff863dedb2026a50bd03153bbc6a5
  - https://nodesecurity.io/advisories/158
  source_url: https://ossindex.net/resource/package/7013632878/vulnerabilities
- id: snykio:npm:forms:20161116
  title: Cross-site Scripting (XSS)
  description: |+
    [`forms`][1] is a library for easily creating HTML forms. Affected
    versions of this package are vulnerable to Cross-site Scripting (XSS)
    attacks due to improperly escaped html.



    [1]: https://www.npmjs.com/package/forms
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: forms
  vulnerable_versions:
  - "<1.3.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-16015
  cwe:
  - CWE-79
  disclosed_date: 2016-11-16
  created_date: 2017-04-12
  last_modified_date: 2017-04-12
  credit:
  - Jordan Harband
  references:
  - https://github.com/caolan/forms/commit/bc01e534a0ff863dedb2026a50bd03153bbc6a5d
  source_url: https://snyk.io/vuln/npm:forms:20161116
