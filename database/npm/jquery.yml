---
- id: npmjs:npm:jquery:328
  title: Cross-Site Scripting (XSS)
  description: Affected versions of `jquery` interpret `text/javascript` responses
    from cross-origin ajax requests, and automatically execute the contents in `jQuery.globalEval`,
    even when the ajax request doesn't contain the `dataType` option.
  affected_package: jquery
  vulnerable_versions:
  - ">=1.12.4 <=2.2.4"
  - ">=1.4.0 <=1.11.3"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-16012
  cwe: CWE-725
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Egor Homakov
  references: https://npmjs.com/advisories/328
  source_url: https://npmjs.com/advisories/328
- id: npmjs:npm:jquery:329
  title: Cross-Site Scripting
  description: |+
    Affected versions of `jquery` are vulnerable to cross-site scripting. This occurs because the main `jquery` function uses a regular expression to differentiate between HTML and selectors, but does not properly anchor the regular expression. The result is that `jquery` may interpret HTML as selectors when given certain inputs, allowing for client side code execution.

    ## Proof of Concept
    ```
    $("#log").html(
        $("element[attribute='<img src=\"x\" onerror=\"alert(1)\" />']").html()
    );
    ```

  affected_package: jquery
  vulnerable_versions:
  - ">=1.7.1 <=1.8.3"
  severity: high
  package_manager: npm
  cve:
  - CVE-2017-16011
  cwe: CWE-79
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Richard Gibson
  references: https://npmjs.com/advisories/329
  source_url: https://npmjs.com/advisories/329
- id: npmjs:npm:jquery:330
  title: Denial of Service
  description: Affected versions of `jquery` use a lowercasing logic on attribute
    names. When given a boolean attribute with a name that contains uppercase characters,
    `jquery` enters into an infinite recursion loop, exceeding the call stack limit,
    and resulting in a denial of service condition.
  affected_package: jquery
  vulnerable_versions:
  - ">=2.10 <=2.2.4"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2017-16027
  cwe: CWE-121
  disclosed_date: 1970-01-01
  created_date: 1970-01-01
  last_modified_date: 1970-01-01
  credit: Michał Gołębiowski
  references: https://npmjs.com/advisories/330
  source_url: https://npmjs.com/advisories/330
- id: snykio:npm:jquery:174006
  title: Prototype Pollution
  description: "[jquery][1] is a JavaScript library. It makes things like HTML document\ntraversal
    and manipulation, event handling, animation, and Ajax much\nsimpler with an easy-to-use
    API that works across a multitude of\nbrowsers.\n\nAffected versions of this package
    are vulnerable to Prototype Pollution.\nThe `extend` function can be tricked into
    modifying the prototype of\n`Object` when the attacker controls part of the structure
    passed to this\nfunction. This can let an attacker add or modify an existing property\nthat
    will then exist on all objects.\n\n\n\n[1]: https://www.npmjs.com/package/jquery\n\\nPrototype
    Pollution is a vulnerability affecting JavaScript. Prototype\nPollution refers
    to the ability to inject properties into existing\nJavaScript language construct
    prototypes, such as objects. JavaScript\nallows all Object attributes to be altered,
    including their magical\nattributes such as `_proto_`, `constructor` and `prototype`.
    An attacker\nmanipulates these attributes to overwrite, or pollute, a JavaScript\napplication
    object prototype of the base object by injecting other\nvalues. Properties on
    the `Object.prototype` are then inherited by all\nthe JavaScript objects through
    the prototype chain. When that happens,\nthis leads to either denial of service
    by triggering JavaScript\nexceptions, or it tampers with the application source
    code to force the\ncode path that the attacker injects, thereby leading to remote
    code\nexecution.\n\nThere are two main ways in which the pollution of prototypes
    occurs:\n\n* Unsafe `Object` recursive merge\n\n* Property definition by path\n\n###
    Unsafe Object recursive merge   {#unsafe-object-recursive-merge}\n\nThe logic
    of a vulnerable recursive merge function follows the following\nhigh-level model:\n\n
    \   merge (target, source)\n    \n    foreach property of source\n    \n    if
    property exists and is an object on both the target and the source\n    \n    merge(target[property],
    source[property])\n    \n    else\n    \n    target[property] = source[property]\n\n\n\nWhen
    the source object contains a property named `_proto_` defined with\n`Object.defineProperty()`
    , the condition that checks if the property\nexists and is an object on both the
    target and the source passes and the\nmerge recurses with the target, being the
    prototype of `Object` and the\nsource of `Object` as defined by the attacker.
    Properties are then\ncopied on the `Object` prototype.\n\nClone operations are
    a special sub-class of unsafe recursive merges,\nwhich occur when a recursive
    merge is conducted on an empty object:\n`merge({},source)`.\n\n`lodash` and `Hoek`
    are examples of libraries susceptible to recursive\nmerge attacks.\n\n### Property
    definition by path   {#property-definition-by-path}\n\nThere are a few JavaScript
    libraries that use an API to define property\nvalues on an object based on a given
    path. The function that is\ngenerally affected contains this signature: `theFunction(object,
    path,\nvalue)`\n\nIf the attacker can control the value of “path”, they can set
    this value\nto `_proto_.myValue`. `myValue` is then assigned to the prototype
    of the\nclass of the object.\n\n"
  affected_package: jquery
  vulnerable_versions:
  - "<3.4.0"
  severity: medium
  package_manager: npm
  cwe:
  - CWE-400
  disclosed_date: 2019-03-26
  created_date: 2019-03-27
  last_modified_date: 2019-03-27
  credit:
  - mgol
  references:
  - https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b
  - https://github.com/jquery/jquery/pull/4333
  - https://snyk.io/blog/after-three-years-of-silence-a-new-jquery-prototype-pollution-vulnerability-emerges-once-again/
  source_url: https://snyk.io/vuln/SNYK-JS-JQUERY-174006
- id: snykio:npm:jquery:20110606
  title: Cross-site Scripting (XSS)
  description: |+
    [`jquery`][1] is JavaScript library for DOM operations. Affected
    versions of the package are vulnerable to Cross-site Scripting (XSS).
    The `location.hash()` function was used to select elements, but also
    allows remote attackers to inject script into the page.

    Related to a vulnerability in [jQuery-migrate][2] and in
    [fullpage.js](npm:fullpage.js:20151207).



    [1]: https://www.npmjs.com/package/jquery
    [2]: https://snyk.io/vuln/npm:jquery-migrate:20130419
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: jquery
  vulnerable_versions:
  - "<1.6.3"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2011-4969
  cwe:
  - CWE-79
  disclosed_date: 2011-06-05
  created_date: 2016-10-20
  last_modified_date: 2016-10-20
  credit:
  - Dave Methvin
  references:
  - http://blog.jquery.com/2011/09/01/jquery-1-6-3-released/
  - http://www.openwall.com/lists/oss-security/2013/01/31/3
  - https://bugs.jquery.com/ticket/9521
  source_url: https://snyk.io/vuln/npm:jquery:20110606
- id: snykio:npm:jquery:20120206
  title: Cross-site Scripting (XSS)
  description: |+
    [`jquery`][1] is JavaScript library for DOM operations.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS) attacks. The `jQuery(strInput)` function does not differentiate
    selectors from HTML in a reliable fashion. In the vulnerable version,
    jQuery determined whether the input was HTML or not by looking for the
    \'&lt;\' character anywhere in the string, giving attackers more
    flexibility when attempting to construct malicious payload.

    In the fixed versions, jQuery only deems the input to be HTML if it
    explicitly starts with \'&lt;\', limiting exploitability only to
    attackers who can control the beginning of a string, which is far less
    common.



    [1]: https://www.npmjs.com/package/jquery
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: jquery
  vulnerable_versions:
  - "<1.9.0 >=1.7.1"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2012-6708
  - CVE-2017-16011
  cwe:
  - CWE-79
  disclosed_date: 2012-06-19
  created_date: 2016-10-20
  last_modified_date: 2016-10-20
  credit:
  - Richard Gibson
  references:
  - http://jsfiddle.net/C8dgG/
  - https://bugs.jquery.com/ticket/11290
  - https://github.com/jquery/jquery/commit/05531fc4080ae24070930d15ae0cea7ae056457d
  source_url: https://snyk.io/vuln/npm:jquery:20120206
- id: snykio:npm:jquery:20140902
  title: Cross-site Scripting (XSS)
  description: |+
    [`jquery`][1] is JavaScript library for DOM operations. Affected
    versions of the package are vulnerable to a DOM based Cross-site
    Scripting (XSS) attack due to using the `text()` function inside the
    `after()` function.



    [1]: https://www.npmjs.com/package/jquery
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: jquery
  vulnerable_versions:
  - ">=1.4.2 <1.6.2"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2014-6071
  cwe:
  - CWE-79
  disclosed_date: 2014-09-01
  created_date: 2016-10-20
  last_modified_date: 2016-10-20
  credit:
  - Mauro Risonho de Paula Assumpção
  references:
  - http://seclists.org/fulldisclosure/2014/Sep/10
  - https://bugzilla.redhat.com/show_bug.cgi?id=1136683
  source_url: https://snyk.io/vuln/npm:jquery:20140902
- id: snykio:npm:jquery:20150627
  title: Cross-site Scripting (XSS)
  description: |+
    [`jquery`][1] is JavaScript library for DOM operations.

    Affected versions of the package are vulnerable to Cross-site Scripting
    (XSS) attacks when a cross-domain ajax request is performed without the
    `dataType` option causing `text/javascript` responses to be executed.



    [1]: https://www.npmjs.com/package/jquery
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: jquery
  vulnerable_versions:
  - "<1.12.2"
  - ">=1.12.3 <2.2.2"
  - ">=2.2.3 <3.0.0"
  severity: medium
  package_manager: npm
  cve:
  - CVE-2015-9251
  - CVE-2017-16012
  cwe:
  - CWE-79
  disclosed_date: 2015-06-26
  created_date: 2016-11-27
  last_modified_date: 2016-11-27
  credit:
  - Egor Homakov
  references:
  - https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc
  - https://github.com/jquery/jquery/issues/2432
  - https://github.com/jquery/jquery/pull/2588
  - https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2
  source_url: https://snyk.io/vuln/npm:jquery:20150627
- id: snykio:npm:jquery:20160529
  title: Denial of Service (DoS)
  description: |+
    [`jquery`][1] is JavaScript library for DOM operations. Affected
    versions of the package are vulnerable to Denial of Service (DoS) due to
    removing a logic that lowercased attribute names. Any attribute getter
    using a mixed-cased name for boolean attributes goes into an infinite
    recursion, exceeding the stack call limit.



    [1]: https://www.npmjs.com/package/jquery
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: jquery
  vulnerable_versions:
  - "=3.0.0-rc1"
  severity: low
  package_manager: npm
  cve:
  - CVE-2016-10707
  cwe:
  - CWE-400
  disclosed_date: 2016-05-28
  created_date: 2016-12-26
  last_modified_date: 2016-12-26
  credit:
  - Michał Gołębiowski
  references:
  - https://github.com/jquery/jquery/issues/3133
  - https://github.com/jquery/jquery/pull/3134
  - https://jsfiddle.net/shnann6y/2/
  source_url: https://snyk.io/vuln/npm:jquery:20160529
