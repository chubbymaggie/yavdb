---
- id: snykio:nuget:ember:2015-11-06
  title: Potential Cross-site Scripting (XSS)
  description: |+
    In general, Ember.js escapes or strips any user-supplied content before
    inserting it in strings that will be sent to innerHTML. However, the
    `tagName` property of an `Ember.View` was inserted into such a string
    without being sanitized. This means that if an application assigns a
    view\'s `tagName` to user-supplied data, a specially-crafted payload
    could execute arbitrary JavaScript in the context of the current domain
    (XSS).

    \nIn general, Ember.js escapes or strips any user-supplied content before
    inserting it in strings that will be sent to innerHTML. However, the
    `tagName` property of an `Ember.View` was inserted into such a string
    without being sanitized. This means that if an application assigns a
    view\'s `tagName` to user-supplied data, a specially-crafted payload
    could execute arbitrary JavaScript in the context of the current domain
    (XSS).

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: ember
  vulnerable_versions:
  - ">= 0"
  severity: medium
  package_manager: nuget
  cve:
  - CVE-2013-4170
  cwe:
  - CWE-79
  credit:
  - Mario Heiderich
  references:
  - https://groups.google.com/forum/#!topic/ember-security/dokLVwwxAdM
  source_url: https://snyk.io/vuln/SNYK-DOTNET-EMBER-60145
- id: snykio:nuget:ember:2015-11-06
  title: Potential Cross-site Scripting (XSS)
  description: |+
    Potential XSS Exploit With User-Supplied Data When Using `{{group}}`
    Helper

    In general, Ember.js escapes or strips any user-supplied content before
    inserting it in strings that will be sent to innerHTML. However, a
    vulnerability has been identified that could lead to unescaped content
    being inserted into the innerHTML string without being sanitized.

    \nPotential XSS Exploit With User-Supplied Data When Using `{{group}}`
    Helper

    In general, Ember.js escapes or strips any user-supplied content before
    inserting it in strings that will be sent to innerHTML. However, a
    vulnerability has been identified that could lead to unescaped content
    being inserted into the innerHTML string without being sanitized.

    \nPotential XSS Exploit With User-Supplied Data When Using `{{group}}`
    Helper

    In general, Ember.js escapes or strips any user-supplied content before
    inserting it in strings that will be sent to innerHTML. However, a
    vulnerability has been identified that could lead to unescaped content
    being inserted into the innerHTML string without being sanitized.

    \nWhen using the `{{group}}` helper, user supplied content in the template
    was not being sanitized. Though the vulnerability exists in Ember.js
    proper, it is only exposed via the use of an experimental plugin.

    In applications that use the `{{group}}` helper, a specially-crafted
    payload could execute arbitrary JavaScript in the context of the current
    domain (\"XSS\").

    **Impact**\:

    This vulnerability only affects applications that use the `{{group}}`
    helper to display user-provided content.

    \nWhen using the `{{group}}` helper, user supplied content in the template
    was not being sanitized. Though the vulnerability exists in Ember.js
    proper, it is only exposed via the use of an experimental plugin.

    In applications that use the `{{group}}` helper, a specially-crafted
    payload could execute arbitrary JavaScript in the context of the current
    domain (\"XSS\").

    **Impact**\:

    This vulnerability only affects applications that use the `{{group}}`
    helper to display user-provided content.

    \nWhen using the `{{group}}` helper, user supplied content in the template
    was not being sanitized. Though the vulnerability exists in Ember.js
    proper, it is only exposed via the use of an experimental plugin.

    In applications that use the `{{group}}` helper, a specially-crafted
    payload could execute arbitrary JavaScript in the context of the current
    domain (\"XSS\").

    **Impact**\:

    This vulnerability only affects applications that use the `{{group}}`
    helper to display user-provided content.

    \nWhen using the `{{group}}` helper, user supplied content in the template
    was not being sanitized. Though the vulnerability exists in Ember.js
    proper, it is only exposed via the use of an experimental plugin.

    In applications that use the `{{group}}` helper, a specially-crafted
    payload could execute arbitrary JavaScript in the context of the current
    domain (\"XSS\").

    **Impact**\:

    This vulnerability only affects applications that use the `{{group}}`
    helper to display user-provided content.

    \nWhen using the `{{group}}` helper, user supplied content in the template
    was not being sanitized. Though the vulnerability exists in Ember.js
    proper, it is only exposed via the use of an experimental plugin.

    In applications that use the `{{group}}` helper, a specially-crafted
    payload could execute arbitrary JavaScript in the context of the current
    domain (\"XSS\").

    **Impact**\:

    This vulnerability only affects applications that use the `{{group}}`
    helper to display user-provided content.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: ember
  vulnerable_versions:
  - ">= 1.4-alpha < 1.4.0-beta2"
  - ">= 1.3 < 1.3.1"
  - ">= 1.2 < 1.2.1"
  - ">= 1.1 < 1.1.3"
  - ">= 1 < 1.0.1"
  severity: low
  package_manager: nuget
  cve:
  - CVE-2014-0014
  - CVE-2014-0013
  cwe:
  - CWE-79
  credit:
  - Robert Jackson
  references:
  - https://groups.google.com/forum/#!topic/ember-security/2kpXXCxISS4
  - https://groups.google.com/forum/#!topic/ember-security/PSE4RzTi6l4
  source_url: https://snyk.io/vuln/SNYK-DOTNET-EMBER-60146
- id: snykio:nuget:ember:2015-11-06
  title: Cross-site Scripting (XSS)
  description: |+
    Potential XSS Exploit With User-Supplied Data When Binding Primitive
    Values

    In general, Ember.js escapes or strips any user-supplied content before
    inserting it in strings that will be sent to innerHTML. However, a
    vulnerability that could lead to unescaped content being inserted into
    the innerHTML string without being sanitized has been identified.

    When a primitive value is used as the Handlebars context, that value is
    not properly escaped. An example of this would be using the `{{each}}`
    helper to iterate over an array of user-supplied strings and using
    `{{this}}` inside the block to display each string.

    In applications that contain templates whose context is a primitive
    value and use the `{{this}}` keyword to display that value, a
    specially-crafted payload could execute arbitrary JavaScript in the
    context of the current domain (\"XSS\").

    **Impact:**

    This vulnerability affects applications that contain templates whose
    context is set to a user-supplied primitive value (such as a string or
    number) and also contain the `{{this}}` special Handlebars variable to
    display the value.

    \nPotential XSS Exploit With User-Supplied Data When Binding Primitive
    Values

    In general, Ember.js escapes or strips any user-supplied content before
    inserting it in strings that will be sent to innerHTML. However, a
    vulnerability that could lead to unescaped content being inserted into
    the innerHTML string without being sanitized has been identified.

    When a primitive value is used as the Handlebars context, that value is
    not properly escaped. An example of this would be using the `{{each}}`
    helper to iterate over an array of user-supplied strings and using
    `{{this}}` inside the block to display each string.

    In applications that contain templates whose context is a primitive
    value and use the `{{this}}` keyword to display that value, a
    specially-crafted payload could execute arbitrary JavaScript in the
    context of the current domain (\"XSS\").

    **Impact:**

    This vulnerability affects applications that contain templates whose
    context is set to a user-supplied primitive value (such as a string or
    number) and also contain the `{{this}}` special Handlebars variable to
    display the value.

    \nPotential XSS Exploit With User-Supplied Data When Binding Primitive
    Values

    In general, Ember.js escapes or strips any user-supplied content before
    inserting it in strings that will be sent to innerHTML. However, a
    vulnerability that could lead to unescaped content being inserted into
    the innerHTML string without being sanitized has been identified.

    When a primitive value is used as the Handlebars context, that value is
    not properly escaped. An example of this would be using the `{{each}}`
    helper to iterate over an array of user-supplied strings and using
    `{{this}}` inside the block to display each string.

    In applications that contain templates whose context is a primitive
    value and use the `{{this}}` keyword to display that value, a
    specially-crafted payload could execute arbitrary JavaScript in the
    context of the current domain (\"XSS\").

    **Impact:**

    This vulnerability affects applications that contain templates whose
    context is set to a user-supplied primitive value (such as a string or
    number) and also contain the `{{this}}` special Handlebars variable to
    display the value.

    \nPotential XSS Exploit With User-Supplied Data When Binding Primitive
    Values

    In general, Ember.js escapes or strips any user-supplied content before
    inserting it in strings that will be sent to innerHTML. However, a
    vulnerability that could lead to unescaped content being inserted into
    the innerHTML string without being sanitized has been identified.

    When a primitive value is used as the Handlebars context, that value is
    not properly escaped. An example of this would be using the `{{each}}`
    helper to iterate over an array of user-supplied strings and using
    `{{this}}` inside the block to display each string.

    In applications that contain templates whose context is a primitive
    value and use the `{{this}}` keyword to display that value, a
    specially-crafted payload could execute arbitrary JavaScript in the
    context of the current domain (\"XSS\").

    **Impact:**

    This vulnerability affects applications that contain templates whose
    context is set to a user-supplied primitive value (such as a string or
    number) and also contain the `{{this}}` special Handlebars variable to
    display the value.

    \nPotential XSS Exploit With User-Supplied Data When Binding Primitive
    Values

    In general, Ember.js escapes or strips any user-supplied content before
    inserting it in strings that will be sent to innerHTML. However, a
    vulnerability that could lead to unescaped content being inserted into
    the innerHTML string without being sanitized has been identified.

    When a primitive value is used as the Handlebars context, that value is
    not properly escaped. An example of this would be using the `{{each}}`
    helper to iterate over an array of user-supplied strings and using
    `{{this}}` inside the block to display each string.

    In applications that contain templates whose context is a primitive
    value and use the `{{this}}` keyword to display that value, a
    specially-crafted payload could execute arbitrary JavaScript in the
    context of the current domain (\"XSS\").

    **Impact:**

    This vulnerability affects applications that contain templates whose
    context is set to a user-supplied primitive value (such as a string or
    number) and also contain the `{{this}}` special Handlebars variable to
    display the value.

    \nPotential XSS Exploit With User-Supplied Data When Binding Primitive
    Values

    In general, Ember.js escapes or strips any user-supplied content before
    inserting it in strings that will be sent to innerHTML. However, a
    vulnerability that could lead to unescaped content being inserted into
    the innerHTML string without being sanitized has been identified.

    When a primitive value is used as the Handlebars context, that value is
    not properly escaped. An example of this would be using the `{{each}}`
    helper to iterate over an array of user-supplied strings and using
    `{{this}}` inside the block to display each string.

    In applications that contain templates whose context is a primitive
    value and use the `{{this}}` keyword to display that value, a
    specially-crafted payload could execute arbitrary JavaScript in the
    context of the current domain (\"XSS\").

    **Impact:**

    This vulnerability affects applications that contain templates whose
    context is set to a user-supplied primitive value (such as a string or
    number) and also contain the `{{this}}` special Handlebars variable to
    display the value.

    \nPotential XSS Exploit With User-Supplied Data When Binding Primitive
    Values

    In general, Ember.js escapes or strips any user-supplied content before
    inserting it in strings that will be sent to innerHTML. However, a
    vulnerability that could lead to unescaped content being inserted into
    the innerHTML string without being sanitized has been identified.

    When a primitive value is used as the Handlebars context, that value is
    not properly escaped. An example of this would be using the `{{each}}`
    helper to iterate over an array of user-supplied strings and using
    `{{this}}` inside the block to display each string.

    In applications that contain templates whose context is a primitive
    value and use the `{{this}}` keyword to display that value, a
    specially-crafted payload could execute arbitrary JavaScript in the
    context of the current domain (\"XSS\").

    **Impact:**

    This vulnerability affects applications that contain templates whose
    context is set to a user-supplied primitive value (such as a string or
    number) and also contain the `{{this}}` special Handlebars variable to
    display the value.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: ember
  vulnerable_versions:
  - ">= 1.2.0 < 1.2.2"
  - ">= 1.3.0 < 1.3.2"
  severity: low
  package_manager: nuget
  cwe:
  - CWE-79
  credit:
  - Hyder Ali
  references:
  - https://groups.google.com/forum/#!topic/ember-security/1h6FRgr8lXQ
  source_url: https://snyk.io/vuln/SNYK-DOTNET-EMBER-60147
