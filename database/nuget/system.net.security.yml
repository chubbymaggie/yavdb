---
- id: snykio:nuget:system.net.security:2017-05-09
  title: Denial of Service (DoS)
  description: |+
    [`System.Net.Security`][1] provides types, such as
    System.Net.Security.SslStream, that uses SSL/TLS protocols to provide
    secure network communication between client and server endpoints.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks.

    A denial of service vulnerability exists when the `ASP.NET Core` fails
    to properly validate web requests.

    **NOTE:** Microsoft has not commented on third-party claims that the
    issue is that the `TextEncoder.EncodeCore` function in the
    `System.Text.Encodings.Web` package in ASP.NET Core Mvc before 1.0.4 and
    1.1.x before 1.1.3 allows remote attackers to cause a denial of service
    by leveraging failure to properly calculate the length of 4-byte
    characters in the Unicode Non-Character range.



    [1]: https://www.nuget.org/packages/System.Net.Security
    \n[`System.Net.Security`][1] provides types, such as
    System.Net.Security.SslStream, that uses SSL/TLS protocols to provide
    secure network communication between client and server endpoints.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks.

    A denial of service vulnerability exists when the `ASP.NET Core` fails
    to properly validate web requests.

    **NOTE:** Microsoft has not commented on third-party claims that the
    issue is that the `TextEncoder.EncodeCore` function in the
    `System.Text.Encodings.Web` package in ASP.NET Core Mvc before 1.0.4 and
    1.1.x before 1.1.3 allows remote attackers to cause a denial of service
    by leveraging failure to properly calculate the length of 4-byte
    characters in the Unicode Non-Character range.



    [1]: https://www.nuget.org/packages/System.Net.Security
    \n[`System.Net.Security`][1] provides types, such as
    System.Net.Security.SslStream, that uses SSL/TLS protocols to provide
    secure network communication between client and server endpoints.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks.

    A denial of service vulnerability exists when the `ASP.NET Core` fails
    to properly validate web requests.

    **NOTE:** Microsoft has not commented on third-party claims that the
    issue is that the `TextEncoder.EncodeCore` function in the
    `System.Text.Encodings.Web` package in ASP.NET Core Mvc before 1.0.4 and
    1.1.x before 1.1.3 allows remote attackers to cause a denial of service
    by leveraging failure to properly calculate the length of 4-byte
    characters in the Unicode Non-Character range.



    [1]: https://www.nuget.org/packages/System.Net.Security
    \n[`System.Net.Security`][1] provides types, such as
    System.Net.Security.SslStream, that uses SSL/TLS protocols to provide
    secure network communication between client and server endpoints.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks.

    A denial of service vulnerability exists when the `ASP.NET Core` fails
    to properly validate web requests.

    **NOTE:** Microsoft has not commented on third-party claims that the
    issue is that the `TextEncoder.EncodeCore` function in the
    `System.Text.Encodings.Web` package in ASP.NET Core Mvc before 1.0.4 and
    1.1.x before 1.1.3 allows remote attackers to cause a denial of service
    by leveraging failure to properly calculate the length of 4-byte
    characters in the Unicode Non-Character range.



    [1]: https://www.nuget.org/packages/System.Net.Security
    \n[`System.Net.Security`][1] provides types, such as
    System.Net.Security.SslStream, that uses SSL/TLS protocols to provide
    secure network communication between client and server endpoints.

    Affected versions of this package are vulnerable to Denial of Service
    (DoS) attacks.

    A denial of service vulnerability exists when the `ASP.NET Core` fails
    to properly validate web requests.

    **NOTE:** Microsoft has not commented on third-party claims that the
    issue is that the `TextEncoder.EncodeCore` function in the
    `System.Text.Encodings.Web` package in ASP.NET Core Mvc before 1.0.4 and
    1.1.x before 1.1.3 allows remote attackers to cause a denial of service
    by leveraging failure to properly calculate the length of 4-byte
    characters in the Unicode Non-Character range.



    [1]: https://www.nuget.org/packages/System.Net.Security
    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

    \nDenial of Service (DoS) describes a family of attacks, all aimed at
    making a system inaccessible to its intended and legitimate users.

    Unlike other vulnerabilities, DoS attacks usually do not aim at
    breaching security. Rather, they are focused on making websites and
    services unavailable to genuine users resulting in downtime.

    One popular Denial of Service vulnerability is DDoS (a Distributed
    Denial of Service), an attack that attempts to clog network pipes to the
    system by generating a large volume of traffic from many machines.

    When it comes to open source libraries, DoS vulnerabilities allow
    attackers to trigger such a crash or crippling of the service by using a
    flaw either in the application code or from the use of open source
    libraries.

    Two common types of DoS vulnerabilities:

    * High CPU/Memory Consumption- An attacker sending crafted requests that
      could cause the system to take a disproportionate amount of time to
      process. For example,
      [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).

    * Crash - An attacker sending crafted requests that could cause the
      system to crash. For Example, [npm `ws` package](npm:ws:20171108)

  affected_package: system.net.security
  vulnerable_versions:
  - "< 4.0.1"
  - ">= 4.3 < 4.3.1"
  severity: high
  package_manager: nuget
  cve:
  - CVE-2017-0247
  cwe:
  - CWE-254
  credit:
  - David Fernandez
  references:
  - https://nvd.nist.gov/vuln/detail/2017-0247
  - https://www.sidertia.com/Home/Community/Blog/2017/05/18/ASPNET-Core-Unicode-Non-Char-Encoding-DoS
  - https://technet.microsoft.com/en-us/library/security/4021279.aspx
  - https://github.com/aspnet/Announcements/issues/239
  source_url: https://snyk.io/vuln/SNYK-DOTNET-SYSTEMNETSECURITY-60069
- id: snykio:nuget:system.net.security:2017-05-12
  title: Improper Certificate Validation
  description: |
    [`System.Net.Security`][1] provides types, such as
    System.Net.Security.SslStream, that uses SSL/TLS protocols to provide
    secure network communication between client and server endpoints.

    Affected versions of this package are vulnerable due to Improper
    Certificate Validation. It allows an attacker to bypass *Enhanced
    Security Usage* tagging when they present a certificate that is invalid
    for a specific use.



    [1]: https://www.nuget.org/packages/System.Net.Security
    \n[`System.Net.Security`][1] provides types, such as
    System.Net.Security.SslStream, that uses SSL/TLS protocols to provide
    secure network communication between client and server endpoints.

    Affected versions of this package are vulnerable due to Improper
    Certificate Validation. It allows an attacker to bypass *Enhanced
    Security Usage* tagging when they present a certificate that is invalid
    for a specific use.



    [1]: https://www.nuget.org/packages/System.Net.Security
    \n[`System.Net.Security`][1] provides types, such as
    System.Net.Security.SslStream, that uses SSL/TLS protocols to provide
    secure network communication between client and server endpoints.

    Affected versions of this package are vulnerable due to Improper
    Certificate Validation. It allows an attacker to bypass *Enhanced
    Security Usage* tagging when they present a certificate that is invalid
    for a specific use.



    [1]: https://www.nuget.org/packages/System.Net.Security
  affected_package: system.net.security
  vulnerable_versions:
  - "< 4.0.1"
  - ">= 4.3 < 4.3.1"
  severity: high
  package_manager: nuget
  cve:
  - CVE-2017-0248
  cwe:
  - CWE-287
  credit:
  - Joonwoo Yu
  - HyoungKee Choi
  references:
  - https://nvd.nist.gov/vuln/detail/2017-0248
  - https://technet.microsoft.com/en-us/library/security/4021279.aspx
  - https://github.com/aspnet/Announcements/issues/239
  source_url: https://snyk.io/vuln/SNYK-DOTNET-SYSTEMNETSECURITY-60070
- id: snykio:nuget:system.net.security:2017-05-12
  title: Privilege Escalation
  description: |
    [`System.Net.Security`][1] provides types, such as
    System.Net.Security.SslStream, that uses SSL/TLS protocols to provide
    secure network communication between client and server endpoints.

    Affected versions of this package are vulnerable to Privilege Escalation
    due to failing to properly sanitize web requests,



    [1]: https://www.nuget.org/packages/System.Net.Security
    \n[`System.Net.Security`][1] provides types, such as
    System.Net.Security.SslStream, that uses SSL/TLS protocols to provide
    secure network communication between client and server endpoints.

    Affected versions of this package are vulnerable to Privilege Escalation
    due to failing to properly sanitize web requests,



    [1]: https://www.nuget.org/packages/System.Net.Security
    \n[`System.Net.Security`][1] provides types, such as
    System.Net.Security.SslStream, that uses SSL/TLS protocols to provide
    secure network communication between client and server endpoints.

    Affected versions of this package are vulnerable to Privilege Escalation
    due to failing to properly sanitize web requests,



    [1]: https://www.nuget.org/packages/System.Net.Security
  affected_package: system.net.security
  vulnerable_versions:
  - "< 4.0.1"
  - ">= 4.3 < 4.3.1"
  severity: high
  package_manager: nuget
  cve:
  - CVE-2017-0249
  cwe:
  - CWE-269
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/2017-0249
  - https://technet.microsoft.com/en-us/library/security/4021279.aspx
  - https://github.com/aspnet/Announcements/issues/239
  source_url: https://snyk.io/vuln/SNYK-DOTNET-SYSTEMNETSECURITY-60071
- id: snykio:nuget:system.net.security:2017-05-12
  title: Authentication Bypass
  description: |
    [`System.Net.Security`][1] provides types, such as
    System.Net.Security.SslStream, that uses SSL/TLS protocols to provide
    secure network communication between client and server endpoints.

    Affected versions of this package are vulnerable to Authentication
    Bypass attacks. The ASP.NET Core fails to properly sanitize the *Web
    Request Handler* component, allowing an attacker to spoof web requests
    and bypass authentication.



    [1]: https://www.nuget.org/packages/System.Net.Security
    \n[`System.Net.Security`][1] provides types, such as
    System.Net.Security.SslStream, that uses SSL/TLS protocols to provide
    secure network communication between client and server endpoints.

    Affected versions of this package are vulnerable to Authentication
    Bypass attacks. The ASP.NET Core fails to properly sanitize the *Web
    Request Handler* component, allowing an attacker to spoof web requests
    and bypass authentication.



    [1]: https://www.nuget.org/packages/System.Net.Security
    \n[`System.Net.Security`][1] provides types, such as
    System.Net.Security.SslStream, that uses SSL/TLS protocols to provide
    secure network communication between client and server endpoints.

    Affected versions of this package are vulnerable to Authentication
    Bypass attacks. The ASP.NET Core fails to properly sanitize the *Web
    Request Handler* component, allowing an attacker to spoof web requests
    and bypass authentication.



    [1]: https://www.nuget.org/packages/System.Net.Security
  affected_package: system.net.security
  vulnerable_versions:
  - "< 4.0.1"
  - ">= 4.3 < 4.3.1"
  severity: medium
  package_manager: nuget
  cve:
  - CVE-2017-0256
  cwe:
  - CWE-20
  credit:
  - Mikhail Shcherbakov
  references:
  - https://nvd.nist.gov/vuln/detail/2017-0256
  - https://technet.microsoft.com/en-us/library/security/4021279.aspx
  - https://github.com/aspnet/Announcements/issues/239
  source_url: https://snyk.io/vuln/SNYK-DOTNET-SYSTEMNETSECURITY-60072
