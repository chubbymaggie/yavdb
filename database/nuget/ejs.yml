---
- id: snykio:nuget:ejs:60142
  title: Remote Code Execution
  description: "[`ejs`][1] is a popular JavaScript templating engine. Affected versions\nof
    the package are vulnerable to *Remote Code Execution* by letting the\nattacker
    under certain conditions control the source folder from which\nthe engine renders
    include files. You can read more about this\nvulnerability on the [Snyk blog][2].\n\nThere\\'s
    also a [Cross-site Scripting][3] &amp; [Denial of Service][4]\nvulnerabilities
    caused by the same behaviour.\n\n\n\n[1]: https://www.npmjs.com/package/ejs\n[2]:
    https://snyk.io/blog/fixing-ejs-rce-vuln\n[3]: https://snyk.io/vuln/npm:ejs:20161130\n[4]:
    https://snyk.io/vuln/npm:ejs:20161130-1\n\\n`ejs` provides a few different options
    for you to render a template, two\nbeing very similar: `ejs.render()` and `ejs.renderFile()`.
    The only\ndifference being that `render` expects a string to be used for the\ntemplate
    and `renderFile` expects a path to a template file.\n\nBoth functions can be invoked
    in two ways. The first is calling them\nwith `template`, `data`, and `options`\\:\n\n
    \   ejs.render(str, data, options);\n    \n    ejs.renderFile(filename, data,
    options, callback)\n\nThe second way would be by calling only the `template` and
    `data`, while\n`ejs` lets the `options` be passed as part of the `data`\\:\n\n
    \   ejs.render(str, dataAndOptions);\n    \n    ejs.renderFile(filename, dataAndOptions,
    callback)\n\nIf used with a variable list supplied by the user (e.g. by reading
    it\nfrom the URI with `qs` or equivalent), an attacker can control `ejs`\noptions.
    This includes the `root` option, which allows changing the\nproject root for includes
    with an absolute path.\n\n    ejs.renderFile('my-template', {root:'/bad/root/'},
    callback);\n\nBy passing along the root directive in the line above, any includes\nwould
    now be pulled from `/bad/root` instead of the path intended. This\nallows the
    attacker to take control of the root directory for included\nscripts and divert
    it to a library under his control, thus leading to\nremote code execution.\n\nThe
    [fix][1] introduced in version `2.5.3` blacklisted `root` options\nfrom options
    passed via the `data` object.\n\n\n\n[1]: https://github.com/mde/ejs/commit/3d447c5a335844b25faec04b1132dbc721f9c8f6\n"
  affected_package: ejs
  vulnerable_versions:
  - "< 2.5.3"
  severity: high
  package_manager: nuget
  cwe:
  - CWE-94
  disclosed_date: 2016-12-01
  created_date: 2016-12-01
  last_modified_date: 2016-12-01
  credit:
  - Snyk Security Research Team
  references:
  - https://github.com/mde/ejs/commit/3d447c5a335844b25faec04b1132dbc721f9c8f6
  - https://snyk.io/blog/fixing-ejs-rce-vuln
  source_url: https://snyk.io/vuln/SNYK-DOTNET-EJS-60142
- id: snykio:nuget:ejs:60143
  title: Cross-site Scripting (XSS)
  description: "[`ejs`][1] is a popular JavaScript templating engine. Affected versions\nof
    the package are vulnerable to *Cross-site Scripting* by letting the\nattacker
    under certain conditions control and override the `filename`\noption causing it
    to render the value as is, without escaping it. You\ncan read more about this
    vulnerability on the [Snyk blog][2].\n\nThere\\'s also a [Remote Code Execution][3]
    &amp; [Denial of Service][4]\nvulnerabilities caused by the same behaviour.\n\n\n\n[1]:
    https://www.npmjs.com/package/ejs\n[2]: https://snyk.io/blog/fixing-ejs-rce-vuln\n[3]:
    https://snyk.io/vuln/npm:ejs:20161128\n[4]: https://snyk.io/vuln/npm:ejs:20161130-1\n\\n`ejs`
    provides a few different options for you to render a template, two\nbeing very
    similar: `ejs.render()` and `ejs.renderFile()`. The only\ndifference being that
    `render` expects a string to be used for the\ntemplate and `renderFile` expects
    a path to a template file.\n\nBoth functions can be invoked in two ways. The first
    is calling them\nwith `template`, `data`, and `options`\\:\n\n    ejs.render(str,
    data, options);\n    \n    ejs.renderFile(filename, data, options, callback)\n\nThe
    second way would be by calling only the `template` and `data`, while\n`ejs` lets
    the `options` be passed as part of the `data`\\:\n\n    ejs.render(str, dataAndOptions);\n
    \   \n    ejs.renderFile(filename, dataAndOptions, callback)\n\nIf used with a
    variable list supplied by the user (e.g. by reading it\nfrom the URI with `qs`
    or equivalent), an attacker can control `ejs`\noptions. This includes the `filename`
    option, which will be rendered as\nis when an error occurs during rendering.\n\n
    \   ejs.renderFile('my-template', {filename:'<script>alert(1)</script>'}, callback);\n\nThe
    [fix][1] introduced in version `2.5.3` blacklisted `root` options\nfrom options
    passed via the `data` object.\n\n\n\n[1]: https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f\n\\nCross-Site
    Scripting (XSS) attacks occur when an attacker tricks a\nuser’s browser to execute
    malicious JavaScript code in the context of a\nvictim’s domain. Such scripts can
    steal the user’s session cookies for\nthe domain, scrape or modify its content,
    and perform or modify actions\non the user’s behalf, actions typically blocked
    by the browser’s Same\nOrigin Policy.\n\nThese attacks are possible by escaping
    the context of the web\napplication and injecting malicious scripts in an otherwise
    trusted\nwebsite. These scripts can introduce additional attributes (say, a\n\\\"new\\\"
    option in a dropdown list or a new link to a malicious site) and\ncan potentially
    execute code on the clients side, unbeknown to the\nvictim. This occurs when characters
    like `<` `>` `\"` `'` are not escaped\nproperly.\n\nThere are a few types of XSS:\n\n*
    **Persistent XSS** is an attack in which the malicious code persists\n  into the
    web app’s database.\n* **Reflected XSS** is an which the website echoes back a
    portion of the\n  request. The attacker needs to trick the user into clicking
    a\n  malicious link (for instance through a phishing email or malicious JS\n  on
    another page), which triggers the XSS attack.\n* **DOM-based XSS** is an that
    occurs purely in the browser when\n  client-side JavaScript echoes back a portion
    of the URL onto the page.\n  DOM-Based XSS is notoriously hard to detect, as the
    server never gets\n  a chance to see the attack taking place.\n\n"
  affected_package: ejs
  vulnerable_versions:
  - "< 2.5.5"
  severity: medium
  package_manager: nuget
  cwe:
  - CWE-79
  disclosed_date: 2016-12-06
  created_date: 2016-12-06
  last_modified_date: 2016-12-06
  credit:
  - Snyk Security Research Team
  references:
  - https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f
  - https://snyk.io/blog/fixing-ejs-rce-vuln
  source_url: https://snyk.io/vuln/SNYK-DOTNET-EJS-60143
- id: snykio:nuget:ejs:60144
  title: Denial of Service (DoS)
  description: "[`ejs`][1] is a popular JavaScript templating engine. Affected versions\nof
    the package are vulnerable to *Denial of Service* by letting the\nattacker under
    certain conditions control and override the `localNames`\noption causing it to
    crash. You can read more about this vulnerability\non the [Snyk blog][2].\n\nThere\\'s
    also a [Remote Code Execution][3] &amp; [Cross-site\nScripting][4] vulnerabilities
    caused by the same behaviour.\n\n\n\n[1]: https://www.npmjs.com/package/ejs\n[2]:
    https://snyk.io/blog/fixing-ejs-rce-vuln\n[3]: https://snyk.io/vuln/npm:ejs:20161128\n[4]:
    https://snyk.io/vuln/npm:ejs:20161130\n\\n`ejs` provides a few different options
    for you to render a template, two\nbeing very similar: `ejs.render()` and `ejs.renderFile()`.
    The only\ndifference being that `render` expects a string to be used for the\ntemplate
    and `renderFile` expects a path to a template file.\n\nBoth functions can be invoked
    in two ways. The first is calling them\nwith `template`, `data`, and `options`\\:\n\n
    \   ejs.render(str, data, options);\n    \n    ejs.renderFile(filename, data,
    options, callback)\n\nThe second way would be by calling only the `template` and
    `data`, while\n`ejs` lets the `options` be passed as part of the `data`\\:\n\n
    \   ejs.render(str, dataAndOptions);\n    \n    ejs.renderFile(filename, dataAndOptions,
    callback)\n\nIf used with a variable list supplied by the user (e.g. by reading
    it\nfrom the URI with `qs` or equivalent), an attacker can control `ejs`\noptions.
    This includes the `localNames` option, which will cause the\nrenderer to crash.\n\n
    \   ejs.renderFile('my-template', {localNames:'try'}, callback);\n\nThe [fix][1]
    introduced in version `2.5.3` blacklisted `root` options\nfrom options passed
    via the `data` object.\n\n\n\n[1]: https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f\n"
  affected_package: ejs
  vulnerable_versions:
  - "< 2.5.5"
  severity: medium
  package_manager: nuget
  cwe:
  - CWE-400
  disclosed_date: 2016-12-06
  created_date: 2016-12-06
  last_modified_date: 2016-12-06
  credit:
  - Snyk Security Research Team
  references:
  - https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f
  - https://snyk.io/blog/fixing-ejs-rce-vuln
  source_url: https://snyk.io/vuln/SNYK-DOTNET-EJS-60144
