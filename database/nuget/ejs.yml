---
- id: snykio:nuget:ejs:60142
  title: Remote Code Execution
  description: "[`ejs`][1] is a popular JavaScript templating engine. Affected versions\nof
    the package are vulnerable to *Remote Code Execution* by letting the\nattacker
    under certain conditions control the source folder from which\nthe engine renders
    include files. You can read more about this\nvulnerability on the [Snyk blog][2].\n\nThere\\'s
    also a [Cross-site Scripting][3] &amp; [Denial of Service][4]\nvulnerabilities
    caused by the same behaviour.\n\n\n\n[1]: https://www.npmjs.com/package/ejs\n[2]:
    https://snyk.io/blog/fixing-ejs-rce-vuln\n[3]: https://snyk.io/vuln/npm:ejs:20161130\n[4]:
    https://snyk.io/vuln/npm:ejs:20161130-1\n\\n`ejs` provides a few different options
    for you to render a template, two\nbeing very similar: `ejs.render()` and `ejs.renderFile()`.
    The only\ndifference being that `render` expects a string to be used for the\ntemplate
    and `renderFile` expects a path to a template file.\n\nBoth functions can be invoked
    in two ways. The first is calling them\nwith `template`, `data`, and `options`\\:\n\n
    \   ejs.render(str, data, options);\n    \n    ejs.renderFile(filename, data,
    options, callback)\n\nThe second way would be by calling only the `template` and
    `data`, while\n`ejs` lets the `options` be passed as part of the `data`\\:\n\n
    \   ejs.render(str, dataAndOptions);\n    \n    ejs.renderFile(filename, dataAndOptions,
    callback)\n\nIf used with a variable list supplied by the user (e.g. by reading
    it\nfrom the URI with `qs` or equivalent), an attacker can control `ejs`\noptions.
    This includes the `root` option, which allows changing the\nproject root for includes
    with an absolute path.\n\n    ejs.renderFile('my-template', {root:'/bad/root/'},
    callback);\n\nBy passing along the root directive in the line above, any includes\nwould
    now be pulled from `/bad/root` instead of the path intended. This\nallows the
    attacker to take control of the root directory for included\nscripts and divert
    it to a library under his control, thus leading to\nremote code execution.\n\nThe
    [fix][1] introduced in version `2.5.3` blacklisted `root` options\nfrom options
    passed via the `data` object.\n\n\n\n[1]: https://github.com/mde/ejs/commit/3d447c5a335844b25faec04b1132dbc721f9c8f6\n"
  affected_package: ejs
  vulnerable_versions:
  - "< 2.5.3"
  severity: high
  package_manager: nuget
  cwe:
  - CWE-94
  disclosed_date: 2016-12-01
  created_date: 2016-12-01
  last_modified_date: 2016-12-01
  credit:
  - Snyk Security Research Team
  references:
  - https://github.com/mde/ejs/commit/3d447c5a335844b25faec04b1132dbc721f9c8f6
  - https://snyk.io/blog/fixing-ejs-rce-vuln
  source_url: https://snyk.io/vuln/SNYK-DOTNET-EJS-60142
- id: snykio:nuget:ejs:60143
  title: Cross-site Scripting (XSS)
  description: "[`ejs`][1] is a popular JavaScript templating engine. Affected versions\nof
    the package are vulnerable to *Cross-site Scripting* by letting the\nattacker
    under certain conditions control and override the `filename`\noption causing it
    to render the value as is, without escaping it. You\ncan read more about this
    vulnerability on the [Snyk blog][2].\n\nThere\\'s also a [Remote Code Execution][3]
    &amp; [Denial of Service][4]\nvulnerabilities caused by the same behaviour.\n\n\n\n[1]:
    https://www.npmjs.com/package/ejs\n[2]: https://snyk.io/blog/fixing-ejs-rce-vuln\n[3]:
    https://snyk.io/vuln/npm:ejs:20161128\n[4]: https://snyk.io/vuln/npm:ejs:20161130-1\n\\n`ejs`
    provides a few different options for you to render a template, two\nbeing very
    similar: `ejs.render()` and `ejs.renderFile()`. The only\ndifference being that
    `render` expects a string to be used for the\ntemplate and `renderFile` expects
    a path to a template file.\n\nBoth functions can be invoked in two ways. The first
    is calling them\nwith `template`, `data`, and `options`\\:\n\n    ejs.render(str,
    data, options);\n    \n    ejs.renderFile(filename, data, options, callback)\n\nThe
    second way would be by calling only the `template` and `data`, while\n`ejs` lets
    the `options` be passed as part of the `data`\\:\n\n    ejs.render(str, dataAndOptions);\n
    \   \n    ejs.renderFile(filename, dataAndOptions, callback)\n\nIf used with a
    variable list supplied by the user (e.g. by reading it\nfrom the URI with `qs`
    or equivalent), an attacker can control `ejs`\noptions. This includes the `filename`
    option, which will be rendered as\nis when an error occurs during rendering.\n\n
    \   ejs.renderFile('my-template', {filename:'<script>alert(1)</script>'}, callback);\n\nThe
    [fix][1] introduced in version `2.5.3` blacklisted `root` options\nfrom options
    passed via the `data` object.\n\n\n\n[1]: https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f\n\\nA
    cross-site scripting attack occurs when the attacker tricks a\nlegitimate web-based
    application or site to accept a request as\noriginating from a trusted source.\n\nThis
    is done by escaping the context of the web application; the web\napplication then
    delivers that data to its users along with other\ntrusted dynamic content, without
    validating it. The browser unknowingly\nexecutes malicious script on the client
    side (through client-side\nlanguages; usually JavaScript or HTML) in order to
    perform actions that\nare otherwise typically blocked by the browser’s Same Origin
    Policy.\n\nֿInjecting malicious code is the most prevalent manner by which XSS
    is\nexploited; for this reason, escaping characters in order to prevent this\nmanipulation
    is the top method for securing code against this\nvulnerability.\n\nEscaping means
    that the application is coded to mark key characters, and\nparticularly key characters
    included in user input, to prevent those\ncharacters from being interpreted in
    a dangerous context. For example,\nin HTML, `<` can be coded as `&lt`; and `>`
    can be coded as `&gt`; in\norder to be interpreted and displayed as themselves
    in text, while\nwithin the code itself, they are used for HTML tags. If malicious\ncontent
    is injected into an application that escapes special characters\nand that malicious
    content uses `<` and `>` as HTML tags, those\ncharacters are nonetheless not interpreted
    as HTML tags by the browser\nif they’ve been correctly escaped in the application
    code and in this\nway the attempted attack is diverted.\n\nThe most prominent
    use of XSS is to steal cookies (source: OWASP\nHttpOnly) and hijack user sessions,
    but XSS exploits have been used to\nexpose sensitive information, enable access
    to privileged services and\nfunctionality and deliver malware.\n\n### Types of
    attacks   {#types-of-attacks}\n\nThere are a few methods by which XSS can be manipulated:\n\n|
    Type | Origin | Description |\n|----------\n| **Stored** | Server | The malicious
    code is inserted in the application (usually as a link) by the attacker. The code
    is activated every time a user clicks the link. |\n| **Reflected** | Server |
    The attacker delivers a malicious link externally from the vulnerable web site
    application to a user. When clicked, malicious code is sent to the vulnerable
    web site, which reflects the attack back to the user’s browser. |\n| **DOM-based**
    | Client | The attacker forces the user’s browser to render a malicious page.
    The data in the page itself delivers the cross-site scripting data. |\n| **Mutated**
    |  | The attacker injects code that appears safe, but is then rewritten and modified
    by the browser, while parsing the markup. An example is rebalancing unclosed quotation
    marks or even adding quotation marks to unquoted parameters. |\n\n### Affected
    environments   {#affected-environments}\n\nThe following environments are susceptible
    to an XSS attack:\n\n* Web servers\n* Application servers\n* Web application environments\n\n###
    How to prevent   {#how-to-prevent}\n\nThis section describes the top best practices
    designed to specifically\nprotect your code:\n\n* Sanitize data input in an HTTP
    request before reflecting it back,\n  ensuring all data is validated, filtered
    or escaped before echoing\n  anything back to the user, such as the values of
    query parameters\n  during searches.\n* Convert special characters such as `?`,
    `&`, `/`, `<`, `>` and spaces\n  to their respective HTML or URL encoded equivalents.\n*
    Give users the option to disable client-side scripts.\n* Redirect invalid requests.\n*
    Detect simultaneous logins, including those from two separate IP\n  addresses,
    and invalidate those sessions.\n* Use and enforce a Content Security Policy (source:
    Wikipedia) to\n  disable any features that might be manipulated for an XSS attack.\n*
    Read the documentation for any of the libraries referenced in your\n  code to
    understand which elements allow for embedded HTML.\n\n"
  affected_package: ejs
  vulnerable_versions:
  - "< 2.5.5"
  severity: medium
  package_manager: nuget
  cwe:
  - CWE-79
  disclosed_date: 2016-12-06
  created_date: 2016-12-06
  last_modified_date: 2016-12-06
  credit:
  - Snyk Security Research Team
  references:
  - https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f
  - https://snyk.io/blog/fixing-ejs-rce-vuln
  source_url: https://snyk.io/vuln/SNYK-DOTNET-EJS-60143
- id: snykio:nuget:ejs:60144
  title: Denial of Service (DoS)
  description: "[`ejs`][1] is a popular JavaScript templating engine. Affected versions\nof
    the package are vulnerable to *Denial of Service* by letting the\nattacker under
    certain conditions control and override the `localNames`\noption causing it to
    crash. You can read more about this vulnerability\non the [Snyk blog][2].\n\nThere\\'s
    also a [Remote Code Execution][3] &amp; [Cross-site\nScripting][4] vulnerabilities
    caused by the same behaviour.\n\n\n\n[1]: https://www.npmjs.com/package/ejs\n[2]:
    https://snyk.io/blog/fixing-ejs-rce-vuln\n[3]: https://snyk.io/vuln/npm:ejs:20161128\n[4]:
    https://snyk.io/vuln/npm:ejs:20161130\n\\n`ejs` provides a few different options
    for you to render a template, two\nbeing very similar: `ejs.render()` and `ejs.renderFile()`.
    The only\ndifference being that `render` expects a string to be used for the\ntemplate
    and `renderFile` expects a path to a template file.\n\nBoth functions can be invoked
    in two ways. The first is calling them\nwith `template`, `data`, and `options`\\:\n\n
    \   ejs.render(str, data, options);\n    \n    ejs.renderFile(filename, data,
    options, callback)\n\nThe second way would be by calling only the `template` and
    `data`, while\n`ejs` lets the `options` be passed as part of the `data`\\:\n\n
    \   ejs.render(str, dataAndOptions);\n    \n    ejs.renderFile(filename, dataAndOptions,
    callback)\n\nIf used with a variable list supplied by the user (e.g. by reading
    it\nfrom the URI with `qs` or equivalent), an attacker can control `ejs`\noptions.
    This includes the `localNames` option, which will cause the\nrenderer to crash.\n\n
    \   ejs.renderFile('my-template', {localNames:'try'}, callback);\n\nThe [fix][1]
    introduced in version `2.5.3` blacklisted `root` options\nfrom options passed
    via the `data` object.\n\n\n\n[1]: https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f\n"
  affected_package: ejs
  vulnerable_versions:
  - "< 2.5.5"
  severity: medium
  package_manager: nuget
  cwe:
  - CWE-400
  disclosed_date: 2016-12-06
  created_date: 2016-12-06
  last_modified_date: 2016-12-06
  credit:
  - Snyk Security Research Team
  references:
  - https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f
  - https://snyk.io/blog/fixing-ejs-rce-vuln
  source_url: https://snyk.io/vuln/SNYK-DOTNET-EJS-60144
