---
- id: snykio:nuget:emojione:2016-07-25
  title: Cross-site Scripting (XSS)
  description: |+
    `emojione` is a module supporting an open list of emojis, replacing
    shortcodes with the corresponding image.

    While this package doesn\'t control this decision, emoji shortcodes are
    typically provided by users as part of some interaction or comment, and
    often persist on the page. Therefore, sanitizing them to prevent scripts
    is critical.

    While `emojione` does sanitize passed in shortcodes before echoing back
    the resulting values, a clever sequence of encoded values will still
    allow attackers to inject scripts into the result. As a result, attacker
    can perform a Cross-site Scripting (XSS) attack whenever the output of
    `emojione` is passed into the page output.

    \n`emojione` is a module supporting an open list of emojis, replacing
    shortcodes with the corresponding image.

    While this package doesn\'t control this decision, emoji shortcodes are
    typically provided by users as part of some interaction or comment, and
    often persist on the page. Therefore, sanitizing them to prevent scripts
    is critical.

    While `emojione` does sanitize passed in shortcodes before echoing back
    the resulting values, a clever sequence of encoded values will still
    allow attackers to inject scripts into the result. As a result, attacker
    can perform a Cross-site Scripting (XSS) attack whenever the output of
    `emojione` is passed into the page output.

    \n`emojione` is a module supporting an open list of emojis, replacing
    shortcodes with the corresponding image.

    While this package doesn\'t control this decision, emoji shortcodes are
    typically provided by users as part of some interaction or comment, and
    often persist on the page. Therefore, sanitizing them to prevent scripts
    is critical.

    While `emojione` does sanitize passed in shortcodes before echoing back
    the resulting values, a clever sequence of encoded values will still
    allow attackers to inject scripts into the result. As a result, attacker
    can perform a Cross-site Scripting (XSS) attack whenever the output of
    `emojione` is passed into the page output.

    \n`emojione` is a module supporting an open list of emojis, replacing
    shortcodes with the corresponding image.

    While this package doesn\'t control this decision, emoji shortcodes are
    typically provided by users as part of some interaction or comment, and
    often persist on the page. Therefore, sanitizing them to prevent scripts
    is critical.

    While `emojione` does sanitize passed in shortcodes before echoing back
    the resulting values, a clever sequence of encoded values will still
    allow attackers to inject scripts into the result. As a result, attacker
    can perform a Cross-site Scripting (XSS) attack whenever the output of
    `emojione` is passed into the page output.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: emojione
  vulnerable_versions:
  - "< 1.3.1"
  severity: high
  package_manager: nuget
  cwe:
  - CWE-79
  credit:
  - Andrea Giammarchi
  references:
  - https://github.com/Ranks/emojione/issues/61
  - https://github.com/Ranks/emojione/commit/613079b16c00e47fb3c44744a67ed88a9295afb1
  - https://gist.github.com/WebReflection/df05641bd04954f6d366
  source_url: https://snyk.io/vuln/SNYK-DOTNET-EMOJIONE-60148
