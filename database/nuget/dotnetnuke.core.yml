---
- id: snykio:nuget:dotnetnuke.core:174443
  title: Cross-site Scripting (XSS)
  description: |+
    [DotNetNuke.Core][1] provides basic references to the DotNetNuke.dll to
    develop extensions for the DNN Platform. For MVC or WebAPI please see
    other packages available as well.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS) via the `Display Name` field under `Manage Profile`. An Attacker
    may be able to inject arbitrary Javascript.



    [1]: https://www.nuget.org/packages/DotNetNuke.Core/
    \nA cross-site scripting attack occurs when the attacker tricks a
    legitimate web-based application or site to accept a request as
    originating from a trusted source.

    This is done by escaping the context of the web application; the web
    application then delivers that data to its users along with other
    trusted dynamic content, without validating it. The browser unknowingly
    executes malicious script on the client side (through client-side
    languages; usually JavaScript or HTML) in order to perform actions that
    are otherwise typically blocked by the browser’s Same Origin Policy.

    ֿInjecting malicious code is the most prevalent manner by which XSS is
    exploited; for this reason, escaping characters in order to prevent this
    manipulation is the top method for securing code against this
    vulnerability.

    Escaping means that the application is coded to mark key characters, and
    particularly key characters included in user input, to prevent those
    characters from being interpreted in a dangerous context. For example,
    in HTML, `<` can be coded as `&lt`; and `>` can be coded as `&gt`; in
    order to be interpreted and displayed as themselves in text, while
    within the code itself, they are used for HTML tags. If malicious
    content is injected into an application that escapes special characters
    and that malicious content uses `<` and `>` as HTML tags, those
    characters are nonetheless not interpreted as HTML tags by the browser
    if they’ve been correctly escaped in the application code and in this
    way the attempted attack is diverted.

    The most prominent use of XSS is to steal cookies (source: OWASP
    HttpOnly) and hijack user sessions, but XSS exploits have been used to
    expose sensitive information, enable access to privileged services and
    functionality and deliver malware.

    ### Types of attacks   {#types-of-attacks}

    There are a few methods by which XSS can be manipulated:

    | Type | Origin | Description |
    |----------
    | **Stored** | Server | The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link. |
    | **Reflected** | Server | The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser. |
    | **DOM-based** | Client | The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data. |
    | **Mutated** |  | The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters. |

    ### Affected environments   {#affected-environments}

    The following environments are susceptible to an XSS attack:

    * Web servers
    * Application servers
    * Web application environments

    ### How to prevent   {#how-to-prevent}

    This section describes the top best practices designed to specifically
    protect your code:

    * Sanitize data input in an HTTP request before reflecting it back,
      ensuring all data is validated, filtered or escaped before echoing
      anything back to the user, such as the values of query parameters
      during searches.
    * Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces
      to their respective HTML or URL encoded equivalents.
    * Give users the option to disable client-side scripts.
    * Redirect invalid requests.
    * Detect simultaneous logins, including those from two separate IP
      addresses, and invalidate those sessions.
    * Use and enforce a Content Security Policy (source: Wikipedia) to
      disable any features that might be manipulated for an XSS attack.
    * Read the documentation for any of the libraries referenced in your
      code to understand which elements allow for embedded HTML.

  affected_package: dotnetnuke.core
  vulnerable_versions:
  - "< 6.2.9"
  - ">= 7.0 < 7.1.1"
  severity: medium
  package_manager: nuget
  cve:
  - CVE-2013-3943
  cwe:
  - CWE-79
  disclosed_date: 2013-08-18
  created_date: 2019-04-18
  last_modified_date: 2019-04-18
  credit:
  - Unknown
  references:
  - https://www.securityfocus.com/bid/61809
  source_url: https://snyk.io/vuln/SNYK-DOTNET-DOTNETNUKECORE-174443
- id: snykio:nuget:dotnetnuke.core:60256
  title: Server-side Request Forgery (SSRF)
  description: |
    [`dotnetnuke.core`][1] is an open source web application framework.

    Affected versions of this package are vulnerable to Server-Side Request
    Forgery (SSRF) via the DnnImageHandler class. Attackers may be able to
    access information about internal network resources.



    [1]: https://www.nuget.org/packages/dotnetnuke.core
  affected_package: dotnetnuke.core
  vulnerable_versions:
  - "< 9.2.0"
  severity: high
  package_manager: nuget
  cve:
  - CVE-2017-0929
  cwe:
  - CWE-94
  disclosed_date: 2018-07-19
  created_date: 2018-07-19
  last_modified_date: 2018-07-19
  credit:
  - Kurt Boberg
  references:
  - https://github.com/dnnsoftware/Dnn.Platform/commit/d3953db85fee77bb5e6383747692c507ef8b94c3
  - https://nvd.nist.gov/vuln/detail/CVE-2017-0929
  source_url: https://snyk.io/vuln/SNYK-DOTNET-DOTNETNUKECORE-60256
- id: snykio:nuget:dotnetnuke.core:60264
  title: Privilege Escalation
  description: |
    [`dotnetnuke.core`][1] is an open source web application framework.

    Affected versions of this package are vulnerable to Privilege
    Escalation. An attacker could reinstall the application and gain
    SuperUser access via a direct request to `Install/InstallWizard.aspx`.



    [1]: https://www.nuget.org/packages/dotnetnuke.core
  affected_package: dotnetnuke.core
  vulnerable_versions:
  - "< 7.4.1"
  severity: high
  package_manager: nuget
  cve:
  - CVE-2015-2794
  cwe:
  - CWE-265
  disclosed_date: 2017-02-06
  created_date: 2018-08-05
  last_modified_date: 2018-08-05
  references:
  - http://www.dnnsoftware.com/community-blog/cid/155198/workaround-for-potential-security-issue
  - https://nvd.nist.gov/vuln/detail/CVE-2015-2794
  source_url: https://snyk.io/vuln/SNYK-DOTNET-DOTNETNUKECORE-60264
- id: snykio:nuget:dotnetnuke.core:60265
  title: Cross-site Scripting (XSS)
  description: |+
    [dotnetnuke.core][1] is an open source web application framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS). An attacker could inject arbitrary web script or HTML via a
    crafted onclick attribute in an IMG element.



    [1]: https://www.nuget.org/packages/dotnetnuke.core
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: dotnetnuke.core
  vulnerable_versions:
  - "< 8.0.1"
  severity: medium
  package_manager: nuget
  cve:
  - CVE-2016-7119
  cwe:
  - CWE-79
  disclosed_date: 2016-08-31
  created_date: 2018-08-05
  last_modified_date: 2018-08-05
  credit:
  - Unknown
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2016-7119
  - https://www.securityfocus.com/bid/92719
  source_url: https://snyk.io/vuln/SNYK-DOTNET-DOTNETNUKECORE-60265
- id: snykio:nuget:dotnetnuke.core:60266
  title: Cross-site Scripting (XSS)
  description: |+
    [`dotnetnuke.core`][1] is an open source web application framework.

    Affected versions of this package are vulnerable to Cross-site Scripting
    (XSS).



    [1]: https://www.nuget.org/packages/dotnetnuke.core
    \nCross-Site Scripting (XSS) attacks occur when an attacker tricks a
    user’s browser to execute malicious JavaScript code in the context of a
    victim’s domain. Such scripts can steal the user’s session cookies for
    the domain, scrape or modify its content, and perform or modify actions
    on the user’s behalf, actions typically blocked by the browser’s Same
    Origin Policy.

    These attacks are possible by escaping the context of the web
    application and injecting malicious scripts in an otherwise trusted
    website. These scripts can introduce additional attributes (say, a
    \"new\" option in a dropdown list or a new link to a malicious site) and
    can potentially execute code on the clients side, unbeknown to the
    victim. This occurs when characters like `<` `>` `"` `'` are not escaped
    properly.

    There are a few types of XSS:

    * **Persistent XSS** is an attack in which the malicious code persists
      into the web app’s database.
    * **Reflected XSS** is an which the website echoes back a portion of the
      request. The attacker needs to trick the user into clicking a
      malicious link (for instance through a phishing email or malicious JS
      on another page), which triggers the XSS attack.
    * **DOM-based XSS** is an that occurs purely in the browser when
      client-side JavaScript echoes back a portion of the URL onto the page.
      DOM-Based XSS is notoriously hard to detect, as the server never gets
      a chance to see the attack taking place.

  affected_package: dotnetnuke.core
  vulnerable_versions:
  - "< 7.4.0"
  severity: medium
  package_manager: nuget
  cve:
  - CVE-2015-1566
  cwe:
  - CWE-79
  disclosed_date: 2016-08-31
  created_date: 2018-08-05
  last_modified_date: 2018-08-05
  references:
  - https://nvd.nist.gov/vuln/detail/CVE-2015-1566
  source_url: https://snyk.io/vuln/SNYK-DOTNET-DOTNETNUKECORE-60266
